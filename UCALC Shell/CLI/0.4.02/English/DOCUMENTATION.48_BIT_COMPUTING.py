WikIDSelect = int(20013)
if WikIDSelect == 20013:
	if WikIDSelect == 20013:
		if WikIDSelect == 20013:
			if WikIDSelect == 20013:
				print ("In computer architecture, 48-bit integers can represent 281,474,976,710,656 (248 or 2.814749767×1014) discrete values. ")
				print ("This allows an unsigned binary integer range of 0 through 281,474,976,710,655 (248 − 1) or a signed two's complement ")
				print ("range of -140,737,488,355,328 (-247) through 140,737,488,355,327 (247 − 1). A 48-bit memory address can directly ")
				print ("address every byte of 256 tebibytes of storage. 48-bit can refer to any other data unit that consumes 48 bits (6 octets)") 
				print ("in width. Examples include 48-bit CPU and ALU architectures are those that are based on registers, address buses, or data ")
				print ("buses of that size.")
				more1 = input("Word size")
				print (" ")
				print ("Computers with 48-bit words include the AN/FSQ-32, CDC 1604/upper-3000 series, BESM-6, Ferranti Atlas, and Burroughs ")
				print ("large systems (B5xxx-B8xxx, most of which additionally had a 3- or 4-bit type tag).")
				more1 = input("Addressing")
				print (" ")
				print ("The IBM System/38 and the AS/400, in its CISC variants, are 48-bit addressing systems. The address size used in logical ")
				print ("block addressing was increased to 48 bits with the introduction of ATA-6. The Ext4 file system physically limits the file ")
				print ("block count to 48 bits.")
				print (" ")
				print ("The minimal implementation of the x86-64 architecture provides 48-bit addressing encoded into 64 bits; future versions ")
				print ("of the architecture can expand this without breaking properly written applications.")
				print (" ")
				print ("The media access control address (MAC address) of a computer uses a 48-bit address space. This can be changed to 64-bit") 
				print ("addressing.")
				more1 = input("Images")
				print ("See also: Deep color ")
				print (" ")
				print ("In digital images, 48 bits per pixel, or 16 bits per each color channel (red, green and blue), is used for accurate ")
				print ("processing. For the human eye, it is almost impossible to see any difference between such an image and a 24-bit image,")
				print ("[citation needed] but the existence of more shades of each of the three primary colors (65,536 as opposed to 256) means") 
				print ("that more operations can be performed on the image without risk of noticeable banding or posterization.")
				print (" ")
				print ("vte")
				print (" ")
				more1 = input ("Processor technologies")
				print ("Models")
				print (" ")
				more1 = input("Turing machine")
				print ("Universal Post–Turing Quantum Belt machine Stack machine Finite-state machine")
				print ("with datapath Hierarchical Queue automaton Register machines")
				print ("Counter Pointer Random-access Random-access stored program")
				print (" ")
				more1 = input("Architecture")	
				print (" ")
				print ("Von Neumann Harvard")
				print ("modified Dataflow Transport-triggered Cellular Endianness Memory access")
				print ("NUMA HUMA Load/store Register/memory Cache hierarchy Memory hierarchy")
				print ("Virtual memory Secondary storage Heterogeneous Fabric Multiprocessing Cognitive Neuromorphic")
				print (" ")
				more1 = input("Instruction set")
				print ("architectures	")
				more1 = input("Types")	
				print (" ")
				print ("CISC RISC Application-specific EDGE")
				print ("TRIPS VLIW")
				print ("EPIC MISC OISC NISC ZISC comparison")
				more1 = input("addressing modes")
				print (" ")
				print ("x86 ARM MIPS Power")
				print ("PowerPC SPARC Itanium Unicore MicroBlaze RISC-V others")
				print (" ")
				more1 = input("Execution")	
				print ("Instruction pipelining	")
				print ("Pipeline stall Operand forwarding Classic RISC pipeline")
				more1 = input("Hazards")	
				print (" ")
				print ("Data dependency Structural Control False sharing")
				print (" ")
				print ("Out-of-order	 ")
				more1 = input("Tomasulo algorithm")
				print ("Reservation station Re-order buffer Register renaming")
				print (" ")
				more1 = input("Speculative	")
				print (" ")
				print ("Branch prediction Memory dependence prediction")
				print (" ")
				more1 = input("Parallelism")	
				print ("Level	")
				print (" ")
				print ("Bit")
				print ("Bit-serial Word Instruction Pipelining")
				print ("Scalar Superscalar Task")
				print ("Thread Process Data")
				print ("Vector Memory Distributed")
				print (" ")
				more1 = input("Multithreading")	
				print (" ")
				print ("Temporal Simultaneous")
				print ("Hyperthreading Speculative Preemptive Cooperative")
				print (" ")
				more1 = input("Flynn's taxonomy")			
				print (" ")
				print ("SISD SIMD")
				print ("SWAR SIMT MISD MIMD")
				print ("SPMD")
				print (" ")
				more1 = input("Processor")
				print ("Performance	")
				print (" ")
				print ("Transistor count Instructions per cycle (IPC)")
				print ("Cycles per instruction (CPI) Instructions per second (IPS) Floating-point operations per second (FLOPS) Transactions per") 
				print ("second (TPS) Synaptic updates per second (SUPS) Performance per watt (PPW) Cache performance metrics Computer performance") 
				print ("by orders of magnitude")
				print (" ")
				more1 = input("Types")	
				print (" ")
				print ("Central processing unit (CPU) Graphics processing unit (GPU)")
				print ("GPGPU Vector Barrel Stream Coprocessor ASIC FPGA CPLD Multi-chip module (MCM) System in package (SiP)")
				print (" ")
				more1 = input("By application")	
				print (" ")
				print ("Microprocessor Microcontroller Mobile Notebook Ultra-low-voltage ASIP")
				print (" ")
				more1 = input ("Systems")
				print ("on Chip	")
				print (" ")
				print ("System-on-Chip (SoC) Multiprocessor (MPSoC) Programmable (PSoC) Network-on-Chip (NoC)")
				print (" ")
				more1 = input("Hardware")
				print ("accelerators")	
				print (" ")
				print ("AI accelerator Vision processing unit (VPU) Physics processing unit (PPU) Digital signal processor (DSP) Tensor processing ")
				print ("unit (TPU) Secure cryptoprocessor Network processor Baseband processor")
				print (" ")
				more1 = input("Word size")	
				print (" ")
				print ("1-bit 2-bit 4-bit 8-bit 16-bit 32-bit 48-bit 64-bit 128-bit 256-bit 512-bit others")
				print ("variable")
				print (" ")
				more1 = input ("Core count")	
				print (" ")
				print ("Single-core Multi-core Manycore Heterogeneous architecture")
				print (" ")
				more1 = input("Components")	
				print (" ")
				print ("Core Cache")
				print ("CPU cache replacement policies coherence Bus Clock rate FIFO")
				print (" ")
				more1 = input("Functional units")	
				print (" ")
				print ("Arithmetic logic unt (ALU) Address generation unit (AGU) Floating-point unit (FPU) Memory management unit")
				print ("Load–store unit Translation lookaside buffer (TLB)")
				print (" ")
				more1 = input("Logic")	
				print (" ")
				print ("Combinational Sequential Glue Logic Gate")
				print ("Quantum Array")
				print (" ")
				more1 = input("Registers")	
				print (" ")
				print ("Processor register Register file Memory buffer Program counter Stack")
				print (" ")
				more1 = input("Control unit")	
				print (" ")
				print ("Instruction unit Data buffer Write buffer Microcode ROM Counter")
				print (" ")
				more1 = input("Datapath")	
				print (" ")
				print ("Multiplexer Demultiplexer Adder Multiplier")
				print ("CPU Binary decoder")
				print ("Address decoder Sum addressed decoder Barrel shifter")
				print (" ")
				more1 = input("Circuitry")			
				print (" ")
				print ("Integrated circuit")
				print ("3D Mixed signal Power management Boolean Digital Analog Quantum Switch")
				print (" ")
				more1 = input("Power")
				print ("management	")
				print (" ")
				print ("PMU APM ACPI Dynamic frequency scaling Dynamic voltage scaling Clock gating Performance per watt (PPW) ")
				print (" ")
				more1 = input("Related")	
				print (" ")
				print ("History of general-purpose CPUs Microprocessor chronology Processor design Digital electronics Hardware security module")
				print (" ")
				print (" ")
				print (" ")
				noMore = input("Press [ENTER] key to exit")