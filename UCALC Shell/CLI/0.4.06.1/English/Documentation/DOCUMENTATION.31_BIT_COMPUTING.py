WikIDSelect = int(20010)
if WikIDSelect == 20010:
	if WikIDSelect == 20010:
		if WikIDSelect == 20010:	
			if WikIDSelect == 20010:
				print ("In computer architecture, 31-bit integers, memory addresses, or other data units are those that are 31 bits wide.")
				print (" ")
				print ("In 1983, IBM introduced 31-bit addressing in the System/370-XA mainframe architecture as an upgrade to the 24-bit physical and") 
				print ("virtual,[1] and transitional 24-bit-virtual/26-bit physical,[2][3] addressing of earlier models.[4][5] This enhancement ")
				print ("allowed address spaces to be 128 times larger, permitting programs to address memory above 16 MB (referred to ")
				print ("as ''above the line'').[6][1] Support for COBOL, FORTRAN and later on Linux/390 were included.")
				more1 = input("Contents")
				print (" ")
				print ("1 Architecture")
				print ("2 Transition")
				print ("3 370/ESA architecture")
				print ("4 z/Architecture")
				print ("5 Linux/390")
				print ("6 References")
				print (" ")
				more1 = input("Architecture")
				print (" ")
				print ("In the System/360, other than the 360/67, and early System/370 architectures, the general purpose registers were 32 bits wide,") 
				print ("the machine did 32-bit arithmetic operations, and addresses were always stored in 32-bit words, so the architecture was ")
				print ("considered 32-bit, but the machines ignored the top 8 bits of the address resulting in 24-bit addressing. With the XA ")
				print ("extension, only the high order bit (bit 0) in the word was ignored for addressing. An exception is that mode-switching ")
				print ("instructions also used bit 0. There were at least two reasons that IBM did not implement the 32-bit addressing of the 360/67")
				print (" ")
				print ("The loop control instructions BXH and BXLE did signed comparisons.")
				print ("Much of the existing software used bit 0 as an end-of-list indicator.[7]")
				print (" ")
				more1 = input("Transition")
				print (" ")
				print ("The transition was tricky: assembly language programmers, including IBM's own operating systems architects and developers, ")
				print ("had been using the spare byte at the top of addresses for flags for almost twenty years.[8] IBM chose to provide two forms ")
				print ("of addressing to minimize the pain: if the most significant bit (bit 0) of a 32-bit address was on, the next 31 bits were")
				print ("interpreted as the virtual address. If the most significant bit was off, then only the lower 24 bits were treated as the ")
				print ("virtual address (just as with pre-XA systems). Thus programs could continue using the seven low-order bits of the top byte") 
				print ("for other purposes as long as they left the top bit off. The only programs requiring modification were those that set the ")
				print ("top (leftmost) bit of a word containing an address. This also affected address comparisons: The leftmost bit of a word is ")
				print ("also interpreted as a sign-bit in 2's complement arithmetic, indicating a negative number if bit 0 is on. Programs that use ")
				print ("signed arithmetic comparison instructions could get reversed results. Two equivalent addresses could be compared as non-equal ")
				print ("if one of them had the sign bit turned on even if the remaining bits were identical. Most of this was invisible to programmers") 
				print ("using high-level languages like COBOL[9] or FORTRAN,[3][10] and IBM aided the transition with dual mode hardware for a period ")
				print ("of time.")
				print (" ")
				print ("Certain machine instructions in this 31-bit addressing mode alter the addressing mode bit as a possibly intentional side ")
				print ("effect. For example, the original subroutine call instructions BAL, Branch and Link, and its register-register equivalent, ")
				print ("BALR, Branch and Link Register, store certain status information, the instruction length code,[11] the condition code and ")
				print ("the program mask, in the top byte of the return address. A BAS, Branch and Store, instruction was added to allow 31-bit")
				print ("return addresses. BAS, and its register-register equivalent, BASR, Branch and Store Register, was part of the instruction") 
				print ("set of the System/360 Model 67, which was the only System/360 model to allow addresses longer than 24 bits. These ")
				print ("instructions were maintained, but were modified and extended for 31-bit addressing.")
				print (" ")
				print ("Additional instructions in support of 24/31-bit addressing include two new register-register call/return instructions ")
				print ("which also effect an addressing mode change (e.g. Branch and Save and Set Mode, BASSM,[12] the 24/31 bit version of a call") 
				print ("where the linkage address including the mode is saved and a branch is taken to an address in a possibly different mode, ")
				print ("and BSM, Branch and Set Mode, the 24/31 bit version of a return, where the return is directly to the previously saved ")
				print ("linkage address and in its previous mode). Taken together, BASSM and BSM allow 24-bit calls to 31-bit (and return to 24-bit),") 
				print ("31-bit calls to 24-bit (and return to 31-bit), 24-bit calls to 24-bit (and return to 24-bit) and 31-bit calls to 31-bit ")
				print ("(and return to 31-bit).")
				print (" ")
				print ("Like BALR 14,15 (the 24-bit-only form of a call), BASSM is used as BASSM 14,15, where the linkage address and mode are saved ")
				print ("in register 14, and a branch is taken to the subroutine address and mode specified in register 15. Somewhat similarly to BCR ")
				print ("15,14 (the 24-bit-only form of an unconditional return), BSM is used as BSM 0,14, where 0 indicates that the current mode is ")
				print ("not saved (the program is leaving the subroutine, anyway), and a return to the caller at the address and mode specified in ")
				print ("register 14 is to be taken. Refer to IBM publication MVS/Extended Architecture System Programming Library: 31-Bit Addressing,") 
				print ("GC28-1158-1, for extensive examples of the use of BAS, BASR, BASSM and BSM, in particular, pp. 29â€“30.")
				more1 = input("370/ESA architecture")
				print (" ")
				print ("In the 1990s IBM introduced 370/ESA architecture (later named 390/ESA and finally ESA/390 or System/390, in short S/390), ")
				print ("completing the evolution to full 31-bit virtual addressing and keeping this addressing mode flag. These later architectures ")
				print ("allow more than 2 GB of physical memory and allow multiple concurrent address spaces up to 2 GB each in size. As of mid-2006 ")
				print ("there were too many programs unduly constrained by this multiple 31-bit addressing mode.[citation needed]")
				more1 = input("z/Architecture")
				print (" ")
				print ("IBM broke the 2 GB linear addressing barrier (''the bar'') in 2000 with the introduction of the first 64-bit z/Architecture ")
				print ("system, the IBM zSeries Model 900.[1][13] Unlike the XA transition, z/Architecture does not reserve a top bit to identify ")
				print ("earlier code. z/Architecture maintains compatibility with 24-bit and 31-bit code, even older code running concurrently with ")
				print ("newer 64-bit code.")
				print ("Linux/390")
				print (" ")
				print ("Since Linux/390 was first released for the existing 32-bit data/31-bit addressing hardware in 1999, initial mainframe ")
				print ("Linux applications compiled in pre-z/Architecture mode are also limited to 31-bit addressing. This limitation disappeared ")
				print ("with 64-bit hardware, 64-bit Linux on z Systems, and 64-bit Linux applications. The 64-bit Linux distributions still run ")
				print ("32-bit data/31-bit addressing programs. IBM's 31-bit addressing allows 31-bit code to make use of additional memory. ")
				print ("However, at any one instant, a maximum of 2 GB is in each working address space. For non-64-bit Linux on processors ")
				print ("with 31-bit addressing, it is possible to assign memory above the 2 GB bar as a RAM disk. 31-bit Linux kernel")
				print ("(not user-space) support was removed in version 4.1.[14] ")
				print (" ")
				noMore = input("Press [ENTER] key to exit")