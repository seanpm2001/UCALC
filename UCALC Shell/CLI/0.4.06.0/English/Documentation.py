print (" ")
print (" ")
print ("                                                                                                                                              ")
print ("                                                                                                                                              ")
print ("                                                      ____                         ___                   ___                                  ")
print ("      ,---,                                         ,'  , `.                     ,--.'|_               ,--.'|_    ,--,                        ")
print ("    ,---.'|   ,---.                     ,--,     ,-+-,.' _ |             ,---,   |  | :,'              |  | :,' ,--.'|    ,---.        ,---,  ")
print ("    |   | :  '   ,'\\                  ,'_ /|  ,-+-. ;   , ||         ,-+-. /  |  :  : ' :              :  : ' : |  |,    '   ,'\\   ,-+-. /  |") 
print ("    |   | | /   /   |   ,---.    .--. |  | : ,--.'|'   |  || ,---.  ,--.'|'   |.;__,'  /    ,--.--.  .;__,'  /  `--'_   /   /   | ,--.'|'   | ")
print ("  ,--.__| |.   ; ,. :  /     \\ ,'_ /| :  . ||   |  ,', |  |,/     \\|   |  ,'' ||  |   |    /       \\ |  |   |   ,' ,'| .   ; ,. :|   |  ,''' |") 
print (" /   ,'   |'   | |: : /    / ' |  ' | |  . .|   | /  | |--'/    /  |   | /  | |:__,'| :   .--.  .-. |:__,'| :   '  | | '   | |: :|   | /  | | ")
print (".   '  /  |'   | .; :.    ' /  |  | ' |  | ||   : |  | ,  .    ' / |   | |  | |  '  : |__  \\__\\/: . .  '  : |__ |  | : '   | .; :|   | |  | | ")
print ("'   ; |:  ||   :    |'   ; :__ :  | : ;  ; ||   : |  |/   '   ;   /|   | |  |/   |  | '.'| ,' .--.; |  |  | '.'|'  : |_|   :    ||   | |  |/  ")
print ("|   | '/  ' \\   \\  / '   | '.'|'  :  `--'   \\   | |`-'    '   |  / |   | |--'    ;  :    ;/  /  ,.  |  ;  :    ;|  | '.'\\   \\  / |   | |--' ")  
print ("|   :    :|  `----'  |   :    ::  ,      .-./   ;/        |   :    |   |/        |  ,   /;  :   .'   \\ |  ,   / ;  :    ;`----'  |   |/       ")
print (" \\   \\  /             \\   \\  /  `--`----'   '---'          \\   \\  /'---'          ---`-' |  ,     .-./  ---`-'  |  ,   /         '---'   ")     
print ("  `----'               `----'                               `----'                        `--`---'               ---`-'          ")             
print (" ")                                                                                                                                              
print (" ")
enterToEnter = input("Press [ENTER] key to start")
uCMainConsole = int(3)
if uCMainConsole == 3:
	if uCMainConsole == 3:
		konloop = int(0)
		while konloop == 0:
			print ("The ultimate math encyclopedia")
			print ("Volume 1")
			print ("\nUCalc exclusives")
			print ("Update log [ID: 10000]")
			print ("Version info [ID: 10001]")
			print ("Developer Data Folder ReadMe [ID: 10002]")
			print ("Source info [ID: 10003]")
			print ("Development goals [ID: 10004]")
			print ("Manufacturing guide [ID: 10005]")
			print ("Terms of use [ID: 10006]")
			print ("Credits [ID: 10007]")
			print ("Math puns [ID: 10008]")
			print ("Math in gaming [ID: 10009]")
			print ("Bundle info [ID: 10010]")
			print ("Contact us [ID: 10011]")
			print ("Feedback center [ID: 10012]")
			print ("Comments [ID: 10013]")
			print ("Common math mistakes - fractions edition [ID: 10014]")
			more1 = input("Press [ENTER] key for more")
			print ("\nProcessor setup")
			print ("4 bit-128 bit [ID: 20000]")
			print ("Weak calculators [ID: 20001]")
			print ("System compatibility [ID: 20002]")
			print ("4 bit computing [ID: 20003]")
			print ("8 bit computing [ID: 20004]")
			print ("12 bit computing [ID: 20005]")
			print ("16 bit computing [ID: 20006]")
			print ("18 bit computing [ID: 20007]")
			print ("24 bit computing [ID: 20008]")
			print ("26 bit computing [ID: 20009]")
			print ("31 bit computing  [ID: 20010]")
			print ("32 bit computing  [ID: 20011]")
			print ("36 bit computing  [ID: 20012]")
			print ("48 bit computing  [ID: 20013]")
			print ("60 bit computing  [ID: 20014]")
			print ("64 bit computing  [ID: 20015]")
			print ("128 bit computing  [ID: 20016]")
			print ("256 bit computing  [ID: 20017]")
			print ("512 bit computing  [ID: 20018]")
			print ("Variable names and their purpose for UCalc [ID: 20019]") 
			more1 = input("Press [ENTER] key for more")
			print ("\nGetting started with math [ID: 30000]")
			print ("Counting [ID: 30001]")
			print ("Names of numbers [ID: 30002]")
			print ("Superstitious numbers [ID: 30003]")
			print ("Slang numbers [ID: 30004]")
			print ("Roman numerals [ID: 30005]")
			print ("Multiples table [ID: 30006]")
			print ("IQ Definition [ID: 30007]")
			print ("Bit slicing definiton [ID: 30008]")
			more1 = input("Press [ENTER] key for more")
			print ("\nAlgebra")
			more1 = input("Press [ENTER] key for more")
			print ("\nCalculus")
			more1 = input("Press [ENTER] key for more")
			WikIDSelect = int(input("Enter an ID to start: "))
			if WikIDSelect == 10000:
				print ("Update log")
				print ("For Ucalc")
				more1 = input("Read more? [ENTER]")
				print ("UCalc pre-alpha CLI client 1")
				print ("\nThis is the very first version of the UCalc client")
				print ("It contains many features, but has some odd bugs")
				print ("There was only 1 pre-alpha version of this program, and was a simple private demonstration build to make sure all the added features workede")
				print ("It was moved to the alpha phase when it was deemed stable, and acquired a working update log")
				print ("Pre-alpha 1 added the following features:")
				print ("<*> Added Main Menu")
				print ("<*> Added language setup [ONLY ENGLISH]")
				print ("<*> processor setup")
				print ("<*> ID table for calculation operations")
				print ("<*> Random number generator (unstable, but still works)")
				print ("<*> Calculator room (unstable, but still runs)")
				print ("<*> Added modular division calculator")
				print ("<*> Added addition calculator")
				print ("<*> Added subtraction calculator")
				print ("<*> Added multiplication calculator")
				print ("<*> Added division calculator")
				print ("<*> Added greater than calculator")
				print ("<*> Added count 100,000 digits of Pi (easter egg)")
				print ("<*> Added RGB calculator")
				print ("<*> Added addition calculator")
				print ("<*> Added subtraction calculator")
				print ("<*> Added multiplication calculator")
				print ("<*> Added division calculator")
				print ("<*> Added wiki page (with no entries at the moment")
				print ("That is it for pre-alpha 1!")
				more1 = input("Read more? [ENTER]")
				print ("UCalc Alpha client 1")
				print ("\nUCalc jumped to the Alpha phase because of 2 reasons:")
				print ("<*> The program works in a stable state over 50% of the time")
				print ("<*> The update log was released")
				print ("<*> Added speed-dial calculator (the public calculator)")
				print ("<*> Increased documentation")
				print ("<*> Added more organized ID chart for math operations (it can now fit perfectly on a 1280x720 screen)")
				print ("<*> Fixed 3 critical bugs that prevent certain operations from running, and causing the program to crash")
				print ("<*> Added in new operaitons (Speed-dial only)")
				print ("<*> Added manufacturer list")
				print ("<*> Added boot-screens (modify to unlock)")
				more1 = input("Read more? [ENTER]")
				print ("UCalc Alpha client 2")
				print ("<*> increased documentation")
				print ("<*> added vote counter")
				print ("<*> added memory calculator")
				print ("<*> added game catalog")
				print ("Why didn't it go to beta? Not all the planned features are here yet, and it is still unstable at times")
				print ("Alpha 1 added the following features:")
				print ("<*> a working update log")
				print ("That is it for alpha 2!")
				more1 = input("Read more? [ENTER]")
				print ("UCalc Alpha 3 series:\nUCalc 3.00")
				print ("Created: November 12th 2018")
				print ("Last modified: November 13th 2018")
				print ("Total size:	385 KB (394,731 bytes) or 394 KB (394,731 bytes) ")
				print ("File type: .py (Python file)") 
				print ("Description:\nThis was supposed to be another huge build up until something really bad happened. During the development, our IDE crashed, and everything was lost. We") 
				print ("The development of Alpha 3 was abandoned, with very little change, and the UCalc team moved on to a new Alpha 3 series. To prevent future data loss, every")
				print ("Time the program was saved, we would create a new version. It was slightly memory consuming, but it helped development continue smoothly")
				more1 = input("Read more? [ENTER]")
				print ("UCalc Alpha 3 series:\nUCalc 3.01")
				print ("Alpha 3.01")
				print ("Created: November 13th 2018")
				print ("Last modified: November 13th 2018") 
				print ("Total size: 385 KB (394,904 bytes) OR 394 KB (394,904 bytes)") 
				print ("File type: .py (Python file) ")
				print ("Description:\nThis is the first version of the Alpha 3 series. It introduced minor changes and operates as a restore point in case the next version were to fail")
				more1 = input("Read more? [ENTER]")
				print ("UCalc Alpha 3 series:\nUCalc 3.02")
				print ("Alpha 3.02 ")
				print ("Created: November 13th 2018 ")
				print ("Last modified: November 13th 2018") 
				print ("Total size: 385 KB (395,117 bytes) or 395 KB (395,117 bytes) ")
				print ("File type: .py (Python file)  ")
				print ("Description: ")
				print ("Very brief changes to the design, acts as a restore point for the next version ")
				more1 = input("Read more? [ENTER]")
				print ("UCalc Alpha 3 series:\nUCalc 3.03")
				print ("Alpha 3.03")
				print ("Created: November 13th 2018")
				print ("Last modified: November 13th 2018 ")
				print ("Total size: 386 KB (395,578 bytes) or 395 KB (395,578 bytes)")
				print ("File type: .py (Python file) ")
				print ("Description:")
				print ("Slowly adding back the lost features from an unexpected wipe")
				more1 = input("Read more? [ENTER]")
				print ("UCalc Alpha 3 series:\nUCalc 3.04")
				print ("Alpha 3.04")
				print ("Created: November 13th 2018")
				print ("Last modified: November 13th 2018")
				print ("Total size: 386 KB (395,852 bytes) or 395 KB (395,852 bytes)")
				print ("File type: .py (Python file) ")
				print ("Description:")
				print ("Continuing to add back lost features")
				more1 = input("Read more? [ENTER]")
				print ("UCalc Alpha 3 series:\nUCalc 3.05")
				print ("Alpha 3.05")
				print ("Created: November 13th 2018")
				print ("Last modified: November 13th 2018")
				print ("Total size: 386 KB (395,962 bytes) ")
				print ("File type: .py (Python file) ")
				print ("Description:")
				print ("Added in file manager (not yet fully functional")
				more1 = input("Read more? [ENTER]")
				print ("UCalc Alpha 3 series:\nUCalc 3.06")
				print ("Alpha 3.06")
				print ("Created: November 13th 2018")
				print ("Last modified: November 13th 2018")
				print ("Total size: 387 KB (397,073 bytes) or 397 KB (397,073 bytes)")
				print ("File type: .py (Python file) ")
				print ("Description:")
				print ("Added in a DNA screensaver, and updated the settings menu + updated the file manager")
				more1 = input("Read more? [ENTER]")
				print ("UCalc Alpha 3 series:\nUCalc 3.07")
				print ("Alpha 3.07")
				print ("Created: November 13th 2018 ")
				print ("Last modified: November 13th 2018")
				print ("Total size: 388 KB (398,202 bytes) or 398 KB (398,202 bytes)")
				print ("File type: .py (Python file) ")
				print ("Description:")
				print ("Minor changes to script")
				more1 = input("Read more? [ENTER]")
				print ("UCalc Alpha 3 series:\nUCalc 3.08")
				print ("Alpha 3.08")
				print ("Created: November 13th 2018 ")
				print ("Last modified: November 13th 2018")
				print ("Total size: 390 KB (399,674 bytes) or 399 KB (399,674 bytes)")
				print ("File type: .py (Python file) ")
				print ("Description:")
				print ("Added and started working on the Roman Numeral calculator")
				more1 = input("Read more? [ENTER]")
				print ("UCalc Alpha 3 series:\nUCalc 3.09")
				print ("Alpha 3.09")
				print ("Created: November 13th 2018")
				print ("Last modified: November 13th 2018 ")
				print ("Total size: 390 KB (400,210 bytes) or 400 KB (400,210 bytes)")
				print ("File type: .py (Python file) ")
				print ("Description:")
				print ("Added the grade calculator, and started working on it ")
				more1 = input("Read more? [ENTER]")
				print ("UCalc Alpha 3 series:\nUCalc 3.10")
				print ("Alpha 3.10")
				print ("Created: November 13th 2018")
				print ("Last modified: November 13th 2018")
				print ("Total size: 392 KB (401,862 bytes) or 401 KB (401,862 bytes)")
				print ("File type: .py (Python file) ")
				print ("Description:")
				print ("Updated Roman numeral calculator. It can now convert numbers to roman numerals up to 50. Added the IQ calculator (not yet functional) ")
				more1 = input("Read more? [ENTER]")
				print ("UCalc Alpha 3 series:\nUCalc 3.11")
				print ("Alpha 3.11")
				print ("Created: November 13th 2018")
				print ("Last modified: November 13th 2018")
				print ("Total size: 393 KB (403,016 bytes) or 403 KB (403,016 bytes)")
				print ("File type: .py (Python file) ")
				print ("Description:")
				print ("Updated Roman Numeral calculator. It can now calculate Roman numerals up to 70")
				more1 = input("Read more? [ENTER]")
				print ("UCalc Alpha 3 series:\nUCalc 3.12")
				print ("Alpha 3.12")
				print ("Created: November 13th 2018 ")
				print ("Last modified: November 13th 2018")
				print ("Total size: 395 KB (404,788 bytes) or 404 KB (404,788 bytes)")
				print ("File type: .py (Python file) ")
				print ("Description:")
				print ("Another update to the Roman numeral calculator. It can now calculate Roman numerals up to 100")
				more1 = input("Read more? [ENTER]")
				print ("UCalc Alpha 3 series:\nUCalc 3.13")
				print ("Alpha 3.13")
				print ("Created: November 13th 2018")
				print ("Last modified: November 14th 2018")
				print ("Total size: 395 KB (405,087 bytes) or 405 KB (405,087 bytes)")
				print ("File type: .py (Python file) ")
				print ("Description:")
				print ("Minor changes to script")
				more1 = input("Read more? [ENTER]")
				print ("UCalc Alpha 3 series:\nUCalc 3.14")
				print ("Alpha 3.14")
				print ("Created: November 14th 2018")
				print ("Last modified: November 14th 2018")
				print ("Total size: 396 KB (405,515 bytes) or 405 KB (405,515 bytes)")
				print ("File type: .py (Python file) ")
				print ("Description:")
				print ("Added more documentation")
				more1 = input("Read more? [ENTER]")
				print ("UCalc Alpha 3 series:\nUCalc 3.15")
				print ("Alpha 3.15")
				print ("Created: November 14th 2018")
				print ("Last modified: November 14th 2018")
				print ("Total size: 396 KB (405,521 bytes) or 405 KB (405,521 bytes)")
				print ("File type: .py (Python file) ")
				print ("Description:")
				print ("Minor grammar & syntax fixes")
				more1 = input("Read more? [ENTER]")
				print ("UCalc Alpha 3 series:\nUCalc 3.16")
				print ("Alpha 3.16")
				print ("Created: November 14th 2018")
				print ("Last modified: November 14th 2018")
				print ("Total size: 396 KB (406,361 bytes) or 406 KB (406,361 bytes)")
				print ("File type: .py (Python file) ")
				print ("Description:")
				print ("Added T.O.U (Terms Of Use) + Changes to the grade calculator")
				more1 = input("Read more? [ENTER]")
				print ("UCalc Alpha 3 series:\nUCalc 3.17")
				print ("Alpha 3.17")
				print ("Created: November 14th 2018")
				print ("Last modified: November 14th 2018")
				print ("Total size: 397 KB (406,551 bytes) or 406 KB (406,551 bytes)")
				print ("File type: .py (Python file) ")
				print ("Description:")
				print ("Changes to the grade calculator")
				more1 = input("Read more? [ENTER]")
				print ("UCalc Alpha 3 series:\nUCalc 3.18")
				print ("Alpha 3.18")
				print ("Created: November 14th 2018")
				print ("Last modified: November 14th 2018")
				print ("Total size: 398 KB (408,286 bytes) or 408 KB (408,286 bytes)")
				print ("File type: .py (Python file) ")
				print ("Description:")
				print ("Big update to the grade calculator")
				more1 = input("Read more? [ENTER]")
				print ("UCalc Alpha 3 series:\nUCalc 3.19")
				print ("Alpha 3.19")
				print ("Created: November 14th 2018")
				print ("Last modified: November 14th 2018")
				print ("Total size: 463 KB (474,608 bytes) or 474 KB (474,608 bytes)")
				print ("File type: .py (Python file) ")
				print ("Description:")
				print ("Added in Wikipedia articles for certain topics, currently not python-ified, so the program doesn't work now")
				more1 = input("Read more? [ENTER]")
				print ("UCalc Alpha 3 series:\nUCalc 3.20")
				print ("Alpha 3.20")
				print ("Created: November 14th 2018 ")
				print ("Last modified: November 14th 2018")
				print ("Total size: 463 KB (474,840 bytes) or 474 KB (474,840 bytes) ")
				print ("File type: .py (Python file) ")
				print ("Description:")
				print ("Minor changes to the Roman numeral calculator. Boundaries have been set. The range is 1-255. Anything less or more than that will not work, and will be rejected")
				more1 = input("Read more? [ENTER]")
				print ("UCalc Alpha 3 series:\nUCalc 3.21")
				print ("Alpha 3.21")
				print ("Created: November 14th 2018")
				print ("Last modified: November 14th 2018 ")
				print ("Total size: 467 KB (478,305 bytes) or 479 KB (478,305 bytes)")
				print ("File type: .py (Python file) ")
				print ("Description:")
				print ("Changes to the roman numeral calculator. Can count in the 200-255 range, but lots of numbers are missing. The placeholders for the max value are coming in")
				more1 = input("Read more? [ENTER]")
				print ("UCalc Alpha 3 series:\nUCalc 3.22")
				print ("Alpha 3.22")
				print ("Created: November 14th 2018")
				print ("Last modified: November 14th 2018")
				print ("Total size: 469 KB (481,248 bytes) or 481 KB (481,248 bytes)")
				print ("File type: .py (Python file) ")
				print ("Description:")
				print ("Changes to the roman numeral calculator. All values between 1-255 are accepted except for 151-199. Wiki pages have been commented out temporarily so the program can run")
				more1 = input("Read more? [ENTER]")
				print ("UCalc Alpha 3 series:\nUCalc 3.23")
				print ("Alpha 3.23")
				print ("Created: November 14th 2018")
				print ("Last modified: November 14th 2018 ")
				print ("Total size: 471 KB (483,175 bytes) or 483 KB (483,175 bytes)")
				print ("File type: .py (Python file) ")
				print ("Description:")
				print ("Almost finished the roman numeral calculator. However, it cannot ouput values between 183 and 199. We ran out of time, and we had to make an emergency save")
				more1 = input("Read more? [ENTER]")
				print ("UCalc Alpha 3 series:\nUCalc 3.24")
				print ("Alpha 3.24")
				print ("Created: November 14th 2018 ")
				print ("Last modified: November 14th 2018")
				print ("Total size: 472 KB (484,214 bytes) or 484 KB (484,214 bytes)")
				print ("File type: .py (Python file) ")
				print ("Description:")
				print ("Finished the roman numeral calculator. For now, it is just going to be ran in 8 bit mode. It would take A LOT of work to make it go up to a 16 or 12 bit value")
				more1 = input("Read more? [ENTER]")
				print ("UCalc Alpha 3 series:\nUCalc 3.25")
				print ("Alpha 3.25")
				print ("Created: November 14th 2018 ")
				print ("Last modified: November 14th 2018 ")
				print ("Total size: 473 KB (484,841 bytes) OR 484 KB (484,841 bytes)")
				print ("File type: .py (Python file) ")
				print ("Description:")
				print ("Added grading table to the grade checker ")
				more1 = input("Read more? [ENTER]")
				print ("UCalc Alpha 3 series:\nUCalc 3.26")
				print ("Alpha 3.26")
				print ("Created: November 14th 2018")
				print ("Last modified: November 14th 2018 ")
				print ("Total size: 474 KB (486,173 bytes) or 486 KB (486,173 bytes)")
				print ("File type: .py (Python file) ")
				print ("Description:")
				print ("Began to make the Wiki article about IQ python compatible. That task is currently incomplete, so the program doesn't function")
				more1 = input("Read more? [ENTER]")
				print ("UCalc Alpha 3 series:\nUCalc 3.27")
				print ("Alpha 3.27")
				print ("Created: November 14th 2018")
				print ("Last modified: November 14th 2018")
				print ("Total size: 475 KB (486,958 bytes) or 486 KB (486,958 bytes)")
				print ("File type: .py (Python file) ")
				print ("Description:")
				print ("Still making the document about IQ compatible with python. This is going to take a while")
				more1 = input("Read more? [ENTER]")
				print ("UCalc Alpha 3 series:\nUCalc 3.28")
				print ("Alpha 3.28")
				print ("Created: November 14th 2018 ")
				print ("Last modified: November 14th 2018")
				print ("Total size: 476 KB (487,491 bytes) or 487 KB (487,491 bytes)")
				print ("File type: .py (Python file) ")
				print ("Description:")
				print ("Continuing to work on the IQ document conversion")
				more1 = input("Read more? [ENTER]")
				print ("UCalc Alpha 3 series:\nUCalc 3.29")
				print ("Alpha 3.29")
				print ("Created: November 14th 2018")
				print ("Last modified: November 14th 2018")
				print ("Total size: 476 KB (488,258 bytes) or 488 KB (488,258 bytes)")
				print ("File type: .py (Python file) ")
				print ("Description:")
				print ("Brief update to the Python conversion of the IQ document")
				more1 = input("Read more? [ENTER]")
				print ("UCalc Alpha 3 series:\nUCalc 3.30")
				print ("Alpha 3.30")
				print ("Created: November 14th 2018")
				print ("Last modified: November 14th 2018")
				print ("Total size: 478 KB (490,009 bytes) 490 KB (490,009 bytes) ")
				print ("File type: .py (Python file) ")
				print ("Description:")
				print ("Some more work inputting the IQ document")
				more1 = input("Read more? [ENTER]")
				print ("UCalc Alpha 3 series:\nUCalc 3.31")
				print ("Alpha 3.31")
				print ("Created: November 14th 2018")
				print ("Last modified: November 14th 2018")
				print ("Total size: 481 KB (492,863 bytes) or 492 KB (492,863 bytes)")
				print ("File type: .py (Python file) ")
				print ("Description:")
				print ("Heavy progress into converting the IQ document. It is almost readable now")
				more1 = input("Read more? [ENTER]")
				print ("UCalc Alpha 3 series:\nUCalc 3.32")
				print ("Alpha 3.32")
				print ("Created: November 14th 2018 ")
				print ("Last modified: November 15th 2018 ")
				print ("Total size: 483 KB (494,692 bytes) or 494 KB (494,692 bytes)")
				print ("File type: .py (Python file) ")
				print ("Description:")
				print ("More progress in converting the IQ document")
				more1 = input("Read more? [ENTER]")
				print ("UCalc Alpha 3 series:\nUCalc 3.33")
				print ("Alpha 3.33")
				print ("Created: November 15th 2018")
				print ("Last modified: November 15th 2018 ")
				print ("Total size: 484 KB (496,238 bytes) or 496 KB (496,238 bytes)")
				print ("File type: .py (Python file) ")
				print ("Description:")
				print ("Even more progress in converting the document")
				more1 = input("Read more? [ENTER]")
				print ("UCalc Alpha 3 series:\nUCalc 3.34")
				print ("Alpha 3.34")
				print ("Created: November 15th 2018")
				print ("Last modified: November 15th 2018")
				print ("Total size: 485 KB (497,368 bytes) or 497 KB (497,368 bytes)")
				print ("File type: .py (Python file) ")
				print ("Description:")
				print ("Finished importing the IQ document")
				more1 = input("Read more? [ENTER]")
				print ("UCalc Alpha 3 series:\nUCalc 3.35")
				print ("Alpha 3.35")
				print ("Created: November 15th 2018 ")
				print ("Last modified: November 15th 2018")
				print ("Total size: 487 KB (499,657 bytes) or 499 KB (499,657 bytes)")
				print ("File type: .py (Python file) ")
				print ("Description:")
				print ("Minor script changes")
				more1 = input("Read more? [ENTER]")
				print ("UCalc Alpha 3 series:\nUCalc 3.36")
				print ("Alpha 3.36")
				print ("Created: November 15th 2018")
				print ("Last modified: November 15th 2018")
				print ("Total size: 495 KB (507,053 bytes) or 507 KB (507,053 bytes)")
				print ("File type: .py (Python file) ")
				print ("Description:")
				print ("Added in Wiki documentation on Bit Slicing")
				more1 = input("Read more? [ENTER]")
				print ("UCalc Alpha 3 series:\nUCaLc 3.37")
				print ("Alpha 3.37")
				print ("Created: November 15th 2018 ")
				print ("Last modified: November 15th 2018")
				print ("Total size: 501 KB (513,812 bytes) or 513 KB (513,812 bytes)")
				print ("File type: .py (Python file) ")
				print ("Description:")
				print ("Added in Wiki documentation on 4 bit computing")
				more1 = input("Read more? [ENTER]")
				print ("UCalc Alpha 3 series:\nUCalc 3.38")
				print ("Alpha 3.38")
				print ("Created: November 15th 2018")
				print ("Last modified: November 15th 2018")
				print ("Total size: 502 KB (514,481 bytes) or 514 KB (514,481 bytes)")
				print ("File type: .py (Python file) ")
				print ("Description:")
				print ("Minor script changes")
				more1 = input("Read more? [ENTER]")
				print ("UCalc Alpha 3 series:\nUCalc 3.39")
				print ("Alpha 3.39")
				print ("Created: November 15th 2018")
				print ("Last modified: November 15th 2018")
				print ("Total size: 504 KB (516,642 bytes) or 516 KB (516,642 bytes)")
				print ("File type: .py (Python file) ")
				print ("Description:")
				print ("Minor script changes")
				more1 = input("Read more? [ENTER]")
				print ("UCalc Alpha 3 series:\nUCalc 3.40")
				print ("Alpha 3.40")
				print ("Created: November 15th 2018")
				print ("Last modified: November 15th 2018 ")
				print ("Total size: 590 KB (604,322 bytes) or 604 KB (604,322 bytes)")
				print ("File type: .py (Python file) ")
				print ("Description:")
				print ("Added documentation for 8 bit, 12 bit, 16 bit, 18 bit, 21 bit, 24 bit, 26 bit, 31 bit, 32 bit, 48 bit, 60 bit, 64 bit, 128 bit, 256 bit, and 512 bit computing, documents have to be converted to python format. For now, the build is not functional")
				more1 = input("Read more? [ENTER]")
				print ("UCalc Alpha 3 series:\nUCalc 3.41")
				print ("Alpha 3.41")
				print ("Created: November 15th 2018")
				print ("Last modified: November 15th 2018 ")
				print ("Total size: 590 KB (604,603 bytes) or 604 KB (604,603 bytes)")
				print ("File type: .py (Python file) ")
				print ("Description:")
				print ("Minor changes, as we had to make an emergency save")
				more1 = input("Read more? [ENTER]")
				print ("UCalc Alpha 3 series:\nUCalc 3.42")
				print ("Alpha 3.42")
				print ("Created: November 15th 2018 ")
				print ("Last modified: November 15th 2018")
				print ("Total size: 590 KB (604,726 bytes) or 604 KB (604,726 bytes)")
				print ("File type: .py (Python file) ")
				print ("Description:")
				print ("More minor changes, as there was another emergency save")
				more1 = input("Read more? [ENTER]")
				print ("UCalc Alpha 3 series:\nUCalc 3.43")
				print ("Alpha 3.43")
				print ("Created: November 15th 2018")
				print ("Last modified: November 15th 2018")
				print ("Total size: 590 KB (605,137 bytes) or 605 KB (605,137 bytes)")
				print ("File type: .py (Python file) ")
				print ("Description:")
				print ("More updates to converting the newer documents into python format")
				more1 = input("Read more? [ENTER]")
				print ("UCalc Alpha 3 series:\nUCalc 3.44")
				print ("Alpha 3.44")
				print ("Created: November 15th 2018")
				print ("Last modified: November 15th 2018")
				print ("Total size: 591 KB (606,044 bytes) or 606 KB (606,044 bytes)")
				print ("File type: .py (Python file) ")
				print ("Description:")
				print ("More work into converting the newer documents into python format")
				more1 = input("Read more? [ENTER]")
				print ("UCalc Alpha 3 series:\nUCalc 3.45")
				print ("Alpha 3.45")
				print ("Created: November 15th 2018 ")
				print ("Last modified: ")
				print ("Total size: 593 KB (607,486 bytes) or 607 KB (607,486 bytes)")
				print ("File type: .py (Python file) ")
				print ("Description:")
				print ("Even more work on converting the newer documents into python format")
				more1 = input("Read more? [ENTER]")
				print ("UCalc Alpha 3 series:\nUCalc 3.46")
				print ("Alpha 3.46")
				print ("Created: November 15th 2018")
				print ("Last modified: November 15th 2018 ")
				print ("Total size: 594 KB (608,384 bytes) or 608 KB (608,384 bytes) ")
				print ("File type: .py (Python file) ")
				print ("Description:")
				print ("More work on converting the newer documents into python format")
				more1 = input("Read more? [ENTER]")
				print ("UCalc Alpha 3 series:\nUCalc 3.47")
				print ("Alpha 3.47")
				print ("Created: November 15th 2018")
				print ("Last modified: November 15th 2018 ")
				print ("Total size: 594 KB (608,800 bytes) or 608 KB (608,800 bytes)")
				print ("File type: .py (Python file) ")
				print ("Description:")
				print ("Small amount of work put into the project before this save, getting tired of working on this today")
				more1 = input("Read more? [ENTER]")
				print ("UCalc Alpha 3 series:\nUCalc 3.48")
				print ("Alpha 3.48")
				print ("Created: November 15th 2018")
				print ("Last modified: November 15th 2018")
				print ("Total size: 596 KB (611,062 bytes) or 611 KB (611,062 bytes)")
				print ("File type: .py (Python file) ")
				print ("Description:")
				print ("Minor amount of work put into converting the newer documents into python format for this build, as I wanted to take a break from the project for the day")
				more1 = input("Read more? [ENTER]")
				print ("UCalc Alpha 3 series:\nUCalc 3.49")
				print ("Alpha 3.49")
				print ("Created: November 15th 2018")
				print ("Last modified: November 16th 2018")
				print ("Total size: 598 KB (613,224 bytes) or 613 KB (613,224 bytes) ")
				print ("File type: .py (Python file) ")
				print ("Description:")
				print ("Another day, another 1000 lines of code, minor changes have been made to the converting process of the Wiki computing documents")
				more1 = input("Read more? [ENTER]")
				print ("UCalc Alpha 3 series:\nUCalc 3.50")
				print ("Alpha 3.50")
				print ("Created: November 16th 2018")
				print ("Last modified: November 16th 2018")
				print ("Total size: 600 KB (615,177 bytes) or 615 KB (615,177 bytes) ")
				print ("File type: .py (Python file) ")
				print ("Description:")
				print ("More work put into the plain text to python document conversion, it is getting close to completion now")
				more1 = input("Read more? [ENTER]")
				print ("UCalc Alpha 3 series:\nUCalc 3.51")
				print ("Alpha 3.51")
				print ("Created: November 16th 2018")
				print ("Last modified: November 16th 2018")
				print ("Total size: 604 KB (618,802 bytes) or 618 KB (618,802 bytes)")
				print ("File type: .py (Python file) ")
				print ("Description:")
				print ("Almost finished converting the documents to python, some changes need to be made now")
				more1 = input("Read more? [ENTER]")
				print ("UCalc Alpha 3 series:\nUCalc 3.52")
				print ("Alpha 3.52")
				print ("Created: November 16th 2018")
				print ("Last modified: November 16th 2018 ")
				print ("Total size: 605 KB (619,528 bytes) or 619 KB (619,528 bytes) ")
				print ("File type: .py (Python file) ")
				print ("Description:")
				print ("More documentation conversion work")
				more1 = input("Read more? [ENTER]")
				print ("UCalc Alpha 3 series:\nUCalc 3.53")
				print ("Alpha 3.53")
				print ("Created: November 16th 2018 ")
				print ("Last modified: November 16th 2018 ")
				print ("Total size: 609 KB (624,077 bytes) or 624 KB (624,077 bytes)")
				print ("File type: .py (Python file) ")
				print ("Description:")
				print ("New calculator modes being added: ANSI translator, credit/debit card maker, and Windows product key generator. The ANSI calculator is the first mode to include a class. It isn't very useful however, it is just a test of using classes in Python. The other 2 features will start development soon")
				more1 = input("Read more? [ENTER]")
				print ("UCalc Alpha 3 series:\nUCalc 3.54")
				print ("Alpha 3.54")
				print ("Created: November 16th 2018")
				print ("Last modified: November 16th 2018")
				print ("Total size: 616 KB (630,844 bytes) or 630 KB (630,844 bytes)")
				print ("File type: .py (Python file) ")
				print ("Description:")
				print ("Working on documentation conversion again")
				more1 = input("Read more? [ENTER]")
				print ("UCalc Alpha 3 series:\nUCalc 3.55")
				print ("Alpha 3.55")
				print ("Created: November 16th 2018")
				print ("Last modified: November 16th 2018 ")
				print ("Total size: 618 KB (633,089 bytes) or 633 KB (633,089 bytes) ")
				print ("File type: .py (Python file) ")
				print ("Description:")
				print ("Starting to add finishing touchings on computing articles")
				more1 = input("Read more? [ENTER]")
				print ("UCalc Alpha 3 series:\nUCalc 3.56")
				print ("Alpha 3.56")
				print ("Created: November 16th 2018 ")
				print ("Last modified: November 17th 2018")
				print ("Total size: 625 KB (640,391 bytes) or 640 KB (640,391 bytes) ")
				print ("File type: .py (Python file) ")
				print ("Description:")
				print ("Continuing to make the program bootable again")
				more1 = input("Read more? [ENTER]")
				print ("UCalc Alpha 3 series:\nUCalc 3.57")
				print ("Alpha 3.57")
				print ("Created: November 17th 2018")
				print ("Last modified: November 17th 2018")
				print ("Total size: 630 KB (645,346 bytes) or 645 KB (645,346 bytes)")
				print ("File type: .py (Python file) ")
				print ("Description:")
				print ("Adding the finishing touchings on the articles part 1 of 2")
				more1 = input("Read more? [ENTER]")
				print ("UCalc Alpha 3 series:\nUCalc 3.58")
				print ("Alpha 3.58")
				print ("Created: November 17th 2018")
				print ("Last modified: November 17th 2018 ")
				print ("Total size: 630 KB (645,894 bytes) or 645 KB (645,894 bytes)")
				print ("File type: .py (Python file) ")
				print ("Description:")
				print ("Adding the finishing touchings on the articles part 2 of 2")
				more1 = input("Read more? [ENTER]")
				print ("UCalc Alpha 3 series:\nUCalc 3.59")
				print ("Alpha 3.59")
				print ("Created: November 17th 2018")
				print ("Last modified: November 17th 2018 ")
				print ("Total size: 642 KB (658,141 bytes) or 658 KB (658,141 bytes)")
				print ("File type: .py (Python file) ")
				print ("Description:")
				print ("After finishing up development on some features that required bug fixing, all the bug fixes finally occurred. This build is the first one in many to be able to ")
				print ("To actually function. Versions will continue to be made, and if they stop functioning again, another repair build will occur")
				more1 = input("Read more? [ENTER]")
				print ("UCalc Alpha 3 series:\nUCalc 3.60")
				print ("Alpha 3.60")
				print ("Created: November 17th 2018")
				print ("Last modified: November 17th 2018 ")
				print ("Total size: 642 KB (658,207 bytes) or 658 KB (658,207 bytes)")
				print ("File type: .py (Python file) ")
				print ("Description:")
				print ("This was a brief update after the big repair update. All it did was add comments to the internal code for the Windows/Microsoft product key generator")
				print ("We put in the list of all the product keys, and the link to where we got them")
				print ("Nothing else was done in this build")
				more1 = input("Read more? [ENTER]")
				print ("UCalc Alpha 3 series:\nUCalc 3.61")
				print ("Alpha 3.61")
				print ("Created: November 17th 2018 ")
				print ("Last modified: November 17th 2018 ")
				print ("Total size: 650 KB (665,745 bytes) or 665 KB (665,745 bytes)")
				print ("File type: .py (Python file) ")
				print ("Description:")
				print ("Another small brief update with a few changes, such as updating the version number at startup, adding ASCII art design around the main menu settings, and adding")
				print ("An update manager")
				print ("Update manager is not yet fully functional due to the programs current level")
				more1 = input("Read more? [ENTER]")
				print ("UCalc Alpha 3 series:\nUCalc 3.62")
				print ("Alpha 3.62")
				print ("Created: November 17th 2018 ")
				print ("Last modified: November 18th 2018 ")
				print ("Total size: 693 KB (710,468 bytes) or 710 KB (710,468 bytes)")
				print ("File type: .py (Python file) ")
				print ("Description:")
				print ("This is a new update that improves the distance calculator. Not much was added other than that, but the distance calculator can now do more different types of distant calculations")
				more1 = input("Read more? [ENTER]")
				print ("UCalc Alpha 3 series:\nUCalc 3.63")
				print ("Alpha 3.63")
				print ("Created: November 18th 2018")
				print ("Last modified: November 18th 2018")
				print ("Total size: 739 KB (757,184 bytes) or 757 KB (757,184 bytes)")
				print ("File type: .py (Python file) ")
				print ("Description:")
				print ("This was another update for the distance calculator, that lets it do more distant calculations. This build was cut short so that we could test floating integers and decimals to improve the accuracy of the output")
				more1 = input("Read more? [ENTER]")
				print ("UCalc Alpha 3 series:\nUCalc 3.64")
				print ("Alpha 3.64")
				print ("Created: November 18th 2018")
				print ("Last modified: November 18th 2018")
				print ("Total size: 742 KB (759,846 bytes) or 759 KB (759,846 bytes)")
				print ("File type: .py (Python file) ")
				print ("Description:")
				print ("This was a big update for the distance calculator. We changed all the int values to float values. Now you can see every digit, and decimals are now accepted, despite it saying ''NO DECIMALS'' that will be fixed in a later build")
				print ("Fun fact: when converting all integers to floating decimals, we used the find and replace tool. We went and found all 'int' listed and replaced it with 'float' we ran into a funny unexpected issue that we didn't take into account, that it would also alter the print function. It switched 'print' to 'prfloat' luckily, we were easily able to reverse this, and the build is still functional")
				more1 = input("Read more? [ENTER]")
				print ("UCalc Alpha 3 series:\nUCalc 3.65")
				print ("Alpha 3.65")
				print ("Created: November 18th 2018")
				print ("Last modified: November 19th 2018")
				print ("Total size: 764 KB (783,283 bytes) or 783 KB (783,283 bytes) ")
				print ("File type: .py (Python file) ")
				print ("Description:")
				print ("This is another update to finish up the distance calculator. In this build however, another huge goal was met, getting more lines than the first version of Linux")
				print ("The first version of Linux had 10,239 lines of code. Version 3.65 has 10,289 lines")
				print ("Our next goal is to reach 20000 lines of code")
				more1 = input("Read more? [ENTER]")
				print ("UCalc Alpha 3 series:\nUCalc 3.66")
				print ("Alpha 3.66")
				print ("Created: November 19th 2018")
				print ("Last modified: November 19th 2018")
				print ("Total size: 778 KB (797,477 bytes) or 797 KB (797,477 bytes) ")
				print ("File type: .py (Python file) ")
				print ("Description:")
				print ("More compatibility added for distance calculator")
				more1 = input("Read more? [ENTER]")
				print ("UCalc Alpha 3 series:\nUCalc 3.67")
				print ("Alpha 3.67")
				print ("Created: November 19th 2018")
				print ("Last modified: November 19th 2018")
				print ("Total size: 787 KB (806,653 bytes) or 806 KB (806,653 bytes)")
				print ("File type: .py (Python file) ")
				print ("Description:")
				print ("Minor update to the distance calculator, added measurement for miles")
				more1 = input("Read more? [ENTER]")
				print ("UCalc Alpha 3 series:\nUCalc 3.68")
				print ("Alpha 3.68")
				print ("Created: November 19th 2018")
				print ("Last modified: November 19th 2018 ")
				print ("Total size: 796 KB (816,015 bytes) or 816 KB (816,015 bytes) ")
				print ("File type: .py (Python file) ")
				print ("Description: ")
				print ("Minor update that adds many placeholders for the alpha 3 series of development.")
				more1 = input("Read more? [ENTER]")
				print ("UCalc Alpha 3 series:\nUCalc 3.69")
				print ("Alpha 3.69")
				print ("Created: November 19th 2018")
				print ("Last modified: November 19th 2018")
				print ("Total size: 808 KB (828,146 bytes) or 828 KB (828,146 bytes)")
				print ("File type: .py (Python file) ")
				print ("Description: ")
				print ("This was an experimental build to add multiple languages into UCalc. English is still fully supported, but now there is an opening for more languages. No new languages were added. There is now a new boot screen, ASCII art of the earth, which stands for 'International Language support'")
				more1 = input("Read more? [ENTER]")
				print ("UCalc Alpha 3 series:\nUCalc 3.70")
				print ("Alpha 3.70")
				print ("Created: November 19th 2018")
				print ("Last modified: November 19th 2018")
				print ("Total size: 812 KB (832,414 bytes) or 832 KB (832,414 bytes)")
				print ("File type: .py (Python file) ")
				print ("Description: ")
				print ("Began to add support for new languages. The text ''CALC'' was added to the language boot screen, along with partial support for Russian")
				more1 = input("Read more? [ENTER]")
				print ("UCalc Alpha 3 series:\nUCalc 3.71")
				print ("Alpha 3.71")
				print ("Created: November 19th 2018")
				print ("Last modified: November 19th 2018")
				print ("Total size: 813 KB (832,530 bytes) or 832 KB (832,530 bytes)")
				print ("File type: .py (Python file) ")
				print ("Description: ")
				print ("Began to add support for 6 new languages: German, Russian, Swedish, French, Chinese, and Japanese, ")
				more1 = input("Read more? [ENTER]")
				print ("UCalc Alpha 3 series:\nUCalc 3.72")
				print ("Alpha 3.72")
				print ("Created: November 19th 2018")
				print ("Last modified: November 19th 2018")
				print ("Total size: 838 KB (858,548 bytes) or 858 KB (858,548 bytes)")
				print ("File type: .py (Python file) ")
				print ("Description: ")
				print ("1 line added")
				more1 = input("Read more? [ENTER]")
				print ("UCalc Alpha 3 series:\nUCalc 3.73")
				print ("Alpha 3.73")
				print ("Created: November 19th 2018")
				print ("Last modified: November 19th 2018")
				print ("Total size: 847 KB (868,227 bytes) or 868 KB (868,227 bytes)")
				print ("File type: .py (Python file) ")
				print ("Description: ")
				print ("Changes to the distance calculator")
				more1 = input("Read more? [ENTER]")
				print ("UCalc Alpha 3 series:\nUCalc 3.74")
				print ("Alpha 3.74")
				print ("Created: November 19th 2018")
				print ("Last modified: November 19th 2018")
				print ("Total size: 860 KB (880,772 bytes) or 880 KB (880,772 bytes)")
				print ("File type: .py (Python file) ")
				print ("Description: ")
				print ("More changes to the distance calculator")
				more1 = input("Read more? [ENTER]")
				print ("UCalc Alpha 3 series:\nUCalc 3.75")
				print ("Alpha 3.75")
				print ("Created: November 19th 2018")
				print ("Last modified: November 20th 2018")
				print ("Total size: 871 KB (892,762 bytes) or 892 KB (892,762 bytes)")
				print ("File type: .py (Python file) ")
				print ("Description: ")
				print ("Changes to the distance calculator, adding the last 5 measurement units")
				more1 = input("Read more? [ENTER]")
				print ("UCalc Alpha 3 series:\nUCalc 3.76")
				print ("Alpha 3.76")
				print ("Created: November 20th 2018")
				print ("Last modified: November 20th 2018")
				print ("Total size: ")
				print ("File type: .py (Python file) ")
				print ("Description: ")
				print ("No description available")
				more1 = input("Read more? [ENTER]")
				print ("UCalc Alpha 3 series:\nUCalc 3.77")
				print ("Alpha 3.77")
				print ("Created: November 20th 2018")
				print ("Last modified: November 20th 2018 ")
				print ("Total size: 885 KB (906,807 bytes) or 906 KB (906,807 bytes) ")
				print ("Description: ")
				print ("Added support for parsecs in the distance calculator. Only 3 more measurement units need to be added before we can move on to the next unfinished planned feature")
				more1 = input("Read more? [ENTER]")
				print ("UCalc Alpha 3 series:\nUCalc 3.78")
				print ("Alpha 3.78")
				print ("Created: November 20th 2018")
				print ("Last modified: November 20th 2018 ")
				print ("Total size: 917 KB (939,239 bytes) or 939 KB (939,239 bytes) ")
				print ("File type: .py (Python file) ")
				print ("Description: ")
				print ("Added support for picometers in the distance calculator. Only 2 more measurement units need to be added before we can move on to the next unfinished planned feature")
				more1 = input("Read more? [ENTER]")
				print ("UCalc Alpha 3 series:\nUCalc 3.79")
				print ("Alpha 3.79")
				print ("Created: November 20th 2018")
				print ("Last modified: November 20th 2018")
				print ("Total size: 931 KB (954,004 bytes) or 954 KB (954,004 bytes) ")
				print ("File type: .py (Python file) ")
				print ("Description: ")
				print ("This update finally wrapped up the distance calculator. This was a massive accomplishment, and Sean took a break from the calculator for the rest of the day as a cooldown period from this success")
				print ("We didn't expect there to be so much to it, but now it is complete. Minor changes will be made to it in the future however. ")
				more1 = input("Read more? [ENTER]")
				print ("UCalc Alpha 3 series:\nUCalc 3.80")
				print ("Alpha 3.80")
				print ("Created: November 20th 2018 ")
				print ("Last modified: November 21st 2018 ")
				print ("Total size: 937 KB (960,013 bytes) or 960 KB (960,013 bytes)")
				print ("File type: .py (Python file) ")
				print ("Description: ")
				print ("This version was the introductory build of the weight calculator. It is being redone, and will be at the advancement level of the distance calculator. This update adds in the basic sorting options, calculator variables, and some of the script for the calculation")
				print ("Nothing else was done in this build")
				more1 = input("Read more? [ENTER]")
				print ("UCalc Alpha 3 series:\nUCalc 3.81")
				print ("Alpha 3.81")
				print ("Created: November 21st 2018 ")
				print ("Last modified: November 21st 2018")
				print ("Total size: 939 KB (962,275 bytes) or 962 KB (962,275 bytes)")
				print ("File type: .py (Python file) ")
				print ("Description: ")
				print ("Minor update to the weight/mass calculator")
				more1 = input("Read more? [ENTER]")
				print ("UCalc Alpha 3 series:\nUCalc 3.82")
				print ("Alpha 3.82")
				print ("Created: November 21st 2018")
				print ("Last modified: November 21st 2018 ")
				print ("Total size: 940 KB (963,545 bytes) or 963 KB (963,545 bytes)")
				print ("File type: .py (Python file) ")
				print ("Description: ")
				print ("Another minor update to the weight/mass calculator, not functional")
				more1 = input("Read more? [ENTER]")
				print ("UCalc Alpha 3 series:\nUCalc 3.83")
				print ("Alpha 3.83")
				print ("Created: November 21st 2018")
				print ("Last modified: November 21st 2018 ")
				print ("Total size: 955 KB (978,181 bytes) or 978 KB (978,181 bytes) ")
				print ("File type: .py (Python file) ")
				print ("Description: ")
				print ("The update that finally makes the Atomic Mass Unit calculation option in the mass/weight calculator functional. Now that we have the basis on the structure of this mode, we can continue to make updates to add the rest of the unit types")
				more1 = input("Read more? [ENTER]")
				print ("UCalc Alpha 3 series:\nUCalc 3.84")
				print ("Alpha 3.84")
				print ("Created: November 21st 2018 ")
				print ("Last modified: November 21st 2018")
				print ("Total size: 973 KB (996,885 bytes) or 996 KB (996,885 bytes)")
				print ("File type: .py (Python file) ")
				print ("Description: ")
				print ("Added Carat calculations to the weight/mass calculator")
				more1 = input("Read more? [ENTER]")
				print ("UCalc Alpha 3 series:\nUCalc 3.85")
				print ("Alpha 3.85")
				print ("Created: November 21st 2018  ")
				print ("Last modified: November 21st 2018 ")
				print ("Total size: 985 KB (1,009,017 bytes) or 1009 KB (1.09 Megabytes) (1,009,017 bytes)")
				print ("Description: ")
				print ("Added new calculations to the weight/mass calculator. The calculator is now a full megabyte in size in base 10 binary, but not in base 2 binary ")
				more1 = input("Read more? [ENTER]")
				print ("UCalc Alpha 3 series:\nUCalc 3.86")
				print ("Alpha 3.86")
				print ("Created: November 21st 2018 ")
				print ("Last modified: November 21st 2018")
				print ("Total size: 0.97 MB (1,024,412 bytes) or 1024 Kilobytes (1,024,412 bytes) (1.02 Megabytes)")
				print ("File type: .py (Python file) ")
				print ("Description: ")
				print ("Another update to the weight/mass calculator, stabilized the script in some abandoned areas")
				more1 = input("Read more? [ENTER]")
				print ("UCalc Alpha 3 series:\nUCalc 3.87")
				print ("Alpha 3.87")
				print ("Created: November 21st 2018 ")
				print ("Last modified: November 21st 2018 ")
				print ("Total size: 0.98 MB (1,033,714 bytes) or 1033 KB (1,033,714 bytes) (1.03 Megabytes) ")
				print ("File type: .py (Python file) ")
				print ("Description: ")
				print ("Added new documentation for bundling, puns, and math in gaming ")
				more1 = input("Read more? [ENTER]")
				print ("UCalc Alpha 3 series:\nUCalc 3.88")
				print ("Alpha 3.88")
				print ("Created: November 21st 2018 ")
				print ("Last modified: November 22nd 2018 ")
				print ("Total size: 1.00 MB (1,048,954 bytes) or 1048 KB (1,048,954 bytes) (1.04 Megabytes)")
				print ("File type: .py (Python file) ")
				print ("Description: ")
				print ("Added dekagrams to the mass/weight calculator. The program is now over 1 megabyte in size, both in base 2, and base 10 binary ")
				print (" ")
				more1 = input("Read more? [ENTER]")
				print ("UCalc Alpha 3 series:\nUCalc 3.89")
				print ("Alpha 3.89")
				print ("Created: November 22nd 2018 ")
				print ("Last modified: ")
				print ("Total size: ")
				print ("File type: .py (Python file) ")
				print ("Description: ")
				print ("Increased documentation. Added documentation for ALL past versions, that took a LONG time, and it was worth it")
				more1 = input("Read more? [ENTER]")
				print ("UCalc Alpha 3 series:\nUCalc 3.90")
				more1 = input("Read more? [ENTER]")
				print ("UCalc Alpha 3 series:\nUCalc 3.91")
				more1 = input("Read more? [ENTER]")
				print ("UCalc Alpha 3 series:\nUCalc 3.92")
				more1 = input("Read more? [ENTER]")
				print ("UCalc Alpha 3 series:\nUCalc 3.93")
				more1 = input("Read more? [ENTER]")
				print ("UCalc Alpha 3 series:\nUCalc 3.94")
				more1 = input("Read more? [ENTER]")
				print ("UCalc Alpha 3 series:\nUCalc 3.95")
				more1 = input("Read more? [ENTER]")
				print ("UCalc Alpha 3 series:\nUCalc 3.96")
				more1 = input("Read more? [ENTER]")
				print ("UCalc Alpha 3 series:\nUCalc 3.97")
				more1 = input("Read more? [ENTER]")
				print ("UCalc Alpha 3 series:\nUCalc 3.98")
				more1 = input("Read more? [ENTER]")
				print ("UCalc Alpha 3 series:\nUCalc 3.99")
				more1 = input("Read more? [ENTER]")
				print ("Overview of UCalc Alpha 3 series")
				print ("The UCalc Alpha 3 series was caused by an accidental overwrite that lead to frequent backups")
				print ("Changes:")
				print ("Completed distance calculator")
				print ("Updated documentation")
				print ("The GUI was updated for many menus")
				print ("A Microsoft Product key generator was added")
				print ("A vote counter was added")
				print ("Settings were added")
				print ("New increased language support")
				more1 = input("Read more? [ENTER]")
				noMore = input("End of update log. Press [ENTER to exit]")
				print ("Exiting update log")
				print ("Please wait...")
			if WikIDSelect == 10001:
				print ("UCalc Pro")
				print ("Demonstration build")
				print ("Alpha 1")
				print ("Version 0.01")
				print ("Copyleft Sean Walla Walla")
				print ("Written in Python 3")
				noMore = input("Press [ENTER] key to exit version info")
				print ("Exiting version info")
				print ("Please wait...")
			if WikIDSelect == 10002:
				print ("READ_ME.TXT | Calculator Notepad |")
				print ("''''''''''''''''''''''''''''''''''")
				print ("DevData subdirectory |")
				print ("=====================/")
				print (" ")
				print ("=========================================================================\\")
				print ("                                                                         |")
				print ("As a joke referrring to the old 8:3 file system, and the calculators     |")
				print ("we are succeeding in this project, during the pre-alpha phase, we        |")
				print ("made several .DAT files. These aren't used by anything, they are just    |")
				print ("notes. Try looking inside them with notepad, notepad++ or other text     |")
				print ("editors. Don't worry, simple modifications or overwrites to the contents |")
				print ("of the files will have NO effect on UCALC they are simply just notes     |")
				print ("                                                                 - Sean  |")
				print ("=========================================================================/")
				print (" ")
				print ("========================================\\")
				print ("N I C E _ A S C I I _ A R T _ S E A N   |")
				print ("A E T H E T I C _ B O T T O M _ T E X T |")
				print ("========================================/")
				print (" ")
				print ("===================================================================================\\")
				print ("Copyleft (>) Sean Walla Walla 2015-2018                                            |")
				print ("Modifications are allowed to the program as long as credit is given                |")
				print ("===================================================================================/")
				print (" ")
				noMore = input("Press [ENTER] key to close this file")
				print ("Closing document")
				print ("Please wait...")
			if WikIDSelect == 10003:
				print ("Source info")
				print ("Language: Python 3x (3.0, 3.1, 3.2, 3.3, 3.4, 3.5, 3.6, 3.7, 3.8)")
				print ("Tools used: \nPython 3.6.exe\nNotepad++\nNotepad.exe")
				print ("Lines of code: 3470")
				print ("Bytes: 394393")
				noMore = input("Press [ENTER] key to exit source info")
				print ("Closing")
				print ("Please wait")
			if WikIDSelect == 10004:
				print ("Development goals")
				print ("Here are our current development goals")
				print ("<*> Go over 10,239 lines of code (amount in the first version of Linux)")
				print ("<*> Reduce overall bug count to less than 50")
				print ("<*> Surpass the TI-30XS calculator in every way")
				print ("<*> Finish implementing all features")
				print ("Those are our current development goals!")
				noMore = input("Press [ENTER] key to exit source info")
				print ("Closing")
				print ("Please wait")
			if WikIDSelect == 10005:
				print ("Manufacturing guide")
				print ("===================")
				print ("Requirements:")
				print ("1280x720 or higher screen (FPS doesn't matter, as long as it is at least 24 FPS)")
				print ("64 bit processor")
				print ("256 Megabytes of RAM")
				print ("1024 Megabytes of disk space")
				print ("8 bit color or more")
				print ("No internet connection required PLEASE keep it this way")
				print ("Battery: at least 1500 mAh capacity (2600 mAh or higher recommended)")
				print ("Keypad:")
				print ("| 1 2 3 4 5 6 7 8 9 0 a b c d e f g h i j k l m n o p q r s t u v w x y z")
				print ("====================================================================================================")
			if WikIDSelect == 10006:
				print ("Terms of usage")
				print ("Please read and accept these conditions to use UCalc")
				more1 = input("Press [ENTER] for more")
				print ("Distribution")
				print ("You are allowed to download, modify, and share this software if you give credit. You can give it publically, to a friend, co-worker, neighbor, or anyone as long as you follow the TOU")
				print ("You cannot charge royalties for this product. It is free open-source software, and must remain free")
				print ("We do not want inappropriate builds. If you are to do that, distribute them privately. No racism, sexism, supremacy, or other bad stuff")
				more1 = input("Press [ENTER] for more")
				print ("Manufacturing")
				print ("You are allowed to manufacture your own versions of the hardware as long as you give credit and reach minimum system requirement")
				more1 = input("Press [ENTER] for more")
				print ("Credit")
				print ("Credit must be given to the original creators, even if you were to just make a minor edit. Plagiarism is NOT allowed")
				nomore = input("Press [ENTER] to agree and exit")
			if WikIDSelect == 10007:
				print ("C R E D I T S")
				print (" ")
				print (" ")
				more1 = input("Press [ENTER] key to start")
				print ("\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n")
				print ("\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n")
				print ("\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n")
				print ("\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n")
				print ("\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n")
				print ("Programmers")
				print ("\nSean P. Myrick")
				more1 = input("Press [ENTER] key for more")
				print ("\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n")
				print ("\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n")
				print ("\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n")
				print ("\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n")
				print ("\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n")
				print ("Beta testers")
				print ("\nSean P. Myrick")
				print ("Michael Whitney")
				print ("Colleen P. Myrick")
				more1 = input("Press [ENTER] key for more")
				print ("\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n")
				print ("\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n")
				print ("\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n")
				print ("\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n")
				print ("\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n")
				print ("Inspirations")
				print ("\nWindows 3.1 - Microsoft")
				print ("Windows 1.01 - Microsoft")
				print ("Wikipedia - Wikimedia foundation")
				print ("NASA - National American Space Agency")
				more1 = input("Press [ENTER] key for more")
				print ("\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n")
				print ("\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n")
				print ("\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n")
				print ("\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n")
				print ("\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n")
				print ("Sound producers")
				print ("\nSean Myrick")
				more1 = input("Press [ENTER] key for more")
				print ("\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n")
				print ("\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n")
				print ("\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n")
				print ("\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n")
				print ("\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n")
				print ("Special thanks to")
				print ("\nMichael Whitney - for showing interest")
				print ("Carrie Delfino - for teaching me how to program in python")
				print ("Colleen and Vern Myrick - for supporting me through my life")
				noMore = input("Press [ENTER] key to quit")
			if WikIDSelect == 10008:
				print ("Math puns! ")
				print ("\n\n")
				spoilerblock = input("What do you call a snake that is 3.14 meters long?")
				print ("\n\nA python!")
				more1 = input("Press [ENTER] key for more")
				spoilerblock = input("Why is 9 afraid of 7?")
				print ("\n\nBecause 7 8 9")
				more1 = input("Press [ENTER] key for more")
				print ("Sorry we are fresh out of math puns for this version :/")
				noMore = input("Press [ENTER] key to exit")
			if WikIDSelect == 10009:
				print ("Math in gaming")
				print ("\n\n")
				tf2qu1 = input("Press [ENTER] key to read about the math of Team Fortress 2")
				print ("\nHeavy - Team Fortress 2")
				print ("I am Heavy Weapons Guy...and this is my weapon.") 
				print ("She weighs one hundred fifty kilograms and fires")
				print ("two hundred dollar, custom-tooled cartridges at ten")
				print ("thousand rounds per minute. It costs four hundred ")
				print ("thousand dollars to fire this weapon...for twelve seconds")
				print ("\t\t\t\t\tFrom 'Meet the heavy' by Valve")
				print ("OK, let's analyze this. ") # sean was too busy with other things to analyze this on 11/21/2018
			if WikIDSelect == 10011:
				print ("Contact Center")
				print ("\nWeb contacts\nWARNING! These links may not be functional in the future")
				print ("YouTube: https://www.youtube.com/c/seanwallawalla")
				print ("Twitter: https://www.twitter.com/seanwallawalla")
				print ("Reddit: https://www.reddit.com/u/seanwallawalla")
				print ("\nMailing\nWARNING! These links may not be functional in the future")
				print ("GMAIL: theironmelonmc4384141@gmail.com")
				print (" ")
			if WikIDSelect == 10012:
				print ("Feedback Center")
			if WikIDSelect == 100013:
				print ("Comment section")
			if WikIDSelect == 10010:
				print ("UCalc bundle info")
				print ("50 calculation modes")
				print ("10 games")
				print ("5 screensavers")
				print ("Chatrooms")
				print ("All for $00.00")
				print ("We want this project to continue as a free project, and we need YOUR donations.")
				print ("\nYou can help donate money, but if you are short on cash, you can also donate by helping work with the software, such as")
				print ("Monitoring distros, changing the code, advertising, and more")
			if WikIDSelect == 10014:
				print ("Common math errors")
				print ("Part 1: Common Fraction Errors")
				print ("Fractions are a useful form of measurement for many types of math formulas and equations")
				print ("However, sometimes things can be confusing, and when it doesn't work, you can get a little frustrated")
				print ("Here, we will go over some common fraction mistakes, and how you can fix them:")
				print ("\n 1/3 + 2/4")
				fraction1answ1 = str(input("What does that make?"))
				print ("If you entered 1, that would be incorrect. For these types of equations, you have to look closely")
				print ("You just assumed that 1 plus 2 is three. That is correct, but notice how the second fraction has a 4 instead of a 3?")
				print ("")
				print ("Here is another one, pretty easy: ")
				print ("1/3 + 1/3 + 1/3")
				fraction2answ1 = str(input("What does that make?"))
				print ("This one is is a whole number")
			if WikIDSelect == 20000:
				print ("Processor setup")
				print ("In computer science and engineering, the processor is one of the main parts of a computer")
				print ("The CPU (Central Processing Unit) works with information on your computer")
				print ("There are processors with different integer caps, such as 4 bit, 8 bit, 16 bit, 32 bit, etc")
				print ("These integer caps hold their own limits")
				print ("Here is a chart on how it works:")
				print ("|-----------------------------------------------------------------------|")
				print ("| CPU Integers                                                          |")
				print ("| 4 bit   | max = 16                                                    |")
				print ("| 8 bit   | max = 255                                                   |")
				print ("| 12 bit  | max = 4096                                                  |")
				print ("| 16 bit  | max = 65,535                                                |")
				print ("| 18 bit  | max = 262,144                                               |")
				print ("| 24 bit  | max = 8,388,607                                             |")
				print ("| 26 bit  | max = UNKNOWN                                               |")
				print ("| 31 bit  | max = UNKNOWN                                               |")
				print ("| 32 bit  | max = 4,294,967,295                                         |")
				print ("| 36 bit  | max = UNKNOWN                                               |")
				print ("| 48 bit  | max = 140,737,488,355,327                                   |")
				print ("| 60 bit  | max = UNKNOWN                                               |")
				print ("| 64 bit  | max = 9,223,372,036,854,775,807                             |")
				print ("| 128 bit | max = 170,141,183,460,469,231,731,687,303,715,884,105,728   |")
				print ("| 256 bit | max = UNKNOWN                                               |")
				print ("| 512 bit | max = UNKNOWN                                               |")
				print ("|-----------------------------------------------------------------------|")
				print ("Which brings us to the Weak Calculators section")
				noMore = input("Press [ENTER] key to exit")
				print ("Exiting")
				print ("Please wait...")
			if WikIDSelect == 20001:
				print ("Weak calculators")
				print ("| Please read 'Processor setup' first if you haven't already")
				print ("A weak calculator with uCalc is considered a calculator that")
				print ("Can't calculate high amounts of numbers")
				print ("Any calculator below 32 bit here is considered weak, as it can't do advanced calculations")
				print ("But then why did we include them? UCalc supports all types of math. If you would like to experience simple calculators, and what")
				print ("the worlds weakest calculator feels like, go ahead! If you would like to experience what the worlds most advanced calculator feels like")
				print ("be my guest! All numbers are allowed. No exceptions")
			if WikIDSelect == 20002:
				print ("Compatibility")
				print ("\nMicrosoft Windows")
				print ("Windows 2000")
				print ("Windows XP")
				print ("Windows Vista")
				print ("Windows 7")
				print ("Windows 8")
				print ("Windows 8.1")
				print ("Windows 10")
				print ("Windows Server 2003")
				print ("Windows Server 2008")
				print ("Windows Server 2012")
				print ("Windows Server 2016")
				print ("Windows Server 2019")
				print ("\nMacOS")
				print ("MacOS X 10.2")
				print ("MacOS X 10.3")
				print ("MacOS X 10.4")
				print ("MacOS X 10.5")
				print ("MacOS X 10.6")
				print ("MacOS X 10.7")
				print ("OS X 10.8")
				print ("OS X 10.9")
				print ("OS X 10.10")
				print ("OS X 10.11")
				print ("MacOS 10.12")
				print ("MacOS 10.13")
				print ("MacOS 10.14")
				print ("\nLinux")
				print ("\nUbuntu")
				print ("Ubuntu 4.04 and up")
				print ("Lubuntu 6.10 and up")
				print ("Xubuntu 6.10 and up")
				print ("\nFedora")
				print ("Fedora Core 3 and up")
				print ("\nMint")
				print ("Linux Mint 4 and up")
				print ("\nArch")
				print ("Unknown")
				print ("\nGentoo")
				print ("Unknown")
			if WikIDSelect == 20003:
				print ("In computer architecture, 4-bit integers, memory addresses, or other data units are those that are 4 bits wide. Also, ")
				print ("4-bit CPU and ALU architectures are those that are based on registers, address buses, or data buses of that size. A group ")
				print ("of four bits is also called a nibble and has 24 = 16 possible values.")
				print (" ")
				print ("Some of the first microprocessors had a 4-bit word length and were developed around 1970. The TMS 1000, the world's first ")
				print ("single-chip microprocessor, was a 4-bit CPU; it had a Harvard architecture, with an on-chip instruction ROM, 8-bit-wide ")
				print ("instructions and an on-chip data RAM with 4-bit words.[1] The first commercial microprocessor was the binary-coded decimal") 
				print ("(BCD-based) Intel 4004,[2][3] developed for calculator applications in 1971; it had a 4-bit word length, but had 8-bit ")
				print ("instructions and 12-bit addresses.")
				print (" ")
				print ("The HP Saturn processors, used in many Hewlett-Packard calculators between 1984 and 2003 (including the HP 48 series ")
				print ("of scientific calculators) are ''4-bit'' (or hybrid 64-/4-bit) machines; as the Intel 4004 did, they string multiple 4-bit") 
				print ("words together, e.g. to form a 20-bit memory address, and most of the registers are 64 bits wide, storing 16 ")
				print ("4-bit digits.[4][5][6]")
				print (" ")
				print ("The 4-bit processors were programmed in assembly language or Forth, e.g. ''MARC4 Family of 4 bit Forth CPU''[7] because of the ")
				print ("extreme size constraint on programs and because common programming languages (for microcontrollers, 8-bit and larger), such as") 
				print ("the C programming language, do not support 4-bit data types (C requires that the size of the char data type be at least 8 ")
				print ("bits,[8] and that all data types other than bitfields have a size that is a multiple of the character size[9][10][11]). ")
				print ("While larger than 4-bit values can be used by combining more than one manually, the language has to support the smaller ")
				print ("values used in the combining. If not, assembly is the only option.[dubious – discuss]")
				print (" ")
				print ("The 1970s saw the emergence of 4-bit software applications for mass markets like pocket calculators. During the ")
				print ("1980s 4-bit microprocessor were used in handheld electronic games to keep costs low.")
				print (" ")
				print ("In the 1970s and 1980s, a number of research and commercial computers used bit slicing, in which the CPU's arithmetic ")
				print ("logic unit (ALU) was built from multiple 4-bit-wide sections, each section including a chip such as an Am2901 or 74181 chip.")
				print (" ")
				print ("The Zilog Z80, although it is an 8-bit microprocessor, has a 4-bit ALU.[12][13]")
				more1 = input("Contents")
				print (" ")
				print ("1 Modern uses")
				print ("2 Details")
				print ("3 List of 4-bit processors")
				print ("4 See also")
				print ("5 References")
				print ("6 External links")
				print (" ")
				more1 = input("Modern uses")
				print (" ")
				print ("While 32- and 64-bit processors are more prominent in modern consumer electronics, 4-bit CPUs continue to be used ")
				print ("(usually as part of a microcontroller) in cost-sensitive applications that require minimal computing power. For example,") 
				print ("one bicycle computer specifies that it uses a ''4-bit 1-chip microcomputer''.[14] Other typical uses include coffee makers,") 
				print ("infrared remote controls,[15] and security alarms.[16]")
				print (" ")
				print ("Use of 4-bit processors has declined relative to 8-bit or even 32-bit processors, as they are hard to find cheaper in general") 
				print ("computer suppliers' stores. The simplest kinds are not available in any of them, and others are ''non-stock'' and more ")
				print ("expensive.[17] (A few expensive ones can be found, as of 2014, on eBay.)[18][19][20]")
				print (" ")
				print ("Electronics stores still carry, as of 2014, non-CPU/non-MCU 4-bit chips, such as counters.")
				print (" ")
				print ("As of 2015, most PC motherboards, especially laptop motherboards, use a 4-bit LPC bus (introduced in 1998) to connect the ")
				print ("southbridge to the motherboard firmware flash ROM (UEFI or BIOS) and the Super I/O chip.[21][22]")
				more1 = input("Details")
				print ("Main article: Nibble")
				print (" ")
				print ("With 4 bits, it is possible to create 16 different values. All single-digit hexadecimal numbers can be written with four bits. ")
				print ("Binary-coded decimal is a digital encoding method for numbers using decimal notation, with each decimal digit represented by ")
				print ("four bits.")
				print ("Binary 	Octal 	Decimal 	Hexadecimal")
				print ("0000 	0 	0 	0")
				print ("0001 	1 	1 	1")
				print ("0010 	2 	2 	2")
				print ("0011 	3 	3 	3")
				print ("0100 	4 	4 	4")
				print ("0101 	5 	5 	5")
				print ("0110 	6 	6 	6")
				print ("0111 	7 	7 	7")
				print ("1000 	10 	8 	8")
				print ("1001 	11 	9 	9")
				print ("1010 	12 	10 	A")
				print ("1011 	13 	11 	B")
				print ("1100 	14 	12 	C")
				print ("1101 	15 	13 	D")
				print ("1110 	16 	14 	E")
				print ("1111 	17 	15 	F")
				more1 = input("List of 4-bit processors")
				print ("16-pin DIP")
				print ("Intel C4004")
				print ("infrared remote control PCB")
				print ("an infrared remote control transmitter controlled by a NEC D63GS 4-bit microcontroller")
				print ("20-pin PSOP")
				print ("NEC D63GS: a 4-bit microcontroller for infrared remote control transmission")
				print ("card-edge PCB")
				print ("Olympia CD700 Desktop Calculator using the National Semiconductor MAPS MM570X bit-serial 4-bit microcontroller")
				print ("16-pin DIP")
				print ("National Semiconductor MM5700CA/D bit-serial 4-bit microcontroller")
				print (" ")
				print ("TMS 1000")
				print ("Intel 4004")
				print ("Intel 4040")
				print ("10NES")
				print ("Atmel MARC4 core[23][24] – (discontinued: ''Last ship date: March 7, 2015''[25])")
				print ("Samsung S3C7 (KS57 Series) 4-bit microcontrollers (RAM: 512 to 5264 nibbles, 6 MHz clock)")
				print ("Toshiba TLCS-47 series")
				print ("HP Saturn")
				print ("NEC μPD75X")
				print ("NEC μCOM-4")
				print ("NEC (now Renesas) µPD612xA (discontinued), µPD613x, μPD6x[15][26] and μPD1724x[27] infrared remote control transmitter ")
				print ("microcontrollers[28][29]")
				print ("EM Microelectronic-Marin EM6600 family,[30] EM6580,[31][32] EM6682,[33] etc.")
				print ("Epson S1C63 family")
				print ("National Semiconductor MAPS MM570X")
				noMore = input("Press [ENTER] key to exit")
			if WikIDSelect == 20004:
				print ("In computer architecture, 8-bit integers, memory addresses, or other data units are those that are 8 bits (1 octet) wide. Also, ")
				print ("8-bit CPU and ALU architectures are those that are based on registers, address buses, or data buses of that size. 8-bit is also ")
				print ("a generation of microcomputers in which 8-bit microprocessors were the norm.")
				print (" ")
				print ("The IBM System/360 introduced byte-addressable memory with 8-bit bytes, as opposed to bit-addressable or decimal ")
				print ("digit-addressable or word-addressable memory, although its general purpose registers were 32 bits wide, and addresses ")
				print ("were contained in the lower 24 bits of those addresses. Different models of System/360 had different internal data path ")
				print ("widths; the IBM System/360 Model 30 (1965) implemented the 32-bit System/360 architecture, but had an 8 bit native path width, and")
				print ("performed 32-bit arithmetic 8 bits at a time.[1]")
				print (" ")
				print ("The first widely adopted 8-bit microprocessor was the Intel 8080, being used in many hobbyist computers of the late 1970s ")
				print ("and early 1980s, often running the CP/M operating system; it had 8-bit data words and 16-bit addresses. The Zilog Z80 ")
				print ("(compatible with the 8080) and the Motorola 6800 were also used in similar computers. The Z80 and the MOS Technology 6502 8-bit") 
				print ("CPUs were widely used in home computers and second- and third-generation game consoles of the 1970s and 1980s. Many 8-bit ")
				print ("CPUs or microcontrollers are the basis of today's ubiquitous embedded systems.")
				more1 = input("Details")
				print (" ")
				print ("There are 28 (256) different possible values for 8 bits. When unsigned, it has possible values ranging from 0 to 255, when ")
				print ("signed, it has -128 to 127.")
				print (" ")
				print ("Eight-bit CPUs use an 8-bit data bus and can therefore access 8 bits of data in a single machine instruction. The address bus ")
				print ("is typically a double octet wide (i.e. 16-bit), due to practical and economical considerations. This implies a direct address ")
				print ("space of only 64 kB on most 8-bit processors.")
				more1 = input("Notable 8-bit CPUs")
				print (" ")
				print ("The first commercial 8-bit processor was the Intel 8008 (1972) which was originally intended for the Datapoint 2200 intelligent ")
				print ("terminal. Most competitors to Intel started off with such character oriented 8-bit microprocessors. Modernized variants of ")
				print ("these 8-bit machines are still one of the most common types of processor in embedded systems.")
				print (" ")
				print ("Another notable 8-bit CPU is the MOS Technology 6502; it, and variants of it, were used in a number of personal computers such")
				print ("as the Apple I and Apple II, the Atari 8-bit family, the BBC Micro, and the Commodore PET and Commodore VIC-20, and in a ")
				print ("number of video game consoles such as the Atari 2600 and the Nintendo Entertainment System.")
				print ("Early or popular 8-bit processors (incomplete) Manufacturer 	Processor 	Year 	Comment")
				print ("Intel 	8008 	1972 	Datapoint 2200 compatible")
				print ("Signetics 	2650 	1973 	")
				print ("Intel 	8080 	1974 	8008 source compatible")
				print ("Motorola 	6800 	1974 ")	
				print ("Fairchild 	F8 	1975 	")
				print ("MOS 	6502 	1975 	Similar to 6800, but incompatible")
				print ("Microchip 	PIC 	1975 	Harvard architecture microcontroller")
				print ("Electronic Arrays 	EA9002 	1976 	8-bit data, 12-bit addressing")
				print ("RCA 	1802 	1976 	")
				print ("Zilog 	Z80 	1976 	8080 binary compatible")
				print ("Intel 	8085 	1977 	8080 binary compatible")
				print ("Motorola 	6809 	1978 	6800 source compatible")
				print ("Zilog 	Z8 	1978 	Harvard architecture microcontroller")
				print ("Intel 	8051 	1980 	Harvard architecture microcontroller")
				print ("MOS 	6510 	1982 	Enhanced 6502 custom-made for use in the Commodore 64")
				print ("Ricoh 	2A03 	1982 	6502 clone minus BCD instructions for the Nintendo Entertainment System")
				print ("Zilog 	Z180 	1985 	Z80 binary compatible")
				print ("Motorola 	68HC11 	1985 ")	
				print ("Atmel 	AVR 	1996 	")
				print ("Zilog 	EZ80 	1999 	Z80 binary compatible")
				print ("Infineon 	XC800 	2005 ")	
				print ("Freescale 	68HC08 		")
				print ("Hudson 	HuC6280 		")
				print ("Motorola 	6803 ")		
				print ("NEC 	78K0[2]") 		
				print (" ")
				noMore = input("Press [ENTER] key to exit")
			if WikIDSelect == 20005:
				print ("In computer architecture, 12-bit integers, memory addresses, or other data units are those that are 12 bits (1.5 octets) wide. ")
				print ("Also, 12-bit CPU and ALU architectures are those that are based on registers, address buses, or data buses of that size.")
				print (" ")
				print ("Possibly the best-known 12-bit CPU is the PDP-8 and its relatives, such as the Intersil 6100 microprocessor produced in ")
				print ("various incarnations from August 1963 to mid-1990. Many analog to digital converters (ADCs) have a 12-bit resolution. Some") 
				print ("PIC microcontrollers use a 12-bit word size.")
				print (" ")
				print ("12 binary digits, or 3 nibbles (a 'tribble'), have 4096 (10000 octal, 1000 hexadecimal) distinct combinations. Hence, a ")
				print ("microprocessor with 12-bit memory addresses can directly access 4096 words (4 Kw) of word-addressable memory. At a time ")
				print ("when six-bit character codes were common a 12-bit word, which could hold two characters, was a convenient size. ")
				print ("IBM System/360 instruction formats use a 12-bit displacement field which, added to the contents of a base register, can") 
				print ("address 4096 bytes of memory.")
				more1 = input("List of 12-bit computer systems")
				print (" ")
				print ("Digital Equipment Corporation")
				print ("PDP-5")
				print ("PDP-8")
				print ("DECmate, a personal computer based on the Intersil 6100")
				print ("PDP-12")
				print ("PDP-14")
				print ("Intersil IM6100 microprocessor (PDP-8-compatible)")
				print ("Control Data Corporation")
				print ("CDC 6600 - Peripheral Processor (PP)")
				print ("CDC 160 series computers")
				print ("National Cash Register NCR 315")
				print ("Scientific Data Systems SDS 92")
				print ("Ford Motor Company EEC I Automotive engine control unit")
				print ("PC12 minicomputer")
				print ("Ferranti Argus")
				print ("LINC, later commercialized by DEC as the LINC-8")
				print ("Electronic Arrays 9002 (12-bit addressing but 8-bit byte)")
				noMore = input("Press [ENTER] key to exit")
			if WikIDSelect == 20006:
				print ("In computer architecture, 16-bit integers, memory addresses, or other data units are those that are 16 bits (2 octets) wide.") 
				print ("Also, 16-bit CPU and ALU architectures are those that are based on registers, address buses, or data buses of that size. ")
				print ("16-bit microcomputers are computers in which 16-bit microprocessors were the norm.")
				print (" ")
				print ("A 16-bit register can store 216 different values. The signed range of integer values that can be stored in 16 bits is ")
				print ("−32,768 (−1 × 215) through 32,767 (215 − 1); the unsigned range is 0 through 65,535 (216 − 1). Since 216 is 65,536, a ")
				print ("processor with 16-bit memory addresses can directly access 64 KB (65,536 bytes) of byte-addressable memory. If a system ")
				print ("uses segmentation with 16-bit segment offsets, more can be accessed.")
				more1 = input("Contents")
				print (" ")
				print ("1 16-bit architecture")
				print ("1.1 16/32-bit Motorola 68000 and Intel 386SX")
				print ("2 Intel 16-bit memory models")
				print ("3 16-bit application")
				print ("4 List of 16-bit CPUs")
				print ("5 See also")
				print ("6 References")
				print (" ")
				more1 = input("16-bit architecture")
				print (" ")
				print ("The MIT Whirlwind (c. 1951)[1][2] was quite possibly the first-ever 16-bit computer. Other early (c. 1965–70) 16-bit computers ")
				print ("include the IBM 1130,[3] the HP 2100,[4] the Data General Nova,[5] and the DEC PDP-11.[6] Early (c. 1973–75) multi-chip 16-bit ")
				print ("microprocessors include the National Semiconductor IMP-16 and the Western Digital MCP-1600. Early (c. 1975–76) single-chip ")
				print ("16-bit microprocessors include the Panafacom MN1610,[7][8] National Semiconductor PACE, the HP BPC, and the TI TMS9900. ")
				print ("Other notable 16-bit processors include the Intel 8086, the Intel 80286, the WDC 65C816, and the Zilog Z8000. The Intel ")
				print ("8088 was binary compatible with the Intel 8086, and was 16-bit in that its registers were 16 bits wide, and arithmetic ")
				print ("instructions could operate on 16-bit quantities, even though its external bus was 8 bits wide.")
				print (" ")
				print ("A 16-bit integer can store 216 (or 65,536) distinct values. In an unsigned representation, these values are the integers ")
				print ("between 0 and 65,535; using two's complement, possible values range from −32,768 to 32,767. Hence, a processor with ")
				print ("16-bit memory addresses can directly access 64 KB of byte-addressable memory.")
				print (" ")
				print ("16-bit processors have been almost entirely supplanted in the personal computer industry, and are used less than 32-bit ")
				print ("(or 8-bit) CPUs in embedded applications.")
				print ("16/32-bit Motorola 68000 and Intel 386SX")
				print (" ")
				print ("The Motorola 68000 is sometimes called 16-bit because its internal and external data buses were 16 bits wide; however, it ")
				print ("could be considered a 32-bit processor in that the general purpose registers were 32 bits wide and most arithmetic ")
				print ("instructions supported 32-bit arithmetic. The 68000 was a microcoded processor with three internal 16-bit ALUs. Only 24") 
				print ("bits of the program counter (PC) were available on original DIP packages, with up to 16 megabytes of addressable RAM. ")
				print ("68000 software is 32-bit in nature and forward-compatible with other 32-bit processors in the same family.[9] The 68008 ")
				print ("was a version of the 68000 with 8-bit external data path and 1 megabyte addressing for the 48-pin DIP version and 4 ")
				print ("megabyte for the 52-pin PLCC version. Several Apple Inc. Macintosh models; e.g., LC series, used 32-bit 68020 and ")
				print ("68030 processors on a 16-bit data bus to save cost.")
				print (" ")
				print ("Similar analysis applies to Intel's 80286 CPU replacement called the 386SX which is a 32-bit processor with 32-bit ALU and ")
				print ("internal 32-bit data paths with a 16-bit external bus and 24-bit addressing of the processor it replaced.")
				more1 = input("Intel 16-bit memory models")
				print ("Main article: Intel Memory Model")
				print (" ")
				print ("This article may be confusing or unclear to readers. Please help us clarify the article. There might be a discussion about ")
				print ("this on the talk page. (August 2017) (Learn how and when to remove this template message)")
				print (" ")
				print ("Just as there are multiple data models for 64-bit architectures, the 16-bit Intel architecture allows for different memory ")
				print ("models—ways to access a particular memory location. The reason for using a specific memory model is the size of the ")
				print ("assembler instructions or required storage for pointers. Compilers of the 16-bit era generally had the following type-width") 
				print ("characteristic:")
				print ("16-bit data model Data model 	short 	int 	long 	Pointers")
				print ("IP16L32 (near) 	16 	16 	32 	16")
				print ("I16LP32 (far) 	16 	16 	32 	32")
				print (" ")
				print ("Tiny")
				print ("Code and data will be in the same segment (especially, the registers CS, DS, ES, SS will point to the same segment); near ")
				print ("(16-bit) pointers are always used. Code, data and stack together cannot exceed 64 KB.")
				print ("Small")
				print ("Code and data will be in different segments, and near pointers are always used. There will be 64 KB of space for code and ")
				print ("64 KB for data/stack.")
				print ("Medium")
				print ("Code pointers will use far pointers (16:16 bit), enabling access to 1 MB. Data pointers remain to be of the near type.")
				print ("Compact")
				print ("Data pointers will use far and code will use near pointers.")
				print ("Large/huge")
				print ("Code and data pointers will be far.[10]")
				print (" ")
				more1 = input("16-bit application")
				print (" ")
				print ("In the context of IBM PC compatible and Wintel platforms, a 16-bit application is any software written for MS-DOS, OS/2 1.x ")
				print ("or early versions of Microsoft Windows which originally ran on the 16-bit Intel 8088 and Intel 80286 microprocessors. ")
				print ("Such applications used a 20-bit or 24-bit segment or selector-offset address representation to extend the range of addressable ")
				print ("memory locations beyond what was possible using only 16-bit addresses. Programs containing more than 216 bytes (65,536 bytes)")
				print ("of instructions and data therefore required special instructions to switch between their 64-kilobyte segments, increasing the ")
				print ("complexity of programming 16-bit applications.")
				more1 = input("List of 16-bit CPUs")
				print ("This list is incomplete; you can help by expanding it.")
				print (" ")
				print ("Angstrem")
				print ("1801 series CPU")
				print ("Data General")
				print ("Nova")
				print ("Eclipse")
				print ("Digital Equipment Corporation")
				print ("PDP-11 (for LSI-11, see Western Digital, below)")
				print ("DEC J-11")
				print ("DEC T-11")
				print ("EnSilica")
				print ("eSi-1600")
				print ("Ferranti")
				print ("Ferranti F100-L")
				print ("Ferranti F200-L")
				print ("Freescale")
				print ("Freescale 68HC12")
				print ("Freescale 68HC16")
				print ("General Instrument")
				print ("CP1600")
				print ("Hewlett-Packard")
				print ("HP 21xx/2000/1000/98xx/BPC")
				print ("HP 3000")
				print ("Honeywell")
				print ("Honeywell Level 6/DPS 6")
				print ("IBM")
				print ("1130/1800")
				print ("System/7")
				print ("Series/1")
				print ("System/36")
				print ("Infineon")
				print ("XE166 family")
				print ("C166 family")
				print ("C167 family")
				print ("XC2000")
				print ("Intel")
				print ("Intel 8086/Intel 8088")
				print ("Intel 80186/Intel 80188")
				print ("Intel 80286")
				print ("Intel MCS-96")
				print ("Lockheed")
				print ("MAC-16")
				print ("Motorola")
				print ("Motorola 68000 (32-bit registers, 16-bit bus)")
				print ("Motorola 68010 (32-bit registers, 16-bit bus)")
				print ("National Semiconductor")
				print ("IMP-16")
				print ("ACE/INS8900")
				print ("NEC")
				print ("V20/V30")
				print ("Renesas")
				print ("Renesas M16C (16-bit registers, 24-bit address space)")
				print ("Ricoh")
				print ("Ricoh 5A22 (WDC 65816 clone used in SNES)")
				print ("Texas Instruments")
				print ("Texas Instruments TMS9900")
				print ("TI MSP430")
				print ("Western Design Center")
				print ("WDC 65816/65802")
				print ("Western Digital")
				print ("MCP-1600 (used in the DEC LSI-11)")
				print ("Xerox")
				print ("Alto")
				print ("Zilog")
				print ("Zilog Z8000")
				print (" ")
				print (" ")
				print (" ")
				noMore = input("Press [ENTER] key to exit")
			if WikIDSelect == 20007:
				print ("In computer architecture, 18-bit integers, memory addresses, or other data units are those that are 18 bits (2.25 octets) ")
				print ("wide. Also, 18-bit CPU and ALU architectures are those that are based on registers, address buses, or data buses of that size.")
				print (" ")
				print ("18 binary digits have 262144 (1000000 octal, 40000 hexadecimal) distinct combinations.")
				print (" ")
				print ("18 bits was a common word size for smaller computers in the 1960s, when large computers often used 36 bit words and ")
				print ("6-bit character sets were the norm.")
				more1 = input("Example computer architectures")
				print (" ")
				print ("Possibly the most well-known 18-bit computer architectures are the PDP-1, PDP-4, PDP-7, PDP-9 and PDP-15 minicomputers ")
				print ("produced by Digital Equipment Corporation from 1960 to 1975.")
				print (" ")
				print ("The UNIVAC produced several 18-bit computers, including the UNIVAC 418 and several military systems.")
				print (" ")
				print ("The IBM 7700 Data Acquisition System was announced by IBM on December 2, 1963.")
				print (" ")
				print ("The BCL Molecular 18 was a group of systems designed and manufactured in the UK in the 1970s and 1980s.")
				print (" ")
				print ("The NASA Standard Spacecraft Computer NSSC-1 was developed as a standard component for the MultiMission Modular Spacecraft at ")
				print ("the Goddard Space Flight Center (GSFC) in 1974.")
				print (" ")
				print ("The flying-spot store digital memory in the first experimental electronic switching systems used nine plates of optical memory ")
				print ("that were read and written two bits at a time, producing a word size of 18 bits.")
				more1 = input("Character encoding")
				print (" ")
				print ("18-bit machines use a variety of character encodings.")
				print (" ")
				print ("The DEC Radix-50, called Radix 508 format, packs three characters plus two bits in each 18-bit word.[1]")
				print (" ")
				print ("The Teletype packs three characters in each 18-bit word; each character a 5-bit Baudot code and an upper-case bit.[2]")
				print (" ")
				print ("The DEC SIXBIT format packs three characters in each 18-bit word,[2] each 6-bit character obtained by stripping the high bits ")
				print ("from the 7-bit ASCII code, which folds lowercase to uppercase letters. ")
				print (" ")
				noMore = input("Press [ENTER] key to exit")
			if WikIDSelect == 20008:
				print ("In computer architecture, 24-bit integers, memory addresses, or other data units are those that are 24 bits (3 octets) ")
				print ("wide. Also, 24-bit CPU and ALU architectures are those that are based on registers, address buses, or data buses of that size.")
				print (" ")
				print ("Notable 24-bit machines include the CDC 924 – a 24-bit version of the CDC 1604, CDC lower 3000 series, SDS 930 and SDS 940, ")
				print ("the ICT 1900 series, and the Datacraft minicomputers/Harris H series.[1]")
				print (" ")
				print ("The term SWORD is sometimes used to describe a 24-bit data type with the S prefix referring to sesqui.[citation needed]")
				print (" ")
				print ("The IBM System/360, announced in 1964, was a popular computer system with 24-bit addressing and 32-bit general registers and ")
				print ("arithmetic. The early 1980s saw the first popular personal computers, including the IBM PC/AT with an Intel 80286 processor ")
				print ("using 24-bit addressing and 16-bit general registers and arithmetic, and the Apple Macintosh 128K with a Motorola 68000 ")
				print ("processor featuring 24-bit addressing and 32-bit registers.")
				print (" ")
				print ("The eZ80 is a microprocessor and microcontroller family, with 24-bit registers and therefore 24-bit linear addressing, ")
				print ("that is binary compatible with the 8/16-bit Z80.[citation needed]")
				print (" ")
				print ("The 65816 is a microprocessor and microcontroller family with 16-bit registers and 24-bit bank switched addressing. It is ")
				print ("binary compatible with the 8-bit 6502.[2]")
				print (" ")
				print ("The range of unsigned integers that can be represented in 24 bits is 0 to 16,777,215 (FFFFFF16 in hexadecimal). The range of")
				print ("signed integers that can be represented in 24 bits is −8,388,608 to 8,388,607.")
				print (" ")
				print ("Several fixed-point digital signal processors have a 24-bit data bus, selected as the basic word length because it gave the ")
				print ("system a reasonable precision for the processing audio (sound). In particular, the Motorola 56000 series has three parallel ")
				print ("24-bit data buses, one connected to each memory space: program memory, data memory X, and data memory Y.[3]")
				print (" ")
				print ("Engineering Research Associates (later merged into UNIVAC) designed a series of 24-bit drum memory machines including the ")
				print ("Atlas, its commercial version the UNIVAC 1101, the ATHENA computer, the UNIVAC 1824 guidance computer, etc. Those designers ")
				print ("selected a 24-bit word length because the Earth is roughly 40 million feet in diameter, and an intercontinental ballistic ")
				print ("missile guidance computer needs to do the Earth-centered inertial navigation calculations to an accuracy of a few feet.")
				print ("[4][not in citation given] ")
				print (" ")
				noMore = input("Press [ENTER] key to exit")
			if WikIDSelect == 20009:
				print ("In computer architecture, 26-bit integers, memory addresses, or other data units are those that are 26 bits wide, and thus can ")
				print ("represent values up to 64 mega (base 2). Two examples of computer processors that featured 26-bit memory addressing are certain ")
				print ("second generation IBM System/370 mainframe computer models introduced in 1981 (and several subsequent models), which had 26-bit ")
				print ("physical addresses but had only the same 24-bit virtual addresses as earlier models, and the first generations of ARM processors.")
				more1 = input("Contents")
				print (" ")
				print ("1 History")
				print ("1.1 IBM System/370")
				print ("1.2 Early ARM processors")
				print ("2 External links")
				print (" ")
				more1 = input("History")
				more1 = input("IBM System/370")
				print (" ")
				print ("As data processing needs continued to grow, IBM and their customers faced challenges directly addressing larger memory sizes. ")
				print ("In what ended up being a short-term ''emergency'' solution, a pair of IBM's second wave of System/370 models, the 3033 and ")
				print ("3081, introduced 26-bit real memory addressing, increasing the System/370's amount of physical memory that could be attached ")
				print ("by a factor of 4 from the previous 24-bit limit of 16 MB. IBM referred to 26-bit addressing as ''extended real addressing,'' ")
				print ("and some subsequent models also included 26-bit support. However, only 2 years later, IBM introduced 31-bit memory addressing, ")
				print ("expanding both physical and virtual addresses to 31 bits, with its System/370-XA models, and even the popular 3081 was ")
				print ("upgradeable to XA standard.")
				print (" ")
				print ("Given 26-bit's brief history as the state-of-the-art in memory addressing available in IBM's model range, and given that ")
				print ("virtual addresses were still limited to 24 bits, software exploitation of 26-bit mode was limited. The few customers that ")
				print ("exploited 26-bit mode eventually adjusted their applications to support 31-bit addressing,[citation needed] and IBM dropped ")
				print ("support for 26-bit mode after several years producing models supporting 24-bit, 26-bit, and 31-bit modes. The 26-bit mode is ")
				print ("the only addressing mode that IBM removed from its line of mainframe computers descended from the System/360. All the other ")
				print ("addressing modes, including now 64-bit mode, are supported in current model mainframes.")
				more1 = input("Early ARM processors")
				print (" ")
				print ("In the ARM processor architecture, 26-bit refers to the design used in the original ARM processors where the Program Counter")
				print ("(PC) and Processor Status Register (PSR) were combined into one 32-bit register (R15), the status flags filling the high 6 ")
				print ("bits and the Program Counter taking up the lower 26 bits.")
				print (" ")
				print ("In fact, because the program counter is always word-aligned the lowest two bits are always zero which allowed the designers") 
				print ("to reuse these two bits to hold the processor's mode bits too. The four modes allowed were USR26, SVC26, IRQ26, FIQ26; ")
				print ("contrast this with the 32 possible modes available when the program status was separated from the program counter in ")
				print ("more recent ARM architectures.")
				print (" ")
				print ("This design enabled more efficient program execution, as the Program Counter and status flags could be saved and restored ")
				print ("with a single operation. This resulted in faster subroutine calls and interrupt response than traditional designs, ")
				print ("which would have to do two register loads or saves when calling or returning from a subroutine.")
				print (" ")
				print ("Despite having a 32-bit ALU and word-length, processors based on ARM architecture version 1 and 2 had only a 26-bit PC and ")
				print ("address bus, and were consequently limited to 64 MiB of addressable memory. This was still a vast amount of memory at the ")
				print ("time, but because of this limitation, architectures since have included various steps away from the original 26-bit design.")
				print (" ")
				print ("The ARM architecture version 3 introduced a 32-bit PC and separate PSR, as well as a 32-bit address bus, allowing 4 GiB of ")
				print ("memory to be addressed. The change in the PC/PSR layout caused incompatibility with code written for previous architectures, ")
				print ("so the processor also included a 26-bit compatibility mode which used the old PC/PSR combination. The processor could still ")
				print ("address 4 GB in this mode, but could not execute anything above address 0x3FFFFFC (64 MB). This mode was used by RISC OS ")
				print ("running on the Acorn Risc PC to utilise the new processors while retaining compatibility with existing software.")
				print (" ")
				print ("ARM architecture version 4 made the support of the 26-bit addressing modes optional, and ARM architecture version 5 ")
				print ("onwards has removed them entirely. ")
				print (" ")
				noMore = input("Press [ENTER] key to exit")
			if WikIDSelect == 20010:
				print ("In computer architecture, 31-bit integers, memory addresses, or other data units are those that are 31 bits wide.")
				print (" ")
				print ("In 1983, IBM introduced 31-bit addressing in the System/370-XA mainframe architecture as an upgrade to the 24-bit physical and") 
				print ("virtual,[1] and transitional 24-bit-virtual/26-bit physical,[2][3] addressing of earlier models.[4][5] This enhancement ")
				print ("allowed address spaces to be 128 times larger, permitting programs to address memory above 16 MB (referred to ")
				print ("as ''above the line'').[6][1] Support for COBOL, FORTRAN and later on Linux/390 were included.")
				more1 = input("Contents")
				print (" ")
				print ("1 Architecture")
				print ("2 Transition")
				print ("3 370/ESA architecture")
				print ("4 z/Architecture")
				print ("5 Linux/390")
				print ("6 References")
				print (" ")
				more1 = input("Architecture")
				print (" ")
				print ("In the System/360, other than the 360/67, and early System/370 architectures, the general purpose registers were 32 bits wide,") 
				print ("the machine did 32-bit arithmetic operations, and addresses were always stored in 32-bit words, so the architecture was ")
				print ("considered 32-bit, but the machines ignored the top 8 bits of the address resulting in 24-bit addressing. With the XA ")
				print ("extension, only the high order bit (bit 0) in the word was ignored for addressing. An exception is that mode-switching ")
				print ("instructions also used bit 0. There were at least two reasons that IBM did not implement the 32-bit addressing of the 360/67")
				print (" ")
				print ("The loop control instructions BXH and BXLE did signed comparisons.")
				print ("Much of the existing software used bit 0 as an end-of-list indicator.[7]")
				print (" ")
				more1 = input("Transition")
				print (" ")
				print ("The transition was tricky: assembly language programmers, including IBM's own operating systems architects and developers, ")
				print ("had been using the spare byte at the top of addresses for flags for almost twenty years.[8] IBM chose to provide two forms ")
				print ("of addressing to minimize the pain: if the most significant bit (bit 0) of a 32-bit address was on, the next 31 bits were")
				print ("interpreted as the virtual address. If the most significant bit was off, then only the lower 24 bits were treated as the ")
				print ("virtual address (just as with pre-XA systems). Thus programs could continue using the seven low-order bits of the top byte") 
				print ("for other purposes as long as they left the top bit off. The only programs requiring modification were those that set the ")
				print ("top (leftmost) bit of a word containing an address. This also affected address comparisons: The leftmost bit of a word is ")
				print ("also interpreted as a sign-bit in 2's complement arithmetic, indicating a negative number if bit 0 is on. Programs that use ")
				print ("signed arithmetic comparison instructions could get reversed results. Two equivalent addresses could be compared as non-equal ")
				print ("if one of them had the sign bit turned on even if the remaining bits were identical. Most of this was invisible to programmers") 
				print ("using high-level languages like COBOL[9] or FORTRAN,[3][10] and IBM aided the transition with dual mode hardware for a period ")
				print ("of time.")
				print (" ")
				print ("Certain machine instructions in this 31-bit addressing mode alter the addressing mode bit as a possibly intentional side ")
				print ("effect. For example, the original subroutine call instructions BAL, Branch and Link, and its register-register equivalent, ")
				print ("BALR, Branch and Link Register, store certain status information, the instruction length code,[11] the condition code and ")
				print ("the program mask, in the top byte of the return address. A BAS, Branch and Store, instruction was added to allow 31-bit")
				print ("return addresses. BAS, and its register-register equivalent, BASR, Branch and Store Register, was part of the instruction") 
				print ("set of the System/360 Model 67, which was the only System/360 model to allow addresses longer than 24 bits. These ")
				print ("instructions were maintained, but were modified and extended for 31-bit addressing.")
				print (" ")
				print ("Additional instructions in support of 24/31-bit addressing include two new register-register call/return instructions ")
				print ("which also effect an addressing mode change (e.g. Branch and Save and Set Mode, BASSM,[12] the 24/31 bit version of a call") 
				print ("where the linkage address including the mode is saved and a branch is taken to an address in a possibly different mode, ")
				print ("and BSM, Branch and Set Mode, the 24/31 bit version of a return, where the return is directly to the previously saved ")
				print ("linkage address and in its previous mode). Taken together, BASSM and BSM allow 24-bit calls to 31-bit (and return to 24-bit),") 
				print ("31-bit calls to 24-bit (and return to 31-bit), 24-bit calls to 24-bit (and return to 24-bit) and 31-bit calls to 31-bit ")
				print ("(and return to 31-bit).")
				print (" ")
				print ("Like BALR 14,15 (the 24-bit-only form of a call), BASSM is used as BASSM 14,15, where the linkage address and mode are saved ")
				print ("in register 14, and a branch is taken to the subroutine address and mode specified in register 15. Somewhat similarly to BCR ")
				print ("15,14 (the 24-bit-only form of an unconditional return), BSM is used as BSM 0,14, where 0 indicates that the current mode is ")
				print ("not saved (the program is leaving the subroutine, anyway), and a return to the caller at the address and mode specified in ")
				print ("register 14 is to be taken. Refer to IBM publication MVS/Extended Architecture System Programming Library: 31-Bit Addressing,") 
				print ("GC28-1158-1, for extensive examples of the use of BAS, BASR, BASSM and BSM, in particular, pp. 29–30.")
				more1 = input("370/ESA architecture")
				print (" ")
				print ("In the 1990s IBM introduced 370/ESA architecture (later named 390/ESA and finally ESA/390 or System/390, in short S/390), ")
				print ("completing the evolution to full 31-bit virtual addressing and keeping this addressing mode flag. These later architectures ")
				print ("allow more than 2 GB of physical memory and allow multiple concurrent address spaces up to 2 GB each in size. As of mid-2006 ")
				print ("there were too many programs unduly constrained by this multiple 31-bit addressing mode.[citation needed]")
				more1 = input("z/Architecture")
				print (" ")
				print ("IBM broke the 2 GB linear addressing barrier (''the bar'') in 2000 with the introduction of the first 64-bit z/Architecture ")
				print ("system, the IBM zSeries Model 900.[1][13] Unlike the XA transition, z/Architecture does not reserve a top bit to identify ")
				print ("earlier code. z/Architecture maintains compatibility with 24-bit and 31-bit code, even older code running concurrently with ")
				print ("newer 64-bit code.")
				print ("Linux/390")
				print (" ")
				print ("Since Linux/390 was first released for the existing 32-bit data/31-bit addressing hardware in 1999, initial mainframe ")
				print ("Linux applications compiled in pre-z/Architecture mode are also limited to 31-bit addressing. This limitation disappeared ")
				print ("with 64-bit hardware, 64-bit Linux on z Systems, and 64-bit Linux applications. The 64-bit Linux distributions still run ")
				print ("32-bit data/31-bit addressing programs. IBM's 31-bit addressing allows 31-bit code to make use of additional memory. ")
				print ("However, at any one instant, a maximum of 2 GB is in each working address space. For non-64-bit Linux on processors ")
				print ("with 31-bit addressing, it is possible to assign memory above the 2 GB bar as a RAM disk. 31-bit Linux kernel")
				print ("(not user-space) support was removed in version 4.1.[14] ")
				print (" ")
				noMore = input("Press [ENTER] key to exit")
			if WikIDSelect == 20011:
				print ("In computer architecture, 32-bit integers, memory addresses, or other data units are those that are 32 bits (4 octets) wide.") 
				print ("Also, 32-bit CPU and ALU architectures are those that are based on registers, address buses, or data buses of that size. ")
				print ("32-bit microcomputers are computers in which 32-bit microprocessors are the norm.")
				more1 = input("Contents")
				print (" ")
				print ("1 Range for storing integers")
				print ("2 Technical history")
				print ("3 Architecture")
				print ("4 Applications")
				print ("5 Images")
				print ("6 File formats")
				print ("7 See also")
				print ("8 References")
				print ("9 External links")
				print (" ")
				more1 = input("Range for storing integers")
				print (" ")
				print ("A 32-bit register can store 232 different values. The range of integer values that can be stored in 32 bits depends on the ")
				print ("integer representation used. With the two most common representations, the range is 0 through 4,294,967,295 (232 − 1) for ")
				print ("representation as an (unsigned) binary number, and −2,147,483,648 (−231) through 2,147,483,647 (231 − 1) for representation ")
				print ("as two's complement.")
				print (" ")
				print ("One important consequence is that a processor with 32-bit memory addresses can directly access at most 4 GiB of ")
				print ("byte-addressable memory (though in practice the limit may be lower).")
				more1 = input("Technical history")
				print (" ")
				print ("Memory, as well as other digital circuits and wiring, was expensive during the first decades of 32-bit architectures ")
				print ("(the 1960s to the 1980s).[1] Older 32-bit processor families (or simpler, cheaper variants thereof) could therefore have") 
				print ("many compromises and limitations in order to cut costs. This could be a 16-bit ALU, for instance, or external ")
				print ("(or internal) buses narrower than 32 bits, limiting memory size or demanding more cycles for instruction fetch, ")
				print ("execution or write back.")
				print (" ")
				print ("Despite this, such processors could be labeled ''32-bit,'' since they still had 32-bit registers and instructions able to ")
				print ("manipulate 32-bit quantities. For example, the original Motorola 68000 had a 16-bit data ALU and a 16-bit external data bus,") 
				print ("but had 32-bit registers and a 32-bit based instruction set. Such designs were sometimes referred to as ''16/32-bit''.[2]")
				print (" ")
				print ("However, the opposite is often true for newer 32-bit designs. For example, the Pentium Pro processor is a 32-bit machine, ")
				print ("with 32-bit registers and instructions that manipulate 32-bit quantities, but the external address bus is 36 bits wide, ")
				print ("giving a larger address space than 4 GB, and the external data bus is 64 bits wide, primarily in order to permit a more ")
				print ("efficient prefetch of instructions and data.[3]")
				more1 = input("Architectures")
				print (" ")
				print ("Prominent 32-bit instruction set architectures used in general-purpose computing include the IBM System/360 and IBM System/370 ")
				print ("(which had 24-bit addressing) and the System/370-XA, ESA/370, and ESA/390 (which had 31-bit addressing), the DEC VAX, the") 
				print ("NS320xx, the Motorola 68000 family (the first two models of which had 24-bit addressing), the Intel IA-32 32-bit version ")
				print ("of the x86 architecture, and the 32-bit versions of the ARM,[4] SPARC, MIPS, PowerPC and PA-RISC architectures. 32-bit ")
				print ("instruction set architectures used for embedded computing include the 68000 family and ColdFire, x86, ARM, MIPS, PowerPC,") 
				print ("and Infineon TriCore architectures.")
				more1 = input("Applications")
				print (" ")
				print ("On the x86 architecture, a 32-bit application normally means software that typically (not necessarily) uses the 32-bit ")
				print ("linear address space (or flat memory model) possible with the 80386 and later chips. In this context, the term came about ")
				print ("because DOS, Microsoft Windows and OS/2[5] were originally written for the 8088/8086 or 80286, 16-bit microprocessors with a") 
				print ("segmented address space where programs had to switch between segments to reach more than 64 kilobytes of code or data. As") 
				print ("this is quite time-consuming in comparison to other machine operations, the performance may suffer. Furthermore, ")
				print ("programming with segments tend to become complicated; special far and near keywords or memory models had to be used ")
				print ("(with care), not only in assembly language but also in high level languages such as Pascal, compiled BASIC, Fortran, C, etc.")
				print (" ")
				print ("The 80386 and its successors fully support the 16-bit segments of the 80286 but also segments for 32-bit address offsets ")
				print ("(using the new 32-bit width of the main registers). If the base address of all 32-bit segments is set to 0, and segment ")
				print ("registers are not used explicitly, the segmentation can be forgotten and the processor appears as having a simple linear ")
				print ("32-bit address space. Operating systems like Windows or OS/2 provide the possibility to run 16-bit (segmented) programs ")
				print ("as well as 32-bit programs. The former possibility exists for backward compatibility and the latter is usually meant to be") 
				print ("used for new software development.")
				more1 = input("Images")
				print (" ")
				print ("In digital images/pictures, 32-bit usually refers to RGBA color space; that is, 24-bit truecolor images with an additional ")
				print ("8-bit alpha channel. Other image formats also specify 32 bits per pixel, such as RGBE.")
				print (" ")
				print ("In digital images, 32-bit sometimes refers to high-dynamic-range imaging (HDR) formats that use 32 bits per channel, a ")
				print ("total of 96 bits per pixel. 32-bit-per-channel images are used to represent values brighter than what sRGB color space ")
				print ("allows (brighter than white); these values can then be used to more accurately retain bright highlights when either ")
				print ("lowering the exposure of the image or when it is seen through a dark filter or dull reflection.")
				print (" ")
				print ("For example, a reflection in an oil slick is only a fraction of that seen in a mirror surface. HDR imagery allows for the ")
				print ("reflection of highlights that can still be seen as bright white areas, instead of dull grey shapes.")
				more1 = input("File formats")
				print ("A 32-bit file format is a binary file format for which each elementary information is defined on 32 bits (or 4 bytes). ")
				print ("An example of such a format is the Enhanced Metafile Format.") 
				print (" ")
				noMore = input("Press [ENTER] key to exit")
			if WikIDSelect == 20012:
				print ("In computer architecture, 36-bit integers, memory addresses, or other data units are those that are 36 bits (six six-bit ")
				print ("characters) wide. Also, 36-bit CPU and ALU architectures are those that are based on registers, address buses, or data buses") 
				print ("of that size.")
				print (" ")
				print ("Prior to the introduction of computers, the state of the art in precision scientific and engineering calculation was the ")
				print ("ten-digit, electrically powered, mechanical calculator, such as those manufactured by Friden, Marchant and Monroe. These ")
				print ("calculators had a column of keys for each digit, and operators were trained to use all their fingers when entering numbers,") 
				print ("so while some specialized calculators had more columns, ten was a practical limit. Computers, as the new competitor, had to ")
				print ("match that accuracy. Decimal computers sold in that era, such as the IBM 650 and the IBM 7070, had a word length of ten ")
				print ("digits, as did ENIAC, one of the earliest computers.")
				print (" ")
				print ("Early binary computers aimed at the same market therefore often used a 36-bit word length. This was long enough to represent ")
				print ("positive and negative integers to an accuracy of ten decimal digits (35 bits would have been the minimum). It also allowed ")
				print ("the storage of six alphanumeric characters encoded in a six-bit character code. Computers with 36-bit words included the ")
				print ("MIT Lincoln Laboratory TX-2, the IBM 701/704/709/7090/7094, the UNIVAC 1103/1103A/1105 and 1100/2200 series, the General") 
				print ("Electric GE-600/Honeywell 6000, the Digital Equipment Corporation PDP-6/PDP-10 (as used in the DECsystem-10/DECSYSTEM-20),") 
				print ("and the Symbolics 3600 series.")
				print (" ")
				print ("Smaller machines like the PDP-1/PDP-9/PDP-15 used 18-bit words, so a double word was 36 bits.")
				print (" ")
				print ("These computers had addresses 15 to 18 bits in length. The addresses referred to 36-bit words, so the computers were ")
				print ("limited to addressing between 32768 and 262144 words (196608 to 1572864 six-bit characters). The older 36-bit computers") 
				print ("were limited to a similar amount of physical memory as well. Architectures that survived evolved over time to support ")
				print ("larger virtual address spaces using memory segmentation or other mechanisms.")
				print (" ")
				print ("The common character packings included:")
				print (" ")
				print ("six 5.32-bit DEC Radix-50 characters, plus four spare bits")
				print ("six 6-bit Fieldata or IBM BCD characters (ubiquitous in early usage)")
				print ("six 6-bit ASCII characters, supporting the upper-case unaccented letters, digits, space, and most ASCII punctuation ")
				print ("characters. It was used on the PDP-6 and PDP-10 under the name sixbit.")
				print ("five 7-bit characters and 1 unused bit (the usual PDP-6/10 convention, called five-seven ASCII)[1][2]")
				print ("four 8-bit characters (7-bit ASCII plus 1 spare bit, or 8-bit EBCDIC), plus four spare bits")
				print ("four 9-bit characters[1][2] (the Multics convention).")
				print (" ")
				print ("Characters were extracted from words either using machine code shift and mask operations or with special-purpose hardware ")
				print ("supporting 6-bit, 9-bit, or variable-length characters. The Univac 1100/2200 used the partial word designator of the ")
				print ("instruction, the ''J'' field, to access characters. The GE-600 used special indirect words to access 6- and 9-bit characters.") 
				print ("the PDP-6/10 had special instructions to access arbitrary-length byte fields.")
				print (" ")
				print ("The standard C programming language requires that the size of the char data type be at least 8 bits,[3] and that all data ")
				print ("types other than bitfields have a size that is a multiple of the character size,[4] so standard C implementations on") 
				print ("36-bit machines would typically use 9-bit chars, although 12-bit, 18-bit, or 36-bit would also satisfy the requirements of the") 
				print ("standard.[5]")
				print (" ")
				print ("By the time IBM introduced System/360, scientific calculations had shifted to floating point and mechanical calculators were ")
				print ("no longer a competitor. The 360s also included instructions for variable length decimal arithmetic for commercial applications,") 
				print ("so the practice of using word lengths that were a power of two quickly became commonplace, though some 36-bit computer ")
				print ("systems are still sold as of 2014, e.g., the Unisys ClearPath Dorado series, which is the continuation of the UNIVAC ")
				print ("1100/2200 series of mainframe computers.")
				print (" ")
				print ("CompuServe was launched using 36-bit PDP-10 computers in the late 1960s. It continued using PDP-10 and DECSYSTEM-10-compatible ")
				print ("hardware and retired the service in the late 2000s.")
				more1 = input("Other uses in electronics")
				print (" ")
				print ("The LatticeECP3 FPGAs from Lattice Semiconductor include multiplier slices that can be configured to support the ")
				print ("multiplication of two 36-bit numbers.[6] The DSP block in Altera Stratix FPGAs can do 36-bit additions and ")
				print ("multiplications.[7] ")
				print (" ")
				noMore = input("Press [ENTER] key to exit")
			if WikIDSelect == 20013:
				print ("In computer architecture, 48-bit integers can represent 281,474,976,710,656 (248 or 2.814749767×1014) discrete values. ")
				print ("This allows an unsigned binary integer range of 0 through 281,474,976,710,655 (248 − 1) or a signed two's complement ")
				print ("range of -140,737,488,355,328 (-247) through 140,737,488,355,327 (247 − 1). A 48-bit memory address can directly ")
				print ("address every byte of 256 tebibytes of storage. 48-bit can refer to any other data unit that consumes 48 bits (6 octets)") 
				print ("in width. Examples include 48-bit CPU and ALU architectures are those that are based on registers, address buses, or data ")
				print ("buses of that size.")
				more1 = input("Word size")
				print (" ")
				print ("Computers with 48-bit words include the AN/FSQ-32, CDC 1604/upper-3000 series, BESM-6, Ferranti Atlas, and Burroughs ")
				print ("large systems (B5xxx-B8xxx, most of which additionally had a 3- or 4-bit type tag).")
				more1 = input("Addressing")
				print (" ")
				print ("The IBM System/38 and the AS/400, in its CISC variants, are 48-bit addressing systems. The address size used in logical ")
				print ("block addressing was increased to 48 bits with the introduction of ATA-6. The Ext4 file system physically limits the file ")
				print ("block count to 48 bits.")
				print (" ")
				print ("The minimal implementation of the x86-64 architecture provides 48-bit addressing encoded into 64 bits; future versions ")
				print ("of the architecture can expand this without breaking properly written applications.")
				print (" ")
				print ("The media access control address (MAC address) of a computer uses a 48-bit address space. This can be changed to 64-bit") 
				print ("addressing.")
				more1 = input("Images")
				print ("See also: Deep color ")
				print (" ")
				print ("In digital images, 48 bits per pixel, or 16 bits per each color channel (red, green and blue), is used for accurate ")
				print ("processing. For the human eye, it is almost impossible to see any difference between such an image and a 24-bit image,")
				print ("[citation needed] but the existence of more shades of each of the three primary colors (65,536 as opposed to 256) means") 
				print ("that more operations can be performed on the image without risk of noticeable banding or posterization.")
				print (" ")
				print ("vte")
				print (" ")
				more1 = input ("Processor technologies")
				print ("Models")
				print (" ")
				more1 = input("Turing machine")
				print ("Universal Post–Turing Quantum Belt machine Stack machine Finite-state machine")
				print ("with datapath Hierarchical Queue automaton Register machines")
				print ("Counter Pointer Random-access Random-access stored program")
				print (" ")
				more1 = input("Architecture")	
				print (" ")
				print ("Von Neumann Harvard")
				print ("modified Dataflow Transport-triggered Cellular Endianness Memory access")
				print ("NUMA HUMA Load/store Register/memory Cache hierarchy Memory hierarchy")
				print ("Virtual memory Secondary storage Heterogeneous Fabric Multiprocessing Cognitive Neuromorphic")
				print (" ")
				more1 = input("Instruction set")
				print ("architectures	")
				more1 = input("Types")	
				print (" ")
				print ("CISC RISC Application-specific EDGE")
				print ("TRIPS VLIW")
				print ("EPIC MISC OISC NISC ZISC comparison")
				more1 = input("addressing modes")
				print (" ")
				print ("x86 ARM MIPS Power")
				print ("PowerPC SPARC Itanium Unicore MicroBlaze RISC-V others")
				print (" ")
				more1 = input("Execution")	
				print ("Instruction pipelining	")
				print ("Pipeline stall Operand forwarding Classic RISC pipeline")
				more1 = input("Hazards")	
				print (" ")
				print ("Data dependency Structural Control False sharing")
				print (" ")
				print ("Out-of-order	 ")
				more1 = input("Tomasulo algorithm")
				print ("Reservation station Re-order buffer Register renaming")
				print (" ")
				more1 = input("Speculative	")
				print (" ")
				print ("Branch prediction Memory dependence prediction")
				print (" ")
				more1 = input("Parallelism")	
				print ("Level	")
				print (" ")
				print ("Bit")
				print ("Bit-serial Word Instruction Pipelining")
				print ("Scalar Superscalar Task")
				print ("Thread Process Data")
				print ("Vector Memory Distributed")
				print (" ")
				more1 = input("Multithreading")	
				print (" ")
				print ("Temporal Simultaneous")
				print ("Hyperthreading Speculative Preemptive Cooperative")
				print (" ")
				more1 = input("Flynn's taxonomy")			
				print (" ")
				print ("SISD SIMD")
				print ("SWAR SIMT MISD MIMD")
				print ("SPMD")
				print (" ")
				more1 = input("Processor")
				print ("Performance	")
				print (" ")
				print ("Transistor count Instructions per cycle (IPC)")
				print ("Cycles per instruction (CPI) Instructions per second (IPS) Floating-point operations per second (FLOPS) Transactions per") 
				print ("second (TPS) Synaptic updates per second (SUPS) Performance per watt (PPW) Cache performance metrics Computer performance") 
				print ("by orders of magnitude")
				print (" ")
				more1 = input("Types")	
				print (" ")
				print ("Central processing unit (CPU) Graphics processing unit (GPU)")
				print ("GPGPU Vector Barrel Stream Coprocessor ASIC FPGA CPLD Multi-chip module (MCM) System in package (SiP)")
				print (" ")
				more1 = input("By application")	
				print (" ")
				print ("Microprocessor Microcontroller Mobile Notebook Ultra-low-voltage ASIP")
				print (" ")
				more1 = input ("Systems")
				print ("on Chip	")
				print (" ")
				print ("System-on-Chip (SoC) Multiprocessor (MPSoC) Programmable (PSoC) Network-on-Chip (NoC)")
				print (" ")
				more1 = input("Hardware")
				print ("accelerators")	
				print (" ")
				print ("AI accelerator Vision processing unit (VPU) Physics processing unit (PPU) Digital signal processor (DSP) Tensor processing ")
				print ("unit (TPU) Secure cryptoprocessor Network processor Baseband processor")
				print (" ")
				more1 = input("Word size")	
				print (" ")
				print ("1-bit 2-bit 4-bit 8-bit 16-bit 32-bit 48-bit 64-bit 128-bit 256-bit 512-bit others")
				print ("variable")
				print (" ")
				more1 = input ("Core count")	
				print (" ")
				print ("Single-core Multi-core Manycore Heterogeneous architecture")
				print (" ")
				more1 = input("Components")	
				print (" ")
				print ("Core Cache")
				print ("CPU cache replacement policies coherence Bus Clock rate FIFO")
				print (" ")
				more1 = input("Functional units")	
				print (" ")
				print ("Arithmetic logic unt (ALU) Address generation unit (AGU) Floating-point unit (FPU) Memory management unit")
				print ("Load–store unit Translation lookaside buffer (TLB)")
				print (" ")
				more1 = input("Logic")	
				print (" ")
				print ("Combinational Sequential Glue Logic Gate")
				print ("Quantum Array")
				print (" ")
				more1 = input("Registers")	
				print (" ")
				print ("Processor register Register file Memory buffer Program counter Stack")
				print (" ")
				more1 = input("Control unit")	
				print (" ")
				print ("Instruction unit Data buffer Write buffer Microcode ROM Counter")
				print (" ")
				more1 = input("Datapath")	
				print (" ")
				print ("Multiplexer Demultiplexer Adder Multiplier")
				print ("CPU Binary decoder")
				print ("Address decoder Sum addressed decoder Barrel shifter")
				print (" ")
				more1 = input("Circuitry")			
				print (" ")
				print ("Integrated circuit")
				print ("3D Mixed signal Power management Boolean Digital Analog Quantum Switch")
				print (" ")
				more1 = input("Power")
				print ("management	")
				print (" ")
				print ("PMU APM ACPI Dynamic frequency scaling Dynamic voltage scaling Clock gating Performance per watt (PPW) ")
				print (" ")
				more1 = input("Related")	
				print (" ")
				print ("History of general-purpose CPUs Microprocessor chronology Processor design Digital electronics Hardware security module")
				print (" ")
				print (" ")
				print (" ")
				noMore = input("Press [ENTER] key to exit")
			if WikIDSelect == 20014:
				print ("In computer architecture, 60-bit integers, memory addresses, or other data units are those that are 60 bits wide. Also, ")
				print ("60-bit CPU and ALU architectures are those that are based on registers, address buses, or data buses of that size.")
				print (" ")
				print ("Computers with 60-bit words include the CDC 6000 series, the CDC 7600, and some of the CDC Cyber series. ")
				print (" ")
				noMore = input("Press [ENTER] key to exit")
			if WikIDSelect == 20015:
				print ("In computer architecture, 64-bit computing is the use of processors that have datapath widths, integer size, and memory ")
				print ("address widths of 64 bits (eight octets). Also, 64-bit computer architectures for central processing units (CPUs) and ")
				print ("arithmetic logic units (ALUs) are those that are based on processor registers, address buses, or data buses of that size. ")
				print ("From the software perspective, 64-bit computing means the use of code with 64-bit virtual memory addresses. However, not all ")
				print ("64-bit instruction sets support full 64-bit virtual memory addresses; x86-64 and ARMv8, for example, support only 48 bits of") 
				print ("virtual address, with the remaining 16 bits of the virtual address required to be all 0's or all 1's, and several 64-bit ")
				print ("instruction sets support fewer than 64 bits of physical memory address.")
				print (" ")
				print ("The term 64-bit describes a generation of computers in which 64-bit processors are the norm. 64 bits is a word size ")
				print ("that defines certain classes of computer architecture, buses, memory and CPUs, and by extension the software that ")
				print ("runs on them. 64-bit CPUs have been used in supercomputers since the 1970s (Cray-1, 1975) and in reduced instruction ")
				print ("set computing (RISC) based workstations and servers since the early 1990s, notably the MIPS R4000, R8000, and R10000,") 
				print ("the DEC Alpha, the Sun UltraSPARC, and the IBM RS64 and POWER3 and later POWER microprocessors. In 2003, 64-bit") 
				print ("CPUs were introduced to the (formerly 32-bit) mainstream personal computer market in the form of x86-64 ")
				print ("processors and the PowerPC G5, and were introduced in 2012[1] into the ARM architecture targeting smartphones ")
				print ("and tablet computers, first sold on September 20, 2013, in the iPhone 5S powered by the ARMv8-A Apple A7 system on a chip (SoC).")
				print (" ")
				print ("A 64-bit register can store 264 (over 18 quintillion or 1.8×1019) different values. The range of integer values that can be") 
				print ("stored in 64 bits depends on the integer representation used. With the two most common representations, the range is 0 ")
				print ("through 18,446,744,073,709,551,615 (264 − 1) for representation as an (unsigned) binary number, and −9,223,372,036,854,775,808 ")
				print ("(−263) through 9,223,372,036,854,775,807 (263 − 1) for representation as two's complement. Hence, a processor with ")
				print ("64-bit memory addresses can directly access 264 bytes (=16 exabytes) of byte-addressable memory.")
				print (" ")
				print ("With no further qualification, a 64-bit computer architecture generally has integer and addressing processor ")
				print ("registers that are 64 bits wide, allowing direct support for 64-bit data types and addresses. However, a CPU ")
				print ("might have external data buses or address buses with different sizes from the registers, even larger ")
				print ("(the 32-bit Pentium had a 64-bit data bus, for instance[2]). The term may also refer to the size of ")
				print ("low-level data types, such as 64-bit floating-point numbers.")
				more1 = input("Contents")
				print (" ")
				print ("1 Architectural implications")
				print ("2 History")
				print ("3 Limits of processors")
				print ("4 64-bit data timeline")
				print ("5 64-bit address timeline")
				print ("6 64-bit operating system timeline")
				print ("7 64-bit applications")
				print ("7.1 32-bit vs 64-bit")
				print ("7.2 Pros and cons")
				print ("7.3 Software availability")
				print ("8 64-bit data models")
				print ("9 Current 64-bit architectures")
				print ("10 See also")
				print ("11 Notes")
				print ("12 References")
				print ("13 External links")
				print (" ")
				more1 = input("Architectural implications")
				print (" ")
				print ("Processor registers are typically divided into several groups: integer, floating-point, single instruction, multiple data ")
				print ("(SIMD), control, and often special registers for address arithmetic which may have various uses and names such as address, ")
				print ("index, or base registers. However, in modern designs, these functions are often performed by more general purpose integer ")
				print ("registers. In most processors, only integer or address-registers can be used to address data in memory; the other types ")
				print ("of registers cannot. The size of these registers therefore normally limits the amount of directly addressable memory, ")
				print ("even if there are registers, such as floating-point registers, that are wider.")
				print (" ")
				print ("Most high performance 32-bit and 64-bit processors (some notable exceptions are older or embedded ARM architecture ")
				print ("(ARM) and 32-bit MIPS architecture (MIPS) CPUs) have integrated floating point hardware, which is often, but not")
				print ("always, based on 64-bit units of data. For example, although the x86//x87 architecture has instructions able to ")
				print ("load and store 64-bit (and 32-bit) floating-point values in memory, the internal floating point data and register format ")
				print ("is 80 bits wide, while the general-purpose registers are 32 bits wide. In contrast, the 64-bit Alpha family uses a") 
				print ("64-bit floating-point data and register format, and 64-bit integer registers.")
				more1 = input("History")
				print (" ")
				print ("Many computer instruction sets are designed so that a single integer register can store the memory address to any ")
				print ("location in the computer's physical or virtual memory. Therefore, the total number of addresses to memory is often") 
				print ("determined by the width of these registers. The IBM System//360 of the 1960s was an early 32-bit computer; it ")
				print ("had 32-bit integer registers, although it only used the low order 24 bits of a word for addresses, ")
				print ("resulting in a 16 MiB [16 × 10242 bytes] address space. 32-bit superminicomputers, such as the DEC VA")
				print ("became common in the 1970s, and 32-bit microprocessors, such as the Motorola 68000 family and the 32-bit members of the") 
				print ("x86 family starting with the Intel 80386, appeared in the mid-1980s, making 32 bits something of a de facto consensus as a")			
				print ("convenient register size.")
				print (" ")
				print ("A 32-bit address register meant that 232 addresses, or 4 GiB of random-access memory (RAM), could be referenced.") 
				print ("When these architectures were devised, 4 GB of memory was so far beyond the typical amounts (4 MB) in ")
				print ("installations, that this was considered to be enough headroom for addressing. 4.29 billion addresses were ")
				print ("considered an appropriate size to work with for another important reason: 4.29 billion integers are enough to assign") 
				print ("unique references to most entities in applications like databases.")
				print (" ")
				print ("Some supercomputer architectures of the 1970s and 1980s, such as the Cray-1,[3] used registers up to 64 bits wide, and ")
				print ("supported 64-bit integer arithmetic, although they did not support 64-bit addressing. In the mid-1980s, Intel i860[4] ")
				print ("development began culminating in a (too late[5] for Windows NT) 1989 release; the i860 had 32-bit integer registers and ")
				print ("32-bit addressing, so it was not a fully 64-bit processor, although its graphics unit supported 64-bit integer arithmetic.[6]") 
				print ("However, 32 bits remained the norm until the early 1990s, when the continual reductions in the cost of memory led to") 
				print ("installations with amounts of RAM approaching 4 GB, and the use of virtual memory spaces exceeding the 4 GB ")
				print ("ceiling became desirable for handling certain types of problems. In response, MIPS and DEC developed 64-bit microprocessor")			
				print ("architectures, initially for high-end workstation and server machines. By the mid-1990s, HAL Computer Systems, Sun ")
				print ("Microsystems, IBM, Silicon Graphics, and Hewlett Packard had developed 64-bit architectures for their workstation and ")
				print ("server systems. A notable exception to this trend were mainframes from IBM, which then used 32-bit data and 31-bit address") 
				print ("sizes; the IBM mainframes did not include 64-bit processors until 2000. During the 1990s, several low-cost 64-bit ")
				print ("microprocessors were used in consumer electronics and embedded applications. Notably, the Nintendo 64[7] and the PlayStation") 
				print ("2 had 64-bit microprocessors before their introduction in personal computers. High-end printers, network equipment, and ")
				print ("industrial computers, also used 64-bit microprocessors, such as the Quantum Effect Devices R5000.[citation needed] 64-bit ")
				print ("computing started to drift down to the personal computer desktop from 2003 onward, when some models in Apple's Macintosh ")
				print ("lines switched to PowerPC 970 processors (termed G5 by Apple), and AMD released its first 64-bit x86-64 processor.")
				more1 = input("Limits of processors")
				print (" ")
				print ("This section needs additional citations for verification. Please help improve this article by adding citations to ")
				print ("reliable sources. Unsourced material may be challenged and removed. (January 2010) (Learn how and when to remove ")
				print ("this template message)")
				print (" ")
				print ("In principle, a 64-bit microprocessor can address 16 EiBs (16 × 10246 = 264 = 18,446,744,073,709,551,616 bytes, or ")
				print ("about 18.4 exabytes) of memory. However, not all instruction sets, and not all processors implementing those instruction") 
				print ("sets, support a full 64-bit virtual or physical address space.")
				print (" ")
				print ("The x86-64 architecture (as of 2016) allows 48 bits for virtual memory and, for any given processor, up to 52 bits for ")
				print ("physical memory.[8][9] These limits allow memory sizes of 256 TiB (256 × 10244 bytes) and 4 PiB (4 × 10245 bytes), respectively.")
				print ("A PC cannot currently contain 4 pebibytes of memory (due to the physical size of the memory chips), but AMD envisioned ")
				print ("large servers, shared memory clusters, and other uses of physical address space that might approach this in the") 
				print ("foreseeable future. Thus the 52-bit physical address provides ample room for expansion while not incurring the ")
				print ("cost of implementing full 64-bit physical addresses. Similarly, the 48-bit virtual address space was designed to ")
				print ("provide more than 65,000 (216) times the 32-bit limit of 4 GiB (4 × 10243 bytes), allowing room for later ")
				print ("expansion and incurring no overhead of translating full 64-bit addresses.")
				print (" ")
				print ("The Power ISA v3.0 allows 64 bits for an effective address, mapped to a segmented address with between 65 and 78 bits ")
				print ("allowed, for virtual memory, and, for any given processor, up to 60 bits for physical memory.[10]")
				print (" ")
				print ("The Oracle SPARC Architecture 2015 allows 64 bits for virtual memory and, for any given processor, between 40 and 56 ")
				print ("bits for physical memory.[11]")
				print (" ")
				print ("The ARM AArch64 Virtual Memory System Architecture allows 48 bits for virtual memory and, for any given processor, ")
				print ("from 32 to 48 bits for physical memory.[12]")
				more1 = input("64-bit data timeline")
				print (" ")
				print ("1961")
				print ("IBM delivers the IBM 7030 Stretch supercomputer, which uses 64-bit data words and 32- or 64-bit instruction words.")
				print ("1974")
				print ("Control Data Corporation launches the CDC Star-100 vector supercomputer, which uses a 64-bit word architecture ")
				print ("(prior CDC systems were based on a 60-bit architecture).")
				print ("International Computers Limited launches the ICL 2900 Series with 32-bit, 64-bit, and 128-bit two's complement integers;") 
				print ("64-bit and 128-bit floating point; 32-bit, 64-bit, and 128-bit packed decimal and a 128-bit accumulator register. The ")
				print ("architecture has survived through a succession of ICL and Fujitsu machines. The latest is the Fujitsu Supernova, which") 
				print ("emulates the original environment on 64-bit Intel processors.")
				print ("1976")
				print ("Cray Research delivers the first Cray-1 supercomputer, which is based on a 64-bit word architecture and will form the ")
				print ("basis for later Cray vector supercomputers.")
				print ("1983")
				print ("Elxsi launches the Elxsi 6400 parallel minisupercomputer. The Elxsi architecture has 64-bit data registers but a 32-bit ")
				print ("address space.")
				print ("1989")
				print ("Intel introduces the Intel i860 reduced instruction set computing (RISC) processor. Marketed as a ''64-Bit Microprocessot'', ")
				print ("it had essentially a 32-bit architecture, enhanced with a 3D graphics unit capable of 64-bit integer operations.[13]")
				print ("1993")
				print ("Atari introduces the Atari Jaguar video game console, which includes some 64-bit wide data paths in its architecture.[14]")
				print (" ")
				more1 = input("64-bit address timeline")
				print (" ")
				print ("1991")
				print ("MIPS Computer Systems produces the first 64-bit microprocessor, the R4000, which implements the MIPS III architecture, ")
				print ("the third revision of its MIPS architecture.[15] The CPU is used in SGI graphics workstations starting with the IRIS Crimson.")
				print ("Kendall Square Research deliver their first KSR1 supercomputer, based on a proprietary 64-bit RISC processor architecture ")
				print ("running OSF//1.")
				print ("1992")
				print ("Digital Equipment Corporation (DEC) introduces the pure 64-bit Alpha architecture which was born from the Prism project.[16]")
				print ("1994")
				print ("Intel announces plans for the 64-bit IA-64 architecture (jointly developed with Hewlett-Packard) as a successor to its ")
				print ("32-bit IA-32 processors. A 1998 to 1999 launch date was targeted.")
				print ("1995")
				print ("Sun launches a 64-bit SPARC processor, the UltraSPARC.[17] Fujitsu-owned HAL Computer Systems launches workstations based ")
				print ("on a 64-bit CPU, HAL's independently designed first-generation SPARC64. IBM releases the A10 and A30 microprocessors, ")
				print ("the first 64-bit PowerPC AS processors.[18] IBM also releases a 64-bit AS//400 system upgrade, which can convert the ")
				print ("operating system, database and applications.")
				print ("1996")
				print ("Nintendo introduces the Nintendo 64 video game console, built around a low-cost variant of the MIPS R4000. HP") 
				print ("releases the first implementation of its 64-bit PA-RISC 2.0 architecture, the PA-8000.[19]")
				print ("1998")
				print ("IBM releases the POWER3 line of full-64-bit PowerPC//POWER processors.[20]")
				print ("1999")
				print ("Intel releases the instruction set for the IA-64 architecture. AMD publicly discloses its set of 64-bit extensions to IA-32, ")
				print ("called x86-64 (later branded AMD64).")
				print ("2000")
				print ("IBM ships its first 64-bit z//Architecture mainframe, the zSeries z900. z//Architecture is a 64-bit version of the 32-bit ESA//390 ")
				print ("architecture, a descendant of the 32-bit System//360 architecture.")
				print ("2001")
				print ("Intel ships its IA-64 processor line, after repeated delays in getting to market. Now branded Itanium and targeting ")
				print ("high-end servers, sales fail to meet expectations.")
				print ("2003")
				print ("AMD introduces its Opteron and Athlon 64 processor lines, based on its AMD64 architecture which is the first x86-based ")
				print ("64-bit processor architecture. Apple also ships the 64-bit ''G5'' PowerPC 970 CPU produced by IBM. Intel maintains ")
				print ("that its Itanium chips would remain its only 64-bit processors.")
				print ("2004")
				print ("Intel, reacting to the market success of AMD, admits it has been developing a clone of the AMD64 extensions named IA-32e") 
				print ("(later renamed EM64T, then yet again renamed to Intel 64). Intel ships updated versions of its Xeon and Pentium 4 ")
				print ("processor families supporting the new 64-bit instruction set.")
				print ("VIA Technologies announces the Isaiah 64-bit processor.[21]")
				print ("2006")
				print ("Sony, IBM, and Toshiba begin manufacturing the 64-bit Cell processor for use in the PlayStation 3, servers, workstations,") 
				print ("and other appliances. Intel released Core 2 Duo as the first mainstream x86-64 processor for its mobile, desktop, and") 
				print ("workstation line. Prior 64-bit extension processor lines were not widely available in the consumer retail market ")
				print ("(most of 64-bit Pentium 4//D were OEM), 64-bit Pentium 4, Pentium D, and Celeron were not into mass production until late") 
				print ("2006 due to poor yield issue (most of good yield wafers were targeted at server and mainframe while mainstream still") 
				print ("remain 130 nm 32-bit processor line until 2006) and soon became low end after Core 2 debuted. AMD released their") 
				print ("first 64-bit mobile processor and manufactured in 90 nm.")
				print ("2011")
				print ("ARM Holdings announces ARMv8-A, the first 64-bit version of the ARM architecture.[22]")
				print ("2012")
				print ("ARM Holdings announced their Cortex-A53 and Cortex-A57 cores, their first cores based on their 64-bit architecture, on")
				print ("30 October 2012.[1][23]")
				print ("2013")
				print ("Apple announces the iPhone 5S, the first 64‑bit smartphone, which uses their A7 ARMv8-A-based system-on-a-chip.")
				print ("2014")
				print ("Google announces the Nexus 9, the first Android device to run on a 64-bit Tegra K1 processor.")
				print (" ")
				more1 = input("64-bit operating system timeline")
				print (" ")
				print ("1985")
				print ("Cray releases UNICOS, the first 64-bit implementation of the Unix operating system.[24]")
				print ("1993")
				print ("DEC releases the 64-bit DEC OSF//1 AXP Unix-like operating system (later renamed Tru64 UNIX) for its systems based on the ")
				print ("Alpha architecture.")
				print ("1994")
				print ("Support for the R8000 processor is added by Silicon Graphics to the IRIX operating system in release 6.0.")
				print ("1995")
				print ("DEC releases OpenVMS 7.0, the first full 64-bit version of OpenVMS for Alpha. First 64-bit Linux distribution for the") 
				print ("Alpha architecture is released.[25]")
				print ("1996")
				print ("Support for the R4x00 processors in 64-bit mode is added by Silicon Graphics to the IRIX operating system in release 6.2.")
				print ("1998")
				print ("Sun releases Solaris 7, with full 64-bit UltraSPARC support.")
				print ("2000")
				print ("IBM releases z//OS, a 64-bit operating system descended from MVS, for the new zSeries 64-bit mainframes; 64-bit Linux on z ")
				print ("Systems follows the CPU release almost immediately.")
				print ("2001")
				print ("Linux becomes the first OS kernel to fully support x86-64 (on a simulator, as no x86-64 processors had been released yet).[26]")
				print ("2001")
				print ("Microsoft releases Windows XP 64-Bit Edition for the Itanium's IA-64 architecture, although it was able to run 32-bit") 
				print ("applications through an execution layer.")
				print ("2003")
				print ("Apple releases its Mac OS X 10.3 ''Panther'' operating system which adds support for native 64-bit integer arithmetic on ")
				print ("PowerPC 970 processors.[27] Several Linux distributions release with support for AMD64. FreeBSD releases with support for AMD64.")
				print ("2005")
				print ("On January 4, Microsoft discontinues Windows XP 64-Bit Edition, as no PCs with IA-64 processors had been available since the previous")
				print ("September, and announces that it is developing x86-64 versions of Windows to replace it.[28] On January 31, ")
				print ("Sun releases Solaris 10 with support for AMD64 and EM64T processors. On April 29, Apple releases Mac OS X 10.4 ''Tiger'' ")
				print ("which provides limited support for 64-bit command-line applications on machines with PowerPC 970 processors; later versions ")
				print ("for Intel-based Macs supported 64-bit command-line applications on Macs with EM64T processors. On April 30, Microsoft releases ")
				print ("Windows XP Professional x64 Edition and Windows Server 2003 x64 Edition for AMD64 and EM64T processors.[29]")
				print ("2006")
				print ("Microsoft releases Windows Vista, including a 64-bit version for AMD64//EM64T processors that retains 32-bit compatibility. ")
				print ("In the 64-bit version, all Windows applications and components are 64-bit, although many also have their 32-bit versions ")
				print ("included for compatibility with plug-ins.")
				print ("2007")
				print ("Apple releases Mac OS X 10.5 ''Leopard'', which fully supports 64-bit applications on machines with PowerPC 970 or EM64T ")
				print ("processors.")
				print ("2009")
				print ("Microsoft releases Windows 7, which, like Windows Vista, includes a full 64-bit version for AMD64//Intel 64 processors; most")
				print ("new computers are loaded by default with a 64-bit version. It also releases Windows Server 2008 R2, which is the first 64-bit")			
				print ("only operating system released by Microsoft. Apple releases Mac OS X 10.6, ''Snow Leopard'', which ships with a 64-bit kernel ")
				print ("for AMD64//Intel64 processors, although only certain recent models of Apple computers will run the 64-bit kernel by default. ")
				print ("Most applications bundled with Mac OS X 10.6 are now also 64-bit.[27]")
				print ("2011")
				print ("Apple releases Mac OS X 10.7, ''Lion'', which runs the 64-bit kernel by default on supported machines. Older machines that ")
				print ("are unable to run the 64-bit kernel run the 32-bit kernel, but, as with earlier releases, can still run 64-bit applications;") 
				print ("Lion does not support machines with 32-bit processors. Nearly all applications bundled with Mac OS X 10.7 are now also ")
				print ("64-bit, including iTunes.")
				print ("2013")
				print ("Apple releases iOS 7, which, on machines with AArch64 processors, has a 64-bit kernel that supports 64-bit applications.")
				print ("2014")
				print ("Google releases Android Lollipop, the first version of the Android operating system with support for 64-bit processors.")
				print ("2017")
				print ("Apple releases iOS 11, supporting only machines with AArch64 processors. It has a 64-bit kernel that only supports ")
				print ("64-bit applications. 32-bit applications are no longer compatible.")
				print (" ")
				more1 = input("64-bit applications")
				print ("32-bit vs 64-bit")
				print (" ")
				print ("A change from a 32-bit to a 64-bit architecture is a fundamental alteration, as most operating systems must be ")
				print ("extensively modified to take advantage of the new architecture, because that software has to manage the actual ")
				print ("memory addressing hardware.[30] Other software must also be ported to use the new abilities; older 32-bit software ")
				print ("may be supported either by virtue of the 64-bit instruction set being a superset of the 32-bit instruction set, so ")
				print ("that processors that support the 64-bit instruction set can also run code for the 32-bit instruction set, or through ")
				print ("software emulation, or by the actual implementation of a 32-bit processor core within the 64-bit processor, as with") 
				print ("some Itanium processors from Intel, which included an IA-32 processor core to run 32-bit x86 applications. ")
				print ("The operating systems for those 64-bit architectures generally support both 32-bit and 64-bit applications.[31]")
				print (" ")
				print ("One significant exception to this is the AS//400, software for which is compiled into a virtual instruction set ")
				print ("architecture (ISA) called Technology Independent Machine Interface (TIMI); TIMI code is then translated to native") 
				print ("machine code by low-level software before being executed. The translation software is all that must be rewritten to move the") 
				print ("full OS and all software to a new platform, as when IBM transitioned the native instruction set for AS//400 from the older") 
				print ("32//48-bit IMPI to the newer 64-bit PowerPC-AS, codenamed Amazon. The IMPI instruction set was quite different from even") 
				print ("32-bit PowerPC, so this transition was even bigger than moving a given instruction set from 32 to 64 bits.")
				print (" ")
				print ("On 64-bit hardware with x86-64 architecture (AMD64), most 32-bit operating systems and applications can run with no ")
				print ("compatibility issues. While the larger address space of 64-bit architectures makes working with large data sets in ")
				print ("applications such as digital video, scientific computing, and large databases easier, there has been considerable ")
				print ("debate on whether they or their 32-bit compatibility modes will be faster than comparably priced 32-bit systems for other tasks.")
				print (" ")
				print ("A compiled Java program can run on a 32- or 64-bit Java virtual machine with no modification. The lengths and precision of all")
				print ("the built-in types, such as char, short, int, long, float, and double, and the types that can be used as array indices, are ")
				print ("specified by the standard and are not dependent on the underlying architecture. Java programs that run on a 64-bit Java") 
				print ("virtual machine have access to a larger address space.[32]")
				print (" ")
				print ("Speed is not the only factor to consider in comparing 32-bit and 64-bit processors. Applications such as multi-tasking, ")
				print ("stress testing, and clustering – for high-performance computing (HPC) – may be more suited to a 64-bit architecture when ")
				print ("deployed appropriately. For this reason, 64-bit clusters have been widely deployed in large organizations, ")
				print ("such as IBM, HP, and Microsoft.")
				print (" ")
				more1 = input("Summary:")
				print (" ")
				print ("A 64-bit processor performs best with 64-bit software.")
				print ("A 64-bit processor has backward compatibility and will handle most 32-bit software.")
				print ("A 32-bit processor is incompatible with 64-bit software.")
				print (" ")
				more1 = input("Pros and cons")
				print (" ")
				print ("A common misconception is that 64-bit architectures are no better than 32-bit architectures unless the computer has more ")
				print ("than 4 GiB of random-access memory.[33] This is not entirely true:")
				print (" ")
				print ("Some operating systems and certain hardware configurations limit the physical memory space to 3 GiB on IA-32 systems, ")
				print ("due to much of the 3–4 GiB region being reserved for hardware addressing; see 3 GB barrier; 64-bit architectures can ")
				print ("address far more than 4 GiB. However, IA-32 processors from the Pentium Pro onward allow a 36-bit physical memory ")
				print ("address space, using Physical Address Extension (PAE), which gives a 64 GiB physical address range, of which up to ")
				print ("62 GiB may be used by main memory; operating systems that support PAE may not be limited to 4 GiB of physical memory,") 
				print ("even on IA-32 processors. However, drivers and other kernel mode software, more so older versions, may be ")
				print ("incompatible with PAE; this has been cited as the reason for 32-bit versions of Microsoft Windows being ")
				print ("limited to 4 GiB of physical RAM[34] (although the validity of this explanation has been disputed[35]).")
				print ("Some operating systems reserve portions of process address space for OS use, effectively reducing the total address space ")
				print ("available for mapping memory for user programs. For instance, 32-bit Windows reserves 1 or 2 GiB (depending on the settings) ")
				print ("of the total address space for the kernel, which leaves only 3 or 2 GiB (respectively) of the address space available for user ")
				print ("mode. This limit is much higher on 64-bit operating systems.")
				print ("Memory-mapped files are becoming more difficult to implement in 32-bit architectures as files of over 4 GiB become more common;") 
				print ("such large files cannot be memory-mapped easily to 32-bit architectures, as only part of the file can be mapped into the ")
				print ("address space at a time, and to access such a file by memory mapping, the parts mapped must be swapped into and out of the")
				print ("address space as needed. This is a problem, as memory mapping, if properly implemented by the OS, is one of the most efficient") 
				print ("disk-to-memory methods.")
				print ("Some 64-bit programs, such as encoders, decoders and encryption software, can benefit greatly from 64-bit registers,[citation needed]")
				print ("while the performance of other programs, such as 3D graphics-oriented ones, remains unaffected when switching from a ")
				print ("32-bit to a 64-bit environment.[citation needed]")
				print ("Some 64-bit architectures, such as x86-64, support more general-purpose registers than their 32-bit counterparts ")
				print ("(although this is not due specifically to the word length). This leads to a significant speed increase for tight ")
				print ("loops since the processor does not have to fetch data from the cache or main memory if the data can ")
				print ("fit in the available registers.")
				print (" ")
				print ("Example in C:")
				print (" ")
				print ("int a, b, c, d, e;")
				print ("for (a=0; a<100; a++)")
				print ("{")
				print ("b = a;")
				print ("c = b;")
				print ("d = c;")
				print ("e = d;")
				print ("}")
				print (" ")
				print ("If a processor only has the ability to keep two or three values or variables in registers, it would need to move some values") 
				print ("between memory and registers to be able to process variables d and e also; this is a process that takes many CPU cycles. ")
				print ("A processor that is able to hold all values and variables in registers can loop through them with no need to move data ")
				print ("between registers and memory for each iteration. This behavior can easily be compared with virtual memory, although any ")
				print ("effects are contingent on the compiler.")
				print (" ")
				print ("The main disadvantage of 64-bit architectures is that, relative to 32-bit architectures, the same data occupies more")
				print ("space in memory (due to longer pointers and possibly other types, and alignment padding). This increases the memory") 
				print ("requirements of a given process and can have implications for efficient processor cache use. Maintaining a") 
				print ("partial 32-bit model is one way to handle this, and is in general reasonably effective. For example, the") 
				print ("z//OS operating system takes this approach, requiring program code to reside in 31-bit address spaces")
				print ("(the high order bit is not used in address calculation on the underlying hardware platform) while data") 
				print ("objects can optionally reside in 64-bit regions. Not all such applications require a large address") 
				print ("space or manipulate 64-bit data items, so these applications do not benefit from these features.")
				more1 = input("Software availability")
				print (" ")
				print ("x86-based 64-bit systems sometimes lack equivalents of software that is written for 32-bit architectures. The most severe ")
				print ("problem in Microsoft Windows is incompatible device drivers for obsolete hardware. Most 32-bit application software can ")
				print ("run on a 64-bit operating system in a compatibility mode, also termed an emulation mode, e.g., Microsoft WoW64 Technology ")
				print ("for IA-64 and AMD64. The 64-bit Windows Native Mode[36] driver environment runs atop 64-bit NTDLL.DLL, which cannot call") 
				print ("32-bit Win32 subsystem code (often devices whose actual hardware function is emulated in user mode software, like ")
				print ("Winprinters). Because 64-bit drivers for most devices were unavailable until early 2007 (Vista x64), using a 64-bit ")
				print ("version of Windows was considered a challenge. However, the trend has since moved toward 64-bit computing, more so as ")
				print ("memory prices dropped and the use of more than 4 GB of RAM increased. Most manufacturers started to provide both 32-bit ")
				print ("and 64-bit drivers for new devices, so unavailability of 64-bit drivers ceased to be a problem. 64-bit drivers were not ")
				print ("provided for many older devices, which could consequently not be used in 64-bit systems.")
				print (" ")
				print ("Driver compatibility was less of a problem with open-source drivers, as 32-bit ones could be modified for 64-bit use. ")
				print ("Support for hardware made before early 2007, was problematic for open-source platforms,[citation needed] due to the ")
				print ("relatively small number of users.")
				print (" ")
				print ("64-bit versions of Windows cannot run 16-bit software. However, most 32-bit applications will work well. ")
				print ("64-bit users are forced to install a virtual machine of a 16- or 32-bit operating system to run 16-bit applications.[37]")
				print (" ")
				print ("Mac OS X 10.4 ''Tiger'' and Mac OS X 10.5 ''Leopard'' only had a 32-bit kernel, but they can run 64-bit user-mode code on ")
				print ("64-bit processors. Mac OS X 10.6 ''Snow Leopard'' had both 32- and 64-bit kernels, and, on most Macs, used the 32-bit kernel ")
				print ("even on 64-bit processors. This allowed those Macs to support 64-bit processes while still supporting 32-bit device drivers;") 
				print ("although not 64-bit drivers and performance advantages that can come with them. Mac OS X 10.7 ''Lion'' ran with a 64-bit ")
				print ("kernel on more Macs, and OS X 10.8 ''Mountain Lion'' and later macOS releases only have a 64-bit kernel. On systems with ")
				print ("64-bit processors, both the 32- and 64-bit macOS kernels can run 32-bit user-mode code, and all versions of macOS include") 
				print ("32-bit versions of libraries that 32-bit applications would use, so 32-bit user-mode software for macOS will ")
				print ("run on those systems.")
				print (" ")
				print ("Linux and most other Unix-like operating systems, and the C and C++ toolchains for them, have supported 64-bit ")
				print ("processors for many years. Many applications and libraries for those platforms are open source, written in C and ")
				print ("C++, so that if they are 64-bit-safe, they can be compiled into 64-bit versions. This source-based distribution model, ")
				print ("with an emphasis on frequent releases, makes availability of application software for those operating systems less of an issue.")
				more1 = input("64-bit data models")
				print (" ")
				print ("In 32-bit programs, pointers and data types such as integers generally have the same length. This is not necessarily true ") 
				print ("64-bit machines.[38][39][40] Mixing data types in programming languages such as C and its descendants such as C++ and ")
				print ("Objective-C may thus work on 32-bit implementations but not on 64-bit implementations.")
				print (" ")
				print ("In many programming environments for C and C-derived languages on 64-bit machines, int variables are still 32 bits wide, but ")
				print ("long integers and pointers are 64 bits wide. These are described as having an LP64 data model. Another alternative is the ")
				print ("ILP64 data model in which all three data types are 64 bits wide, and even SILP64 where short integers are also 64 ")
				print ("bits wide.[41] However, in most cases the modifications required are relatively minor and straightforward, and many ")
				print ("well-written programs can simply be recompiled for the new environment with no changes. Another alternative is the ")
				print ("LLP64 model, which maintains compatibility with 32-bit code by leaving both int and long as 32-bit. LL refers to the long") 
				print ("long integer type, which is at least 64 bits on all platforms, including 32-bit environments.")
				print ("64-bit data models Data model 	short (integer) 	int 	long (integer) 	long long 	pointers,")
				print ("size_t 	Sample operating systems")
				print ("LLP64,")
				print ("IL32P64 	16 	32 	32 	64 	64 	Microsoft Windows (x86-64 and IA-64) using Visual C++; and MinGW")
				print ("LP64")
				print ("I32LP64 	16 	32 	64 	64 	64 	Most Unix and Unix-like systems, e.g., Solaris, Linux, BSD, macOS. Windows when using Cygwin; z//OS")
				print ("ILP64 	16 	64 	64 	64 	64 	HAL Computer Systems port of Solaris to the SPARC64")
				print ("SILP64 	64 	64 	64 	64 	64 	Classic UNICOS[41] (versus UNICOS//mp, etc.)")
				print (" ")
				print ("Many 64-bit platforms today use an LP64 model (including Solaris, AIX, HP-UX, Linux, macOS, BSD, and IBM z//OS). ")
				print ("Microsoft Windows uses an LLP64 model. The disadvantage of the LP64 model is that storing a long into an int may overflow. ")
				print ("On the other hand, converting a pointer to a long will “work” in LP64. In the LLP64 model, the reverse is true. These are not ")
				print ("problems which affect fully standard-compliant code, but code is often written with implicit assumptions about the widths of") 
				print ("data types. C code should prefer (u)intptr_t instead of long when casting pointers into integer objects.")
				print (" ")
				print ("A programming model is a choice made to suit a given compiler, and several can coexist on the same OS. However, ")
				print ("the programming model chosen as the primary model for the OS application programming interface (API) typically dominates.")
				print (" ")
				print ("Another consideration is the data model used for device drivers. Drivers make up the majority of the operating system code ")
				print ("in most modern operating systems[citation needed] (although many may not be loaded when the operating system is running). ")
				print ("Many drivers use pointers heavily to manipulate data, and in some cases have to load pointers of a certain size into the")
				print ("hardware they support for direct memory access (DMA). As an example, a driver for a 32-bit PCI device asking the device to ")
				print ("DMA data into upper areas of a 64-bit machine's memory could not satisfy requests from the operating system to load data ")
				print ("from the device to memory above the 4 gibibyte barrier, because the pointers for those addresses would not fit into the ")
				print ("DMA registers of the device. This problem is solved by having the OS take the memory restrictions of the device into") 
				print ("account when generating requests to drivers for DMA, or by using an input–output memory management unit (IOMMU).")
				more1 = input("Current 64-bit architectures")
				print (" ")
				print ("As of May 2018, 64-bit architectures for which processors are being manufactured include:")
				print (" ")
				print ("The 64-bit extension created by AMD to Intel's x86 architecture (later licensed by Intel); commonly termed x86-64, AMD64,") 
				print ("or x64:")
				print ("AMD's AMD64 extensions (used in Athlon 64, Opteron, Sempron, Turion 64, Phenom, Athlon II, Phenom II, FX, Ryzen, and Epyc ")
				print ("processors)")
				print ("Intel's Intel 64 extensions, used in Intel Core 2-i3-i5-i7-i9, some Atom, and newer Celeron, Pentium, and Xeon processors")
				print ("Intel's K1OM architecture, a variant of Intel 64 with no CMOV, MMX, and SSE instructions, used in Xeon Phi coprocessors,") 
				print ("binary incompatible with x86-64 programs")
				print ("VIA Technologies' 64-bit extensions, used in the VIA Nano processors")
				print ("IBM's Power Architecture:")
				print ("IBM's POWER4, POWER5, POWER6, POWER7, POWER8, POWER9, and IBM A2 processors")
				print ("SPARC V9 architecture:")
				print ("Oracle's M8 and S7 processors")
				print ("Fujitsu's SPARC64 XII and SPARC64 XIfx processors")
				print ("IBM's z//Architecture, a 64-bit version of the ESA//390 architecture, used in IBM's eServer zSeries and System z mainframes:")
				print ("IBM z13 and z14")
				print ("Hitachi AP8000E")
				print ("HP-Intel's IA-64 architecture:")
				print ("Intel's Itanium processors")
				print ("MIPS Technologies' MIPS64 architecture")
				print ("ARM Holdings' AArch64 architecture")
				print ("Elbrus architecture:")
				print ("Elbrus-8S")
				print ("NEC SX architecture")
				print ("SX-Aurora TSUBASA")
				print ("RISC-V")
				print (" ")
				print ("Most architectures of 64 bits that are derived from the same architecture of 32 bits can execute code written for the ")
				print ("32-bit versions natively, with no performance penalty.[citation needed] This kind of support is commonly called bi-arch ")
				print ("support or more generally multi-arch support. ")
				print (" ")
				noMore = input("Press [ENTER] key to exit")
			if WikIDSelect == 20016:
				print (" ")
				print ("In computer architecture, 128-bit integers, memory addresses, or other data units are those that are 128 bits (16 octets) ")
				print ("wide. Also, 128-bit CPU and ALU architectures are those that are based on registers, address buses, or data buses of that size.")
				print (" ")
				print ("While there are currently no mainstream general-purpose processors built to operate on 128-bit integers or addresses, a") 
				print ("number of processors do have specialized ways to operate on 128-bit chunks of data. The IBM System/370 could be ")
				print ("considered the first simple 128-bit computer, as it used 128-bit floating-point registers. Most modern CPUs feature") 
				print ("single-instruction multiple-data (SIMD) instruction sets (Streaming SIMD Extensions, AltiVec etc.) where 128-bit ")
				print ("vector registers are used to store several smaller numbers, such as four 32-bit floating-point numbers. A single ")
				print ("instruction can then operate on all these values in parallel. However, these processors do not operate on individual ")
				print ("numbers that are 128 binary digits in length; only their registers have the size of 128 bits.")
				print (" ")
				print ("The DEC VAX supported operations on 128-bit integer ('O' or octaword) and 128-bit floating-point ('H-float' or HFLOAT)") 
				print ("datatypes. Support for such operations was an upgrade option rather than being a standard feature. Since the VAX's ")
				print ("registers were 32 bits wide, a 128-bit operation used four consecutive registers or four longwords in memory.")
				print (" ")
				print ("The ICL 2900 Series provided a 128-bit accumulator, and its instruction set included 128-bit floating-point and packed ")
				print ("decimal arithmetic.")
				print (" ")
				print ("In the same way that compilers emulate e.g. 64-bit integer arithmetic on architectures with register sizes less than") 
				print ("64 bits, some compilers also support 128-bit integer arithmetic. For example, the GCC C compiler 4.6 and later has a ")
				print ("128-bit integer type __int128 for some architectures.[1] For the C programming language, this is a compiler-specific ")
				print ("extension, as C11 itself does not guarantee support for 128-bit integers.")
				print (" ")
				print ("A 128-bit register can store 2128 (over 3.40 × 1038) different values. The range of integer values that can be stored in ")
				print ("128 bits depends on the integer representation used. With the two most common representations, the range is 0 through ")
				print ("340,282,366,920,938,463,463,374,607,431,768,211,455 (2128 − 1) for representation as an (unsigned) binary number, and ")
				print ("−170,141,183,460,469,231,731,687,303,715,884,105,728 (−2127) through 170,141,183,460,469,231,731,687,303,715,884,105,727") 
				print ("(2127 − 1) for representation as two's complement.")
				more1 = input("Uses")
				print (" ")
				print ("The free software used to implement RISC-V architecture is defined for 32, 64 and 128 bits of integer data width.")
				print ("Universally Unique Identifiers (UUID) consist of a 128-bit value.")
				print ("IPv6 routes computer network traffic amongst a 128-bit range of addresses.")
				print ("ZFS is a 128-bit file system.")
				print ("GPU chips commonly move data across a 128-bit bus.[2]")
				print ("128 bits is a common key size for symmetric ciphers and a common block size for block ciphers in cryptography.")
				print ("128-bit processors could be used for addressing directly up to 2128 (over 3.40 × 1038) bytes, which would greatly exceed the ")
				print ("total data stored on Earth as of 2010, which has been estimated to be around 1.2 zettabytes (1.42 × 1021 bytes).[3]")
				print ("Quadruple precision (128-bit) floating-point numbers can store 64-bit fixed point numbers or integers accurately without ")
				print ("losing precision.")
				print ("The AS/400 virtual instruction set defines all pointers as 128-bit. This gets translated to the hardware's real instruction") 
				print ("set as required, allowing the underlying hardware to change without needing to recompile the software. Past hardware was ")
				print ("48-bit CISC, while current hardware is 64-bit PowerPC. Because pointers are defined to be 128-bit, future hardware may be") 
				print ("128-bit without software incompatibility.")
				print ("Increasing the word size can speed up multiple precision mathematical libraries. Applications include cryptography, and")
				print ("potentially speed up algorithms used in complex mathematical processing (numerical analysis, signal processing, complex ")
				print ("photo editing and audio and video processing).")
				print (" ")
				print ("Apache Avro uses a 128-bit random number as synchronization marker for efficient splitting of data files.[4]")
				print (" ")
				more1 = input("History")
				print (" ")
				print ("A 128-bit multicomparator was described by researchers in 1976.[5]")
				print (" ")
				print ("A CPU with 128-bit multimedia extensions was designed by researchers in 1999.[6] ")
				noMore = input("Press [ENTER] key to exit")
			if WikIDSelect == 20017:
				print (" ")
				print ("In computer architecture, 256-bit integers, memory addresses, or other data units are those that are 256 bits (32 octets) ")
				print ("wide. Also, 256-bit CPU and ALU architectures are those that are based on registers, address buses, or data buses of that size.")
				print (" ")
				print ("There are currently no mainstream general-purpose processors built to operate on 256-bit integers or addresses, though a ")
				print ("number of processors do operate on 256-bit data. CPUs feature SIMD instruction sets (Advanced Vector Extensions and the ")
				print ("FMA instruction set etc.) where 256-bit vector registers are used to store several smaller numbers, such as eight 32-bit ")
				print ("floating-point numbers, and a single instruction can operate on all these values in parallel. However, these processors do ")
				print ("not operate on individual numbers that are 256 binary digits in length, only their registers have the size of 256-bits. ")
				print ("Binary digits are found together in 128-bit collections.")
				more1 = input("Contents")
				print (" ")
				print ("1 Uses")
				print ("2 History")
				print ("3 See also")
				print ("4 References")
				print (" ")
				more1 = input("Uses")
				print ("Laptop computer using an Efficeon processor")
				print (" ")
				print ("256 bits is a common key size for symmetric ciphers in cryptography, such as Advanced Encryption Standard.")
				print ("Modern GPU chips move data across a 256-bit memory bus.")
				print ("256-bit processors could be used for addressing directly up to 2256 bytes. Already 2128 (128-bit) would greatly exceed the") 
				print ("total data stored on Earth as of 2010, which has been estimated to be around 1.2 zettabytes (over 270 bytes).[1]")
				print ("The Efficeon processor was Transmeta's second-generation 256-bit VLIW design which employed a software engine to convert code ")
				print ("written for x86 processors to the native instruction set of the chip.[2][3]")
				print ("Increasing the word size can accelerate multiple precision mathematical libraries. Applications include cryptography.")
				print ("Researchers at the University of Cambridge use a 256-bit capability pointer, which includes capability and addressing ")
				print ("information, on their CHERI capability system.[4]")
				print (" ")
				more1 = input("History")
				print (" ")
				print ("The DARPA funded Data-Intensive Architecture (DIVA) system incorporated processor-in-memory (PIM) 5-stage pipelined 256-bit ")
				print ("datapath, complete with register file and ALU blocks in a ''WideWord'' processor in 2002.[5] ")
				noMore = input("Press [ENTER] key to exit")
			if WikIDSelect == 20018:
				print (" ")
				print ("In computer architecture, 512-bit integers, memory addresses, or other data units are those that are 512 bits wide. Also, ")
				print ("512-bit CPU and ALU architectures are those that are based on registers, address buses, or data buses of that size.")
				print (" ")
				print ("There are currently no mainstream general-purpose processors built to operate on 512-bit integers or addresses, though a ")
				print ("number of processors do operate on 512-bit data. As of 2013, the Intel Xeon Phi has a vector processing unit with 512-bit") 
				print ("vector registers, each one holding sixteen 32-bit elements or eight 64-bit elements, and a single instruction can operate on") 
				print ("all these values in parallel. However, the Xeon Phi's vector processing unit does not operate on individual numbers that are ")
				print ("512 bits in length.[1]")
				more1 = input("Uses")
				print ("The AMD Radeon R9 290X (Sapphire OEM version pictured here) uses a 512 bit memory bus")
				print ("PICTURE NOT AVAILABLE IN COMMAND LINE VIEW")
				print ("	Some GPUs such as the Nvidia GTX280,[2] GTX285,[3] Quadro FX 5800[4] and several Tesla products move data across a 512-bit") 
				print ("	memory bus. Then AMD Radeon R9 290, R9 290X and 295X2 followed.")
				print ("	Many hash functions, such as SHA-512, have a 512-bit output.")
				print ("	AVX-512 are 512-bit extensions to the 256-bit Advanced Vector Extensions SIMD instructions for x86 instruction set ")
				print ("	architecture proposed by Intel in July 2013, and released on 2016 with Knights Landing, and in 2018 on the HEDT and ")
				print ("	consumer server platform, with Skylake-X and Skylake-SP respectively.")
				noMore = input("Press [ENTER] key to exit")
			if WikIDSelect == 20019:
				print ("Variables in the UCALC source code")
				print ("\n")
				print ("noMore   - this is an overwrite variable meant to hold back text from just flooding down too fast. It just requires enter to be pressed, and is there to tell you that this is the end of an article, mode, or feature")
				print ("more1    - this is an overwrite variable that divides articles into section, and must be bypassed to continue. Bypass by pressing the [ENTER] key")
				print ("calcIDSes - this is an integer that takes you to different modes on a calculator")
				print ("WikIDSelect - this is an integer that accepts the input to go into different articles")
				print ("konloop - this is a loop function that loops output")
				print ("modID - this is a string that prints out the calculator hardware model")
				print ("conloop - this is another loop function that loops output")
				print (" ")
				noMore = input("Press [ENTER] key to exit")
			if WikIDSelect == 30000:
				print ("This section is not yet available")
				noMore = input("Press [ENTER] key to exit")
				print ("Exiting")
				print ("Please wait...")
			if WikIDSelect == 30001:
				print ("This section is not yet available")
				noMore = input("Press [ENTER] key to exit")
				print ("Exiting")
				print ("Please wait...")
			if WikIDSelect == 30002:
				print ("Names of large numbers")
				print ("When we start working with massive numbers, we should use a variable as the name. It takes A LOT longer to spell each number out.")
				print ("Here is a list of names of large numbers")
				print ("Ones place (1-9)")
				print ("Tens place (10-99)")
				print ("Hundreds place (100-999)")
				print ("Thousands place (1000-9999)")
				print ("Ten Thousands place (10000-99999)")
				print ("Hundred thousands place (100000-999999)")
				print ("Millions place (1000000-9999999)")
				print ("Ten millions place (10000000-99999999)")
				print ("Hundred millions place (100000000-999999999)")
				print ("Billions place (1000000000-9999999999)")
				print ("Ten Billions place (10000000000-99999999999)")
				print ("Hundred billions place (100,000,000,000-9,999,999,999)")
				print ("Trillions place (1,000,000,000,000-9,999,999,999)")
				print ("Ten trillions place (10,000,000,000,000-99,999,999,999,999)")
				print ("Hundred trillions place (100,000,000,000,000-999,999,999,999,999)")
				print ("Quadrillions place (1,000,000,000,000,000-9,999,999,999,999)")
				print ("Ten quadrillions place (10,000,000,000,000,000-99,999,999,999,999,999)")
				print ("Hundred quadrillions place (100,000,000,000,000,000-999,999,999,999,999)")
				print ("Quintillions place (1,000,000,000,000,000,000-9,999,999,999,999,999,999)")
				print ("Ten quintillions place (10,000,000,000,000,000,000-99,999,999,999,999,999,999)")
				print ("Hundred quintillions place (100,000,000,000,000,000,000-999,999,999,999,999,999,999)")
				print ("Sextillions place (1,000,000,000,000,000,000,000-9,999,999,999,999,999,999,999)")
				print ("Ten sextillions place (10,000,000,000,000,000,000,000,000-99,999,999,999,999,999,999,999,999)")
				print ("Hundred sextillions place (100,000,000,000,000,000,000,000,000-999,999,999,999,999,999,999,999,999)")
				print ("Septillions place (1,000,000,000,000,000,000,000,000,000-999,9,999,999,999,999,999,999,999,999,999)")
				print ("Ten septillions place (10,000,000,000,000,000,000,000,000,000-99,999,999,999,999,999,999,999,999,999)")
				print ("Hundred septillions place (100,000,000,000,000,000,000,000,000,000-999,999,999,999,999,999,999,999,999,999)")
				print ("Octillions place (1,000,000,000,000,000,000,000,000,000-9,999,999,999,999,999,999,999,999,999)")
				print ("Ten Octillions place (10,000,000,000,000,000,000,000,000,000-99,999,999,999,999,999,999,999,999,999)")
				print ("Hundred octillions place (100,000")
				print ("Nonillions place (1,000")
				print ("Ten nonillions place (10,000")
				print ("Hundred nonillions place (100,000")
				print ("Decillions place (1,000")
				print ("Ten decillions place (10,000")
				print ("Hundred decillions place (100,000")
				print ("Undecillions place (1,000")
				print ("Ten undecillions place (10,000")
				print ("Hundred undecillions place (100,000")
				print ("Duodecillions place (1,000")
				print ("Ten duodecillions place (10,000")
				print ("Hundred duodecillions place (100,000")
				print ("Tredecillions place (1,000")
				print ("Ten tredecillions place (10,000")
				print ("Hundred tredecillions place (100,000")
				print ("Quattuordecillions place (1,000")
				print ("Ten Quattuordecillions place (10,000")
				print ("Hundreds Quattuordecillions place (100,000")
				print ("Quindecillions place (1,000")
				print ("Ten Quindecillions place (10,000")
				print ("Hundred Quindecillions place (100,000")
				print ("Sexdecillions place (1,000")
				print ("Ten Sexdecillions place (10,000")
				print ("Hundred Sexdecillions place (100,000")
				print ("Septendecillions place (1,000")
				print ("Ten Septendecillions place (10,000")
				print ("Hundreds Septendecillions place (100,000")
				print ("Octodecillions place (1,000")
				print ("Ten Octodecillions place (10,000")
				print ("Hundred Octodecillions place (100,000")
				print ("Novemdecillions place (1,000")
				print ("Ten Novemdecillions place (10,000")
				print ("Hundred Novemdecillions place (100,000")
				print ("Vigintillions place (1,000")
				print ("Ten Vigintillions place (10,000")
				print ("Hundred Vigintillions place (100,000")
				print ("Centillions place (1,000")
				print ("Ten Centillions place (10,000")
				print ("Hundred Centillions place (100,000")
				print ("Googol (10,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000")
				print ("Googolplex (too large to write)")
				print ("Those are the names of large numbers. However, this calculator is not able to go past the 100 undecillion mark under 128 bit mode")
			if WikIDSelect == 30003:
				print ("Superstitious numbers")
				print ("\nUnlucky 13")
				print ("Excerpt from https://www.wikipedia.org/13_(number_")
				print ("The number 13 is considered an unlucky number in some countries.[11] The end of the Mayan calendar's 13th Baktun was superstitiously feared as a harbinger of the apocalyptic 2012 phenomenon.[12] Fear of the number 13 has a specifically recognized phobia, Triskaidekaphobia, a word coined in 1911. The superstitious sufferers of triskaidekaphobia try to avoid bad luck by keeping away from anything numbered or labelled thirteen. As a result, companies and manufacturers use another way of numbering or labelling to avoid the number, with hotels and tall buildings being conspicuous examples (thirteenth floor).[13] It is also considered unlucky to have thirteen guests at a table. Friday the 13th has been considered an unlucky day.[11]")
				print ("There are a number of theories as to why the number thirteen became associated with bad luck, but none of them have been ")
				print ("accepted as likely.[11]")
				print ("The Last Supper: At Jesus Christ's last supper, there were thirteen people around the table, counting Christ and the twelve ")
				print ("apostles. Some believe this is unlucky because one of those thirteen, Judas Iscariot, was the betrayer of Jesus Christ. From ")
				print ("the 1890s, a number of English language sources relate the ''unlucky'' thirteen to an idea that at the Last Supper, Judas, the") 
				print ("disciple who betrayed Jesus, was the 13th to sit at the table.[14]")
				print ("Knights Templar: On Friday 13 October 1307, King Philip IV of France ordered the arrest of the Knights Templar,[11] and most") 
				print ("of the knights were tortured and killed.")
				print ("Full Moons: A year with 13 full moons instead of 12 posed problems for the monks in charge of the calendars. ")
				print ("This was considered a very unfortunate circumstance, especially by the monks who had charge of the calendar of thirteen ")
				print ("months for that year, and it upset the regular arrangement of church festivals. For this reason thirteen came to be considered")
				print ("an unlucky number.[15] However, a typical century has about 37 years that have 13 full moons, compared to 63 years with 12 full") 
				print ("moons, and typically every third or fourth year has 13 full moons.[16]")
				print ("A Repressed Lunar Cult: In ancient cultures, the number 13 represented femininity, because it corresponded to the number of lunar ")
				print ("(menstrual) cycles in a year (13 x 28 = 364 days). The theory is that, as the solar calendar triumphed over the lunar, the ")
				print ("number thirteen became anathema.[11][17]")
				print ("Hammurabi's Code: There is a myth that the earliest reference to thirteen being unlucky or evil is in the Babylonian Code of ")
				print ("Hammurabi (circa 1780 BC), where the thirteenth law is said to be omitted. In fact, the original Code of Hammurabi has no ")
				print ("numeration. The translation by L.W. King (1910), edited by Richard Hooker, omitted one article: If the seller have gone to ")
				print ("(his) fate (i. e., have died), the purchaser shall recover damages in said case fivefold from the estate of the seller.") 
				print ("Other translations of the Code of Hammurabi, for example the translation by Robert Francis Harper, include the 13th ")
				print ("article.[18]")
				print ("\nLucky 13")
				print ("Excerpt from https://www.wikipedia.org/13_(number)_")
				print ("In some countries, such as Italy, 13 is considered a lucky number.[19] The expression fare tredici (''to do 13'') means hit the jackpot.") 
				print ("17 is considered an unlucky number instead.[20]")
				print ("\n666")
				print ("Excerpt from https://www.wikipedia.org/666_(number)_")
				print ("Number of the Beast")
				print ("666 is often associated with the devil.")
				print ("Main article: Number of the Beast")
				print ("In the Textus Receptus manuscripts of the New Testament, the Book of Revelation (13:17–18) cryptically asserts 666 to be ''man's number'' ")
				print ("or ''the number of a man'' (depending on how the text is translated) associated with the Beast, an antagonistic creature that") 
				print ("appears briefly about two-thirds into the apocalyptic vision. Some manuscripts of the original Greek use the symbols χξϛ ")
				print ("chi xi stigma (or χξϝ with a digamma), while other manuscripts spell out the number in words.")
				print ("In modern popular culture, 666 has become one of the most widely recognized symbols for the Antichrist or, alternatively, the devil. The")
				print ("number 666 is purportedly used to invoke Satan. Earnest references to the number occur both among apocalypticist Christian ")
				print ("groups and in explicitly anti-Christian subcultures. References in contemporary Western art or literature are, more ")
				print ("likely than not, intentional references to the Beast symbolism. Such popular references are therefore too numerous to list.")
				print ("It is common to see the symbolic role of the integer 666 transferred to the digit sequence 6-6-6. Some people take the Satanic associations") 
				print ("of 666 so seriously that they actively avoid things related to 666 or the digits 6-6-6. This is known as ")
				print ("hexakosioihexekontahexaphobia.")
				print ("The number is cited as 616 in some early biblical manuscripts, the earliest known instance being in Papyrus 115.[3][4]")
				print ("Other occurrences")
				print ("In the Bible, 666 is the number of talents of gold Solomon collected each year (see 1 Kings 10:14, 2 Chronicles 9:13 and also in Ezra 2:13).")
				print ("In the Bible, 666 is the number of Adonikam's descendants who return to Jerusalem and Judah from the Babylonian exile (see Ezra 2:13).")
				print ("In the Bible, there may be a latent reference to 666 in the name of the great sixth-century BC king of Babylon. Commonly spelled ")
				print ("Nebuchadnezzar, transliterating from the Book of Daniel, the name is Nebuchadrezzar or Nebuchadrezzur in the Book of ")
				print ("Jeremiah (see Jeremiah 49:28–30). The number of each name can be calculated, since Hebrew letters double as numbers ")
				print ("(see Gematria, Hebrew numerals). Nebuchadrezzar is 663, and Nebuchadrezzur, 669. Midway between the two variants is 666. ")
				print ("If the mysteries of Jeremiah are to be related to those of Revelation, Nebuchadrezzar, who came (though bidden by God) to ")
				print ("crush God's people, may prefigure the end-times beast.[5]")
				print ("Using gematria, Neron Caesar transliterated from Greek into Hebrew produces the number 666. The Latin spelling of ''Nero Caesar''") 
				print ("transliterated into Hebrew produces the number 616. Thus, in the Bible, 666 may have been a coded reference to Nero, the ")
				print ("Roman Emperor from 55 to 68 AD.[6]")
			if WikIDSelect == 30004:
				print ("Slang numbers")
				print ("420 - Also known as ''420 blaze it'' is a number referrring to smoking weed")
				print ("42 - the meaning of life")
				print ("69 - Refers to 69ing, or the 69 sex position")
				print ("3 - The number of the illuminati")
				print ("1738 - The title of the song ''1738'' by fetty wap")
				print ("888 - Alternate to 666")
				print ("8008 - For some calculator UIs this looks like BOOB")
				print ("8008135 - For some calculator UIs this looks like BOOBIES")
			if WikIDSelect == 30005:
				print ("Roman numerals")
				print ("\nNumeral chart")
				print ("__________________________________________________________________________________________________________________")
				print ("| I | II | III | IV | V | VI | VII | VIII | IX | X | XI | XII | XIII | XIV | XV | XVI | XVII | XVIII | XVIX | XX |")
				print ("|---|----|-----|----|---|----|-----|------|----|---|----|-----|------|-----|----|-----|------|-------|------|----|")
				print ("| 1 | 02 | 003 | 04 | 5 | 06 | 007 | 0008 | 09 |10 | 11 | 012 | 0013 | 014 | 15 | 016 | 0017 | 00018 | 0019 | 20 |")
				print ("|---|----|-----|----|---|----|-----|------|----|---|----|-----|------|-----|----|-----|------|-------|------|----|")
				print ("| XXI | XXII | XXIII | XXIV | XXV | XXVI | XXVII | XXVIII | XXVIX | XXX | XXXI | XXXII | XXXIII | XXXIV | XXXV | XXXVI | XXXVII | XXXVIII | XXXVIX | XL |")
				print ("|-----|------|-------|------|-----|------|-------|--------|-------|-----|------|-------|--------|-------|------|-------|--------|---------|--------|----|")
				print ("| 021 | 0022 | 00023 | 0024 | 025 | 0026 | 00027 | 000028 | 00029 | 030 | 0031 | 00032 | 000033 | 00034 | 0035 | 00036 | 000037 | 0000038 | 000039 | 40 |")
				print ("|-----|------|-------|------|-----|------|-------|--------|-------|-----|------|-------|--------|-------|------|-------|--------|---------|--------|----|")
				print ("| XLI | XLII | XLIII | XLIV | XLV | XLVI | XLVII | XLVIII | XLIX | L | LI | LII | LIII | LIV | LV | LVI | LVII | LVIII | LVIX | LX |")
				print ("|-----|------|-------|------|-----|------|-------|--------|------|---|----|-----|------|-----|----|-----|------|-------|------|----|")
				print ("| 041 | 0042 | 00043 | 0044 | 045 | 0046 | 00047 | 000048 | 0049 |50 | 51 | 052 | 0053 | 054 | 55 | 056 | 0057 | 00058 | 0059 | 60 |")
				print ("|-----|------|-------|------|-----|------|-------|--------|------|---|----|-----|------|-----|----|-----|------|-------|------|----|")
				print ("| LXI | LXII | LXIII | LXIV | LXV | LXVI | LXVII | LXVIII | LXIX | LXX | LXXI | LXXII | LXXIII | LXXIV | LXXV | LXXVI | LXXVII | LXXVIII | LXXIX | LXXX |")
				print ("|-----|------|-------|------|-----|------|-------|--------|------|-----|------|-------|--------|-------|------|-------|--------|---------|-------|------|")
				print ("| 061 | 0062 | 00063 | 0064 | 065 | 0066 | 00067 | 000068 | 0069 | 070 | 0071 | 00072 | 000073 | 00074 | 0075 | 00076 | 000077 | 0000078 | 00079 | 0080 |")
				print ("|-----|------|-------|------|-----|------|-------|--------|------|-----|------|-------|--------|-------|------|-------|--------|---------|-------|------|")
				print ("| LXXXI | LXXXII | LXXXIII | LXXXXIV | LXXXXV | LXXXXVI | LXXXVII | LXXXVIII | LXXXVIX | XC | XCI | XCII | XCIII | XCIV | XCV | XCVI | XCVII | XCVIII | XCVIX | C   |") 
				print ("|-------|--------|---------|---------|--------|---------|---------|----------|---------|----|-----|------|-------|------|-----|------|-------|--------|-------|")
				print ("| 00081 | 000082 | 000083  | 0000084 | 000085 | 0000086 | 0000087 | 00000088 | 0000089 | 90 | 091 | 0092 | 00093 | 0094 | 095 | 0096 | 00097 | 000098 | 00099 | 100 |")
				print ("|-------|--------|---------|---------|--------|---------|---------|----------|---------|----|-----|------|-------|------|-----|------|-------|--------|-------|")
			if WikIDSelect == 30006:
				print ("Multiples table")
				print ("\n")
				print ("| 0  |  1  |  2  |")
				print ("| 1  |  1  |  2  |")
				print ("| 2  |  2  |  3  |")
			if WikIDSelect == 30007:
				print ("Intellect Quotient")
				print ("Excerpt from https://www.wikipedia.org/Intelligence_Quotient")
				print ("An intelligence quotient (IQ) is a total score derived from several standardized tests designed to assess human intelligence. ")
				print ("The abbreviation ''IQ'' was coined by the psychologist William Stern for the German term Intelligenzquotient, his term for a ")
				print ("scoring method for intelligence tests at University of Breslau he advocated in a 1912 book.[1] Historically, IQ is a score ")
				print ("obtained by dividing a person's mental age score, obtained by administering an intelligence test, by the person's chronological ")
				print ("age, both expressed in terms of years and months. The resulting fraction is multiplied by 100 to obtain the IQ score.[2] When ")
				print ("current IQ tests were developed, the median raw score of the norming sample is defined as IQ 100 and scores each standard ")
				print ("deviation (SD) up or down are defined as 15 IQ points greater or less,[3] although this was not always so historically. ")
				print ("By this definition, approximately two-thirds of the population scores are between IQ 85 and IQ 115. About 2.5 percent of the ")
				print ("population scores above 130, and 2.5 percent below 70.[4][5]")
				print (" ")
				print ("Scores from intelligence tests are estimates of intelligence. Unlike, for example, distance and mass, a concrete measure of ")
				print ("intelligence cannot be achieved given the abstract nature of the concept of ''intelligence''.[6] IQ scores have been shown to") 
				print ("be associated with such factors as morbidity and mortality,[7][8] parental social status,[9] and, to a substantial degree, ")
				print ("biological parental IQ. While the heritability of IQ has been investigated for nearly a century, there is still debate about") 
				print ("the significance of heritability estimates[10][11] and the mechanisms of inheritance.[12]")
				print (" ")
				print ("IQ scores are used for educational placement, assessment of intellectual disability, and evaluating job applicants. Even when") 
				print ("students improve their scores on standardized tests, they do not always improve their cognitive abilities, such as memory,")
				print ("attention and speed.[13] In research contexts they have been studied as predictors of job performance, and income. They are") 
				print ("also used to study distributions of psychometric intelligence in populations and the correlations between it and other ")
				print ("variables. Raw scores on IQ tests for many populations have been rising at an average rate that scales to three IQ points per ")
				print ("decade since the early 20th century, a phenomenon called the Flynn effect. Investigation of different patterns of increases in ")
				print ("subtest scores can also inform current research on human intelligence.")
				print ("\n\n\n\n\n\n\n")
				more1 = input("Contents")
				print ("1 History")
				print ("1.1 Precursors to IQ testing")
				print ("1.2 General factor (g)")
				print ("1.3 United States military selection in World War I")
				print ("1.4 IQ testing and the Eugenics movement in the United States")
				print ("1.5 Cattell–Horn–Carroll theory")
				print ("1.6 Other theories")
				print ("2 Current tests")
				print ("3 Test bias or differential item functioning")
				print ("4 Reliability and validity")
				print ("5 Flynn effect")
				print ("6 Age")
				print ("7 Genetics and environment")
				print ("7.1 Heritability")
				print ("7.2 Shared family environment")
				print ("7.3 Non-shared family environment and environment outside the family")
				print ("7.4 Individual genes")
				print ("7.5 Gene-environment interaction")
				print (" 8 Interventions")
				print ("9 Music")
				print ("10 Brain anatomy")
				print ("11 Health")
				print ("12 Social correlations")
				print ("12.1 School performance")
				print ("12.2 Job performance")
				print ("12.3 Income")
				print ("12.4 Crime")
				print ("12.5 Health and mortality")
				print ("12.6 Other accomplishments")
				print ("13 Group-IQ or the collective intelligence factor c")
				print ("14 Group differences")
				print ("14.1 Sex")
				print ("14.2 Race and intelligence")
				print ("14.2.1 Race and intelligence in United States of America")
				print ("15 Public policy")
				print ("16 Criticism and views")
				print ("16.1 Relationship to intelligence")
				print ("16.2 Criticism of IQ")
				print ("16.3 Systematic exclusion of threshold effects")
				print ("16.4 Test bias")
				print ("16.5 Intermingling cultures and IQ classification fairness")
				print ("16.6 Outdated methodology")
				print ("16.7 Intelligence: Knowns and Unknowns")
				print ("16.8 Dynamic assessment")
				print ("17 Classification")
				print ("18 High IQ societies")
				print ("19 See also")
				print ("20 References")
				print ("21 Bibliography")
				print ("22 External links")
				print (" ")
				print ("\n\n\n\n\n\n\n")
				more1 = input("History")
				print ("See also: History of the race and intelligence controversy")
				more1 = input("Precursors to IQ testing")
				print ("Historically, even before IQ tests were devised, there were attempts to classify people into intelligence categories by")
				print ("observing their behavior in daily life.[14][15] Those other forms of behavioral observation are still important for ")
				print ("validating classifications based primarily on IQ test scores. Both intelligence classification by observation of behavior") 
				print ("outside the testing room and classification by IQ testing depend on the definition of ''intelligence'' used in a particular")
				print ("case and on the reliability and error of estimation in the classification procedure.")
				print (" ")
				print ("The English statistician Francis Galton made the first attempt at creating a standardized test for rating a person's")
				print ("intelligence. A pioneer of psychometrics and the application of statistical methods to the study of human diversity and the ")
				print ("study of inheritance of human traits, he believed that intelligence was largely a product of heredity (by which he did not ")
				print ("mean genes, although he did develop several pre-Mendelian theories of particulate inheritance).[16][17][18] He hypothesized ")
				print ("that there should exist a correlation between intelligence and other observable traits such as reflexes, muscle grip, and head ")
				print ("size.[19] He set up the first mental testing centre in the world in 1882 and he published ''Inquiries into Human Faculty and ")
				print ("Its Development'' in 1883, in which he set out his theories. After gathering data on a variety of physical variables, he was ")
				print ("unable to show any such correlation, and he eventually abandoned this research.[20][21]")
				print (" ")
				print ("French psychologist Alfred Binet was one of the key developers of what later became known as the Stanford–Binet test.")
				print (" ")
				print ("French psychologist Alfred Binet, together with Victor Henri and Théodore Simon had more success in 1905, when they published ")
				print ("the Binet-Simon test, which focused on verbal abilities. It was intended to identify mental retardation in school children,[22]")
				print ("but in specific contradistinction to claims made by psychiatrists that these children were ''sick'' (not ''slow'') and should ") 
				print ("therefore be removed from school and cared for in asylums.[23] The score on the Binet-Simon scale would reveal the child's ")
				print ("mental age. For example, a six-year-old child who passed all the tasks usually passed by six-year-olds—but nothing beyond—would ")
				print ("have a mental age that matched his chronological age, 6.0. (Fancher, 1985). Binet thought that intelligence was multifaceted, ")
				print ("but came under the control of practical judgment.")
				print (" ")
				print ("In Binet's view, there were limitations with the scale and he stressed what he saw as the remarkable diversity of intelligence ")
				print ("and the subsequent need to study it using qualitative, as opposed to quantitative, measures (White, 2000). American psychologist") 
				print ("Henry H. Goddard published a translation of it in 1910. American psychologist Lewis Terman at Stanford University revised the")
				print ("Binet-Simon scale, which resulted in the Stanford-Binet Intelligence Scales (1916). It became the most popular test in the ")
				print ("United States for decades.[22][24][25][26]")
				print ("\n\n\n\n\n\n\n")
				more1 = input("General factor (g)")
				print ("Main article: g factor")
				print (" ")
				print ("The many different kinds of IQ tests include a wide variety of item content. Some test items are visual, while many are verbal.")
				print ("Test items vary from being based on abstract-reasoning problems to concentrating on arithmetic, vocabulary, or general ")
				print ("knowledge.")
				print (" ")
				print ("The British psychologist Charles Spearman in 1904 made the first formal factor analysis of correlations between the tests. He ")
				print ("observed that children's school grades across seemingly unrelated school subjects were positively correlated, and reasoned that ")
				print ("these correlations reflected the influence of an underlying general mental ability that entered into performance on all kinds of") 
				print ("mental tests. He suggested that all mental performance could be conceptualized in terms of a single general ability factor and") 
				print ("a large number of narrow task-specific ability factors. Spearman named it g for ''general factor'' and labeled the specific ") 
				print ("factors or abilities for specific tasks s. In any collection of test items that make up an IQ test, the score that best ")
				print ("measures g is the composite score that has the highest correlations with all the item scores. Typically, the ''g-loaded'' ")
				print ("composite score of an IQ test battery appears to involve a common strength in abstract reasoning across the test's item ")
				print ("content. Therefore, Spearman and others have regarded g as closely related to the essence of human intelligence.[citation needed]")
				print (" ")
				print ("Spearman's argument proposing a general factor of human intelligence is still accepted in principle by many psychometricians.") 
				print ("Today's factor models of intelligence typically represent cognitive abilities as a three-level hierarchy, where there are a ")
				print ("large number of narrow factors at the bottom of the hierarchy, a handful of broad, more general factors at the intermediate ")
				print ("level, and at the apex a single factor, referred to as the g factor, which represents the variance common to all cognitive ")
				print ("tasks. However, this view is not universally accepted; other factor analyses of the data, with different results, are possible.") 
				print ("Some psychometricians regard g as a statistical artifact.[citation needed]")
				print ("\n\n\n\n\n\n\n")
				more1 = input("United States military selection in World War I")
				print (" ")
				print ("During World War I, a way was needed to evaluate and assign Army recruits to appropriate tasks. This led to the development of")
				print ("several mental tests by Robert Yerkes, who worked with major hereditarians of American psychometrics—including Terman, ")
				print ("Goddard—to write the test.[27] The testing generated controversy and much public debate in the United States. Nonverbal or ")
				print ("''performance'' tests were developed for those who could not speak English or were suspected of malingering.[22] Based on ")
				print ("Goddard's translation of the Binet-Simon test, the tests had an impact in screening men for officer training:")
				print (" ")
				print ("	...the tests did have a strong impact in some areas, particularly in screening men for officer training. At the start of")
				print ("the war, the army and national guard maintained nine thousand officers. By the end, two hundred thousand officers presided, ")
				print ("and two- thirds of them had started their careers in training camps where the tests were applied. In some camps, no man scoring")
				print ("below C could be considered for officer training.[27]")
				print (" ")
				print ("1.75 million men were tested in total, making the results the first mass-produced written tests of intelligence, though ")
				print ("considered dubious and non-usable, for reasons including high variability of test implementation throughout different camps and")
				print ("questions testing for familiarity with American culture rather than intelligence.[27] After the war, positive publicity ")
				print ("promoted by army psychologists helped to make psychology a respected field.[28] Subsequently, there was an increase in jobs and")
				print ("funding in psychology in the United States.[29] Group intelligence tests were developed and became widely used in schools and") 
				print ("industry.[30]")
				print (" ")
				print ("The results of these tests, which at the time reaffirmed contemporary racism and nationalism, are considered controversial and ")
				print ("dubious, having rested on certain contested assumptions: that intelligence was heritable, innate, and could be relegated to a ")
				print ("single number, the tests were enacted systematically, and test questions actually tested for innate intelligence rather than") 
				print ("subsuming environmental factors.[27] The tests also allowed for the bolstering of jingoist narratives in the context of ")
				print ("increased immigration, which may have influenced the passing of the Immigration Restriction Act of 1924.[27]")
				print (" ")
				print ("L.L. Thurstone argued for a model of intelligence that included seven unrelated factors (verbal comprehension, word fluency,")
				print ("number facility, spatial visualization, associative memory, perceptual speed, reasoning, and induction). While not widely used,")
				print ("Thurstone's model influenced later theories.[22]")
				print (" ")
				print ("David Wechsler produced the first version of his test in 1939. It gradually became more popular and overtook the Stanford-Binet ")
				print ("in the 1960s. It has been revised several times, as is common for IQ tests, to incorporate new research. One explanation is that")
				print ("psychologists and educators wanted more information than the single score from the Binet. Wechsler's ten or more subtests ")
				print ("provided this. Another is that the Stanford-Binet test reflected mostly verbal abilities, while the Wechsler test also ")
				print ("reflected nonverbal abilities. The Stanford-Binet has also been revised several times and is now similar to the Wechsler in")
				print ("several aspects, but the Wechsler continues to be the most popular test in the United States.[22]")
				print ("\n\n\n\n\n\n\n")
				more1 = input("IQ testing and the Eugenics movement in the United States")
				print (" ")
				print ("Eugenics refers to the principles of heredity used to improve the human race. Francis Galton first used the term in the late") 
				print ("1800s.[31] The eugenics movement was popularized by Progressivism in the US in the 1920s and 1930s.[32]")
				print (" ")
				print ("Goddard was a eugenicist. In 1908, he published his own version, The Binet and Simon Test of Intellectual Capacity, and ")
				print ("cordially promoted the test. He quickly extended the use of the scale to the public schools (1913), to immigration ")
				print ("(Ellis Island, 1914) and to a court of law (1914).[33]")
				print (" ")
				print ("Different from Galton, who promoted eugenics through selective breeding for positive traits, Goddard went with the US eugenics ")
				print ("movement to eliminate ''undesirable'' traits.[34] Goddard used the term ''feeble-minded'' to refer to people who did not ")
				print ("perform well in the test and thus were intellectually inferior. He argued that ''feeble-mindedness'' is caused by heredity,") 
				print ("thus feeble-minded people should be prevented from giving birth, either by institutional isolation or sterilization surgeries.")
				print ("[33] At first sterilization targeted the disabled and was extended to poor people. Goddard's intelligence test was endorsed by ")
				print ("the eugenicists to push for laws for forced sterilization. Different states adopted the sterilization laws at different pace. ")
				print ("These laws forced over 64,000 people to go through sterilization in the United States.[35]")
				print (" ")
				print ("California's sterilization program was so effective that the Nazis turned to the government for advice on how to prevent the")
				print ("birth of the ''unfit''.[36] The US eugenics movement lost its momentum in 1940s and was halted in view of the horrors of Nazi ")
				print ("Germany.")
				print ("\n\n\n\n\n\n\n")
				more1 = input("Cattell–Horn–Carroll theory")
				print ("Main article: Cattell–Horn–Carroll theory")
				print ("Psychologist Raymond Cattell defined fluid and crystallized intelligence and authored the Cattell Culture Fair III IQ test.")
				print ("Raymond Cattell (1941) proposed two types of cognitive abilities in a revision of Spearman's concept of general intelligence.")
				print ("Fluid intelligence (Gf) was hypothesized as the ability to solve novel problems by using reasoning, and crystallized ")
				print ("intelligence (Gc) was hypothesized as a knowledge-based ability that was very dependent on education and experience. In ")
				print ("addition, fluid intelligence was hypothesized to decline with age, while crystallized intelligence was largely resistant to the") 
				print ("effects of aging. The theory was almost forgotten, but was revived by his student John L. Horn (1966) who later argued Gf and")
				print ("Gc were only two among several factors, and who eventually identified nine or ten broad abilities. The theory continued to be ")
				print ("called Gf-Gc theory.[22]")
				print (" ")
				print ("John B. Carroll (1993), after a comprehensive reanalysis of earlier data, proposed the three stratum theory, which is a ")
				print ("hierarchical model with three levels. The bottom stratum consists of narrow abilities that are highly specialized (e.g., ")
				print ("induction, spelling ability). The second stratum consists of broad abilities. Carroll identified eight second-stratum abilities.") 
				print ("Carroll accepted Spearman's concept of general intelligence, for the most part, as a representation of the uppermost, third") 
				print ("stratum.[37][38]")
				print (" ")
				print ("In 1999, a merging of the Gf-Gc theory of Cattell and Horn with Carroll's Three-Stratum theory has led to the Cattell–Horn–Carroll theory (CHC Theory). It has greatly influenced many of the current broad IQ tests.[22]")
				print (" ")
				print ("In CHC theory, a hierarchy of factors is used; g is at the top. Under it are ten broad abilities that in turn are subdivided into seventy narrow abilities. The broad abilities are:[22]")
				print (" ")
				print ("	Fluid intelligence (Gf) includes the broad ability to reason, form concepts, and solve problems using unfamiliar information or novel procedures.")
				print ("    Crystallized intelligence (Gc) includes the breadth and depth of a person's acquired knowledge, the ability to communicate one's knowledge, and the ability to reason using previously learned experiences or procedures.")
				print ("    Quantitative reasoning (Gq) is the ability to comprehend quantitative concepts and relationships and to manipulate numerical symbols.")
				print ("    Reading and writing ability (Grw) includes basic reading and writing skills.")
				print ("    Short-term memory (Gsm) is the ability to apprehend and hold information in immediate awareness, and then use it within a few seconds.")
				print ("    Long-term storage and retrieval (Glr) is the ability to store information and fluently retrieve it later in the process of thinking.")
				print ("    Visual processing (Gv) is the ability to perceive, analyze, synthesize, and think with visual patterns, including the ability to store and recall visual representations.")
				print ("    Auditory processing (Ga) is the ability to analyze, synthesize, and discriminate auditory stimuli, including the ability to process and discriminate speech sounds that may be presented under distorted conditions.")
				print ("    Processing speed (Gs) is the ability to perform automatic cognitive tasks, particularly when measured under pressure to maintain focused attention.")
				print ("    Decision/reaction time/speed (Gt) reflects the immediacy with which an individual can react to stimuli or a task (typically measured in seconds or fractions of seconds; it is not to be confused with Gs, which typically is measured in intervals of 2–3 minutes). See Mental chronometry.")
				print (" ")
				print ("Modern tests do not necessarily measure all of these broad abilities. For example, Gq and Grw may be seen as measures of school ")
				print ("achievement and not IQ.[22] Gt may be difficult to measure without special equipment. g was earlier often subdivided into only ")
				print ("Gf and Gc, which were thought to correspond to the nonverbal or performance subtests and verbal subtests in earlier versions of") 
				print ("the popular Wechsler IQ test. More recent research has shown the situation to be more complex.[22] Modern comprehensive IQ ")
				print ("tests do not stop at reporting a single IQ score. Although they still give an overall score, they now also give scores for ")
				print ("many of these more restricted abilities, identifying particular strengths and weaknesses of an individual.[22]")
				print ("\n\n\n\n\n\n\n")
				more1 = input("Other theories")
				print (" ")
				print ("J.P. Guilford's Structure of Intellect (1967) model used three dimensions which when combined yielded a total of 120 types of") 
				print ("intelligence. It was popular in the 1970s and early 1980s, but faded owing to both practical problems and theoretical")
				print ("criticisms.[22]")
				print (" ")
				print ("Alexander Luria's earlier work on neuropsychological processes led to the PASS theory (1997). It argued that only looking at ")
				print ("one general factor was inadequate for researchers and clinicians who worked with learning disabilities, attention disorders,") 
				print ("intellectual disability, and interventions for such disabilities. The PASS model covers four kinds of processes (planning ")
				print ("process, attention/arousal process, simultaneous processing, and successive processing). The planning processes involve ")
				print ("decision making, problem solving, and performing activities and requires goal setting and self-monitoring.")
				print (" ")
				print ("The attention/arousal process involves selectively attending to a particular stimulus, ignoring distractions, and maintaining") 
				print ("vigilance. Simultaneous processing involves the integration of stimuli into a group and requires the observation of ")
				print ("relationships. Successive processing involves the integration of stimuli into serial order. The planning and attention/arousal") 
				print ("components comes from structures located in the frontal lobe, and the simultaneous and successive processes come from ")
				print ("structures located in the posterior region of the cortex.[39][40][41] It has influenced some recent IQ tests, and been seen as")			
				print ("a complement to the Cattell-Horn-Carroll theory described above.[22]")
				print ("\n\n\n\n\n\n\n")
				more1 = input("Current tests")
				print ("Normalized IQ distribution with mean 100 and standard deviation 15.")
				print (" ")
				print ("There are a variety of individually administered IQ tests in use in the English-speaking world.[42][43] The most commonly used") 
				print ("individual IQ test series is the Wechsler Adult Intelligence Scale for adults and the Wechsler Intelligence Scale for Children ")
				print ("for school-age test-takers. Other commonly used individual IQ tests (some of which do not label their standard scores as ''IQ''")
				print ("scores) include the current versions of the Stanford-Binet Intelligence Scales, Woodcock-Johnson Tests of Cognitive Abilities, ")
				print ("the Kaufman Assessment Battery for Children, the Cognitive Assessment System, and the Differential Ability Scales.")
				print (" ")
				print ("IQ tests that measure intelligence also include:")
				print (" ")
				print ("    Raven's Progressive Matrices ")
				print ("    Cattell Culture Fair III ")
				print ("    Reynolds Intellectual Assessment Scales ")
				print ("    Thurstone's Primary Mental Abilities[44][45] ")
				print ("    Kaufman Brief Intelligence Test[46]")
				print ("   Multidimensional Aptitude Battery II")
				print ("   Das–Naglieri cognitive assessment system")
				print (" ")
				print ("IQ scales are ordinally scaled.[47][48][49][50][51] While one standard deviation is 15 points, and two SDs are 30 points, and")
				print ("so on, this does not imply that mental ability is linearly related to IQ, such that IQ 50 means half the cognitive ability of ")
				print ("IQ 100. In particular, IQ points are not percentage points.")
				print (" ")
				print ("On a related note, this fixed standard deviation means that the proportion of the population who have IQs in a particular range") 
				print ("is theoretically fixed, and current Wechsler tests only give Full Scale IQs between 40 and 160. This should be borne in mind ")
				print ("when considering reports of people with much higher IQs.[52][53]")
				print ("\n\n\n\n\n\n\n")
				more1 = input("Test bias or differential item functioning")
				print (" ")
				print ("Differential item functioning (DIF), sometimes referred to as measurement bias, is a phenomenon when participants from ")
				print ("different groups (e.g. gender, race, disability) with the same latent abilities give different answers to specific questions on ")
				print ("the same IQ test.[54] DIF analysis measures such specific items on a test alongside measuring participants latent abilities on ")
				print ("other similar questions. A consistent different group response to a specific question among similar type of questions can ")
				print ("indicate an effect of DIF. It does not count as differential item functioning if both groups have equally valid chance of ")
				print ("giving different responses to the same questions. Such bias can be a result of culture, educational level and other factors")
				print ("that are independent of group traits. DIF is only considered if test-takers from different groups with the same underlying ")
				print ("latent ability level have a different chance of giving specific responses.[55] Such questions are usually removed in order to") 
				print ("make the test equally fair for both groups. Common techniques for analyzing DIF are item response theory (IRT) based methods, ")
				print ("Mantel-Haenszel, and logistic regression.[55]")
				print ("\n\n\n\n\n\n\n")
				more1 = input("Reliability and validity")
				print (" ")
				print ("Psychometricians generally regard IQ tests as having high statistical reliability.[9][56] A high reliability implies that – ")
				print ("although test-takers may have varying scores when taking the same test on differing occasions, and although they may have ")
				print ("varying scores when taking different IQ tests at the same age – the scores generally agree with one another and across time.")
				print ("Like all statistical quantities, any particular estimate of IQ has an associated standard error that measures uncertainty about ")
				print ("the estimate. For modern tests, the standard error of measurement is about three points[citation needed]. Clinical psychologists")
				print ("generally regard IQ scores as having sufficient statistical validity for many clinical purposes.[22][57][58] In a survey of 661")
				print ("randomly sampled psychologists and educational researchers, published in 1988, Mark Snyderman and Stanley Rothman reported a") 
				print ("general consensus supporting the validity of IQ testing. ''On the whole, scholars with any expertise in the area of ")
				print ("intelligence and intelligence testing (defined very broadly) share a common view of the most important components of ")
				print ("intelligence, and are convinced that it can be measured with some degree of accuracy.'' Almost all respondents picked out ")
				print ("abstract reasoning, ability to solve problems and ability to acquire knowledge as the most important elements.[59]")
				print (" ")
				print ("IQ scores can differ to some degree for the same person on different IQ tests, so a person does not always belong to the same") 
				print ("IQ score range each time the person is tested. (IQ score table data and pupil pseudonyms adapted from description of KABC-II ")
				print ("norming study cited in Kaufman 2009.[60][61]) Pupil 	KABC-II 	WISC-III 	WJ-III")
				print ("Asher 	90 	95 	111")
				print ("Brianna 	125 	110 	105")
				print ("Colin 	100 	93 	101")
				print ("Danica 	116 	127 	118")
				print ("Elpha 	93 	105 	93")
				print ("Fritz 	106 	105 	105")
				print ("Georgi 	95 	100 	90")
				print ("Hector 	112 	113 	103")
				print ("Imelda 	104 	96 	97")
				print ("Jose 	101 	99 	86")
				print ("Keoku 	81 	78 	75")
				print ("Leo 	116 	124 	102")
				print ("\n\n\n\n\n\n\n")
				more1 = input("Flynn effect")
				print ("Main article: Flynn effect")
				print (" ")
				print ("Since the early 20th century, raw scores on IQ tests have increased in most parts of the world.[62][63][64] When a new version ")
				print ("of an IQ test is normed, the standard scoring is set so performance at the population median results in a score of IQ 100. The ")
				print ("phenomenon of rising raw score performance means if test-takers are scored by a constant standard scoring rule, IQ test scores ")
				print ("have been rising at an average rate of around three IQ points per decade. This phenomenon was named the Flynn effect in the") 
				print ("book The Bell Curve after James R. Flynn, the author who did the most to bring this phenomenon to the attention of ")
				print ("psychologists.[65][66]")
				print (" ")
				print ("Researchers have been exploring the issue of whether the Flynn effect is equally strong on performance of all kinds of IQ test") 
				print ("items, whether the effect may have ended in some developed nations, whether there are social subgroup differences in the ")
				print ("effect, and what possible causes of the effect might be.[67] A 2011 textbook, IQ and Human Intelligence, by N. J. Mackintosh, ")
				print ("noted the Flynn effect demolishes the fears that IQ would be decreased. He also asks whether it represents a real increase in ")
				print ("intelligence beyond IQ scores.[68] A 2011 psychology textbook, lead authored by Harvard Psychologist Professor Daniel Schacter, ")
				print ("noted that humans' inherited intelligence could be going down while acquired intelligence goes up.[69]")
				print (" ")
				print ("Research has revealed that the Flynn effect has slowed or reversed course in several Western countries beginning in the late")
				print ("20th century. The phenomenon has been termed the negative Flynn effect.[70][71] A study of Norwegian military conscripts' test ")
				print ("records found that IQ scores have been falling for generations born after the year 1975, and that the underlying nature of both ")
				print ("initial increasing and subsequent falling trends appears to be environmental rather than genetic.[71]")
				print ("\n\n\n\n\n\n\n")
				more1 = input("Age")
				print (" ")
				print ("IQ can change to some degree over the course of childhood.[72] However, in one longitudinal study, the mean IQ scores of ")
				print ("tests at ages 17 and 18 were correlated at r=0.86 with the mean scores of tests at ages five, six, and seven and at r=0.96 with")
				print ("the mean scores of tests at ages 11, 12, and 13.[9]")
				print (" ")
				print ("For decades, practitioners' handbooks and textbooks on IQ testing have reported IQ declines with age after the beginning of ")
				print ("adulthood. However, later researchers pointed out this phenomenon is related to the Flynn effect and is in part a cohort effect") 
				print ("rather than a true aging effect. A variety of studies of IQ and aging have been conducted since the norming of the first ")
				print ("Wechsler Intelligence Scale drew attention to IQ differences in different age groups of adults. Current consensus is that fluid")
				print ("intelligence generally declines with age after early adulthood, while crystallized intelligence remains intact. Both cohort")
				print ("effects (the birth year of the test-takers) and practice effects (test-takers taking the same form of IQ test more than once)") 
				print ("must be controlled to gain accurate data. It is unclear whether any lifestyle intervention can preserve fluid intelligence into ")
				print ("older ages.[73]")
				print (" ")
				print ("The exact peak age of fluid intelligence or crystallized intelligence remains elusive. Cross-sectional studies usually show ")
				print ("that especially fluid intelligence peaks at a relatively young age (often in the early adulthood) while longitudinal data ")
				print ("mostly show that intelligence is stable until mid-adulthood or later. Subsequently, intelligence seems to decline slowly.[74]")
				print ("\n\n\n\n\n\n\n")
				more1 = input("Genetics and environment")
				print (" ")
				print ("Environmental and genetic factors play a role in determining IQ. Their relative importance has been the subject of much ")
				print ("research and debate.[75]")
				print ("\n\n\n\n\n\n\n")
				more1 = input("Heritability")
				print ("See also: Heritability of IQ and Environment and intelligence")
				print (" ")
				print ("Heritability is defined as the proportion of variance in a trait which is attributable to genotype within a defined population ")
				print ("in a specific environment. A number of points must be considered when interpreting heritability.[76] Heritability, as a term, ")
				print ("applies to populations, and in populations there are variations in traits between individuals. Heritability measures how much ")
				print ("of that variation is caused by genetics. The value of heritability can change if the impact of environment (or of genes) in the ")
				print ("population is substantially altered. A high heritability of a trait does not mean environmental effects, such as learning, are") 
				print ("not involved. Since heritability increases during childhood and adolescence, one should be cautious drawing conclusions ")
				print ("regarding the role of genetics and environment from studies where the participants are not followed until they are adults.")
				print ("[citation needed]")
				print (" ")
				print ("The general figure for the heritability of IQ, according to an authoritative American Psychological Association report, is ")
				print ("0.45 for children, and rises to around 0.75 for late adolescents and adults.[77][78] Heritability measures in infancy are as ")
				print ("low as 0.2, around 0.4 in middle childhood, and as high as 0.9 in adulthood.[79][80] One proposed explanation is that people ")
				print ("with different genes tend to reinforce the effects of those genes, for example by seeking out different environments.[9][81]")
				print ("\n\n\n\n\n\n\n")
				more1 = input("Shared family environment")
				print (" ")
				print ("Family members have aspects of environments in common (for example, characteristics of the home). This shared family")
				print ("environment accounts for 0.25–0.35 of the variation in IQ in childhood. By late adolescence, it is quite low ")
				print ("(zero in some studies). The effect for several other psychological traits is similar. These studies have not looked at the ")
				print ("effects of such extreme environments, such as in abusive families.[9][82][83][84]")
				print ("\n\n\n\n\n\n\n")
				more1 = input("Non-shared family environment and environment outside the family")
				print (" ")
				print ("Although parents treat their children differently, such differential treatment explains only a small amount of ")				
				print ("nonshared environmental influence. One suggestion is that children react differently to the same environment because of ")
				print ("different genes. More likely influences may be the impact of peers and other experiences outside the family.[9][83]")
				print ("\n\n\n\n\n\n\n")
				more1 = input("Individual genes")
				print (" ")
				print ("A very large proportion of the over 17,000 human genes are thought to have an effect on the development and functionality of ")
				print ("the brain.[85] While a number of individual genes have been reported to be associated with IQ, none have a strong effect. Deary")
				print ("and colleagues (2009) reported that no finding of a strong single gene effect on IQ has been replicated.[86] Recent findings of ")
				print ("gene associations with normally varying intelligence differences in adults continue to show weak effects for any one gene;[87] ")
				print ("likewise in children,[88] but see.[89]")
				print ("\n\n\n\n\n\n\n")
				more1 = input("Gene-environment interaction")
				print (" ")
				print ("David Rowe reported an interaction of genetic effects with socioeconomic status, such that the heritability was high in ")
				print ("high-SES families, but much lower in low-SES families.[90] In the US, this has been replicated in infants,[91] children,[92]") 
				print ("adolescents,[93] and adults.[94] Outside the US, studies show no link between heritability and SES.[95] Some effects may even ")
				print ("reverse sign outside the US.[95][96]")
				print (" ")
				print ("Dickens and Flynn (2001) have argued that genes for high IQ initiate an environment-shaping feedback cycle, with genetic") 
				print ("effects causing bright children to seek out more stimulating environments that then further increase their IQ. In Dickens") 
				print ("model, environment effects are modeled as decaying over time. In this model, the Flynn effect can be explained by an increase") 
				print ("in environmental stimulation independent of it being sought out by individuals. The authors suggest that programs aiming to ")
				print ("increase IQ would be most likely to produce long-term IQ gains if they enduringly raised children's drive to seek out ")
				print ("cognitively demanding experiences.[97][98]")
				print ("\n\n\n\n\n\n\n")
				more1 = input("Interventions")
				print (" ")
				print ("In general, educational interventions, as those described below, have shown short-term effects on IQ, but long-term follow-up ")
				print ("is often missing. For example, in the US very large intervention programs such as the Head Start Program have not produced ")
				print ("lasting gains in IQ scores. More intensive, but much smaller projects such as the Abecedarian Project have reported lasting ")
				print ("effects, often on socioeconomic status variables, rather than IQ.[9]")
				print (" ")
				print ("Recent studies have shown that training in using one's working memory may increase IQ. A study on young adults published in") 
				print ("April 2008 by a team from the Universities of Michigan and Bern supports the possibility of the transfer of fluid intelligence") 
				print ("from specifically designed working memory training.[99] Further research will be needed to determine nature, extent and ")
				print ("duration of the proposed transfer. Among other questions, it remains to be seen whether the results extend to other kinds of") 
				print ("fluid intelligence tests than the matrix test used in the study, and if so, whether, after training, fluid intelligence ")
				print ("measures retain their correlation with educational and occupational achievement or if the value of fluid intelligence for ")
				print ("predicting performance on other tasks changes. It is also unclear whether the training is durable of extended periods of time.")
				print ("[100]")
				print ("\n\n\n\n\n\n\n")
				more1 = input("Music")
				print (" ")
				print ("Musical training in childhood has been found to correlate with higher than average IQ.[101][102] It is popularly thought that ")
				print ("listening to classical music raises IQ. However, multiple attempted replications (e.g.[103]) have shown that this is at best a ")
				print ("short-term effect (lasting no longer than 10 to 15 minutes), and is not related to IQ-increase.[104]")
				print ("\n\n\n\n\n\n\n")
				more1 = input("Brain anatomy")
				print ("Main article: Neuroscience and intelligence")
				print (" ")
				print ("Several neurophysiological factors have been correlated with intelligence in humans, including the ratio of brain weight to ")
				print ("body weight and the size, shape, and activity level of different parts of the brain. Specific features that may affect IQ ")
				print ("include the size and shape of the frontal lobes, the amount of blood and chemical activity in the frontal lobes, the total") 
				print ("amount of gray matter in the brain, the overall thickness of the cortex, and the glucose metabolic rate.[105]")
				print ("\n\n\n\n\n\n\n")
				more1 = input("Health")
				print ("Main articles: Impact of health on intelligence and Cognitive epidemiology")
				print (" ")
				print ("Health is important in understanding differences in IQ test scores and other measures of cognitive ability. Several factors ")
				print ("can lead to significant cognitive impairment, particularly if they occur during pregnancy and childhood when the brain is ")
				print ("growing and the blood–brain barrier is less effective. Such impairment may sometimes be permanent, sometimes be partially or") 
				print ("wholly compensated for by later growth.[citation needed]")
				print (" ")
				print ("Since about 2010, researchers such as Eppig, Hassel, and MacKenzie have found a very close and consistent link between IQ ")
				print ("scores and infectious diseases, especially in the infant and preschool populations and the mothers of these children.[106] ")
				print ("They have postulated that fighting infectious diseases strains the child's metabolism and prevents full brain development. ")
				print ("Hassel postulated that it is by far the most important factor in determining population IQ. However, they also found that ")
				print ("subsequent factors such as good nutrition and regular quality schooling can offset early negative effects to some extent.")
				print (" ")
				print ("Developed nations have implemented several health policies regarding nutrients and toxins known to influence cognitive function.")
				print ("These include laws requiring fortification of certain food products and laws establishing safe levels of pollutants (e.g. lead,")
				print ("mercury, and organochlorides). Improvements in nutrition, and in public policy in general, have been implicated in worldwide ")
				print ("IQ increases.[citation needed]")
				print (" ")
				print ("Cognitive epidemiology is a field of research that examines the associations between intelligence test scores and health. ")
				print ("Researchers in the field argue that intelligence measured at an early age is an important predictor of later health and ")
				print ("mortality differences.")
				print ("\n\n\n\n\n\n\n")
				more1 = input("Social correlations")
				more1 = input("School performance")
				print (" ")
				print ("The American Psychological Association's report Intelligence: Knowns and Unknowns states that wherever it has been studied, ")
				print ("children with high scores on tests of intelligence tend to learn more of what is taught in school than their lower-scoring ")
				print ("peers. The correlation between IQ scores and grades is about .50. This means that the explained variance is 25%. Achieving good ")
				print ("grades depends on many factors other than IQ, such as ''persistence, interest in school, and willingness to study'' (p. 81).[9]")
				print (" ")
				print ("It has been found that the correlation of IQ scores with school performance depends on the IQ measurement used. For ")
				print ("undergraduate students, the Verbal IQ as measured by WAIS-R has been found to correlate significantly (0.53) with the grade")
				print ("point average (GPA) of the last 60 hours. In contrast, Performance IQ correlation with the same GPA was only 0.22 in the same") 
				print ("study.[107]")
				print (" ")
				print ("Some measures of educational aptitude correlate highly with IQ tests – for instance, Frey and Detterman (2004) reported a ")
				print ("correlation of 0.82 between g (general intelligence factor) and SAT scores;[108] another research found a correlation of 0.81")
				print ("between g and GCSE scores, with the explained variance ranging ''from 58.6% in Mathematics and 48% in English to 18.1% in Art ")
				print ("and Design''.[109]")
				print ("\n\n\n\n\n\n\n")
				more1 = input("Job performance")
				print (" ")
				print ("According to Schmidt and Hunter, ''for hiring employees without previous experience in the job the most valid predictor of ")
				print ("future performance is general mental ability.''[110] The validity of IQ as a predictor of job performance is above zero for ")
				print ("all work studied to date, but varies with the type of job and across different studies, ranging from 0.2 to 0.6.[111] The ")
				print ("correlations were higher when the unreliability of measurement methods was controlled for.[9] While IQ is more strongly ")
				print ("correlated with reasoning and less so with motor function,[112] IQ-test scores predict performance ratings in all occupations.")
				print ("[110] That said, for highly qualified activities (research, management) low IQ scores are more likely to be a barrier to ")
				print ("adequate performance, whereas for minimally-skilled activities, athletic strength (manual strength, speed, stamina, and ")
				print ("coordination) are more likely to influence performance.[110] The prevailing view among academics is that it is largely ")
				print ("through the quicker acquisition of job-relevant knowledge that higher IQ mediates job performance. This view has been ")
				print ("challenged by Byington & Felps (2010), who argued that ''the current applications of IQ-reflective tests allow individuals ")
				print ("with high IQ scores to receive greater access to developmental resources, enabling them to acquire additional capabilities") 
				print ("over time, and ultimately perform their jobs better.''[113]")
				print (" ")
				print ("In establishing a causal direction to the link between IQ and work performance, longitudinal studies by Watkins and others ")
				print ("suggest that IQ exerts a causal influence on future academic achievement, whereas academic achievement does not substantially") 
				print ("influence future IQ scores.[114] Treena Eileen Rohde and Lee Anne Thompson write that general cognitive ability, but not")
				print ("specific ability scores, predict academic achievement, with the exception that processing speed and spatial ability predict")
				print ("performance on the SAT math beyond the effect of general cognitive ability.[115]")
				print (" ")
				print ("The US military has minimum enlistment standards at about the IQ 85 level. There have been two experiments with lowering this")
				print ("to 80 but in both cases these men could not master soldiering well enough to justify their costs.[116]")
				more1 = input("Income")
				print (" ")
				print ("While it has been suggested that ''in economic terms it appears that the IQ score measures something with decreasing ")
				print ("marginal value. It is important to have enough of it, but having lots and lots does not buy you that much'',[117][118] ")
				print ("large-scale longitudinal studies indicate an increase in IQ translates into an increase in performance at all levels of IQ:") 
				print ("i.e. ability and job performance are monotonically linked at all IQ levels.[119][120] Charles Murray, coauthor of The Bell ")
				print ("Curve, found that IQ has a substantial effect on income independent of family background.[121]")
				print (" ")
				print ("The link from IQ to wealth is much less strong than that from IQ to job performance. Some studies indicate that IQ is unrelated")
				print ("to net worth.[122][123]")
				print (" ")
				print ("The American Psychological Association's 1995 report Intelligence: Knowns and Unknowns stated that IQ scores accounted for ")
				print ("(explained variance) about a quarter of the social status variance and one-sixth of the income variance. Statistical controls") 
				print ("for parental SES eliminate about a quarter of this predictive power. Psychometric intelligence appears as only one of a great")
				print ("many factors that influence social outcomes.[9]")
				print (" ")
				print ("In a meta-analysis, Strenze (2006) reviewed much of the literature and estimated the correlation between IQ and income to be ")
				print ("about 0.23.[124]")
				print (" ")
				print ("Some studies claim that IQ only accounts for (explains) a sixth of the variation in income because many studies are based on") 
				print ("young adults, many of whom have not yet reached their peak earning capacity, or even their education. On pg 568 of The g ")
				print ("Factor, Arthur Jensen claims that although the correlation between IQ and income averages a moderate 0.4 (one sixth or 16% ")
				print ("of the variance), the relationship increases with age, and peaks at middle age when people have reached their maximum career")
				print ("potential. In the book, A Question of Intelligence, Daniel Seligman cites an IQ income correlation of 0.5 (25% of the variance).")
				print (" ")
				print ("A 2002 study[125] further examined the impact of non-IQ factors on income and concluded that an individual's location, ")
				print ("inherited wealth, race, and schooling are more important as factors in determining income than IQ.")
				more1 = input("Crime")
				print (" ")
				print ("The American Psychological Association's 1995 report Intelligence: Knowns and Unknowns stated that the correlation between ")
				print ("IQ and crime was −0.2. It was −0.19 between IQ scores and number of juvenile offenses in a large Danish sample; with social")
				print ("class controlled, the correlation dropped to −0.17. A correlation of 0.20 means that the explained variance is 4%. The causal")
				print ("links between psychometric ability and social outcomes may be indirect. Children with poor scholastic performance may feel")
				print ("alienated. Consequently, they may be more likely to engage in delinquent behavior, compared to other children who do well.[9]")
				print (" ")
				print ("In his book The g Factor (1998), Arthur Jensen cited data which showed that, regardless of race, people with IQs between 70 ")
				print ("and 90 have higher crime rates than people with IQs below or above this range, with the peak range being between 80 and 90.")
				print (" ")
				print ("The 2009 Handbook of Crime Correlates stated that reviews have found that around eight IQ points, or 0.5 SD, separate criminals")
				print ("from the general population, especially for persistent serious offenders. It has been suggested that this simply reflects that ")
				print ("''only dumb ones get caught'' but there is similarly a negative relation between IQ and self-reported offending. That children")
				print ("with conduct disorder have lower IQ than their peers ''strongly argues'' for the theory.[126]")
				print (" ")
				print ("A study of the relationship between US county-level IQ and US county-level crime rates found that higher average IQs were ")
				print ("associated with lower levels of property crime, burglary, larceny rate, motor vehicle theft, violent crime, robbery, and ")
				print ("aggravated assault. These results were not ''confounded by a measure of concentrated disadvantage that captures the effects")
				print ("of race, poverty, and other social disadvantages of the county.''[127][128]")
				print ("\n\n\n\n\n\n\n")
				more1 = input("Health and mortality")
				print (" ")
				print ("Multiple studies conducted in Scotland have found that higher IQs in early life are associated with lower mortality and")
				print ("morbidity rates later in life.[129][130]")
				print ("\n\n\n\n\n\n\n")
				more1 = input("Other accomplishments")
				print ("Average adult combined IQs associated with real-life accomplishments by various tests[131][132] Accomplishment 	IQ 	Test/study ")
				print ("Year")
				print ("MDs, JDs, and PhDs 	125 	WAIS-R 	1987")
				print ("College graduates 	112 	KAIT 	2000")
				print ("K-BIT 	1992")
				print ("115 	WAIS-R") 	
				print ("1–3 years of college 	104 	KAIT ")	
				print ("K-BIT 	")
				print ("105–110 	WAIS-R 	")
				print ("Clerical and sales workers 	100–105 		")
				print ("High school graduates, skilled workers (e.g., electricians, cabinetmakers) 	100 	KAIT ")	
				print ("WAIS-R 	")
				print ("97 	K-BIT 	")
				print ("1–3 years of high school (completed 9–11 years of school) 	94 	KAIT 	")
				print ("90 	K-BIT 	")
				print ("95 	WAIS-R 	")
				print ("Semi-skilled workers (e.g. truck drivers, factory workers) 	90–95 ")		
				print ("Elementary school graduates (completed eighth grade) 	90 		")
				print ("Elementary school dropouts (completed 0–7 years of school) 	80–85 		")
				print ("Have 50/50 chance of reaching high school 	75 		")
				print ("Average IQ of various occupational groups:[133] Accomplishment 	IQ 	Test/study 	Year")
				print ("Professional and technical 	112 		")
				print ("Managers and administrators 	104 		")
				print ("Clerical workers, sales workers, skilled workers, craftsmen, and foremen 	101 		")
				print ("Semi-skilled workers (operatives, service workers, including private household) 	92") 		
				print ("Unskilled workers 	87 		")
				print ("Type of work that can be accomplished:[131] Accomplishment 	IQ 	Test/study 	Year")
				print ("Adults can harvest vegetables, repair furniture 	60 ")		
				print ("Adults can do domestic work 	50 	")	
				print (" ")
				print ("There is considerable variation within and overlap among these categories. People with high IQs are found at all levels of ")
				print ("education and occupational categories. The biggest difference occurs for low IQs with only an occasional college graduate or")
				print ("professional scoring below 90.[22]")
				more1 = input("Group-IQ or the collective intelligence factor c")
				print ("\n\n\n\n\n\n\n")
				print ("Main article: Collective intelligence")
				print (" ")
				print ("With operationalization and methodology derived from the general intelligence factor g, a new scientific understanding of ")
				print ("collective intelligence, defined as a group’s general ability to perform a wide range of tasks,[134] aims to explain ")
				print ("intelligent behavior of groups. Goal is to detect and explain a general intelligence factor c for groups, parallel to the g ")
				print ("factor for individuals. As g is highly interrelated with the concept of IQ,[135][136] this measurement of collective ")
				print ("intelligence can be interpreted as intelligence quotient for groups (Group-IQ) even though the score is not a quotient per se")
				print ("Current evidence suggests that this Group-IQ is only moderately correlated with group members' IQs but with other correlates")
				print ("such as group members' Theory of Mind.[134]")
				print ("\n\n\n\n\n\n\n")
				more1 = input("Group differences")
				print (" ")
				print ("Among the most controversial issues related to the study of intelligence is the observation that intelligence measures such as ")
				print ("IQ scores vary between ethnic and racial groups and sexes. While there is little scholarly debate about the existence of some ")
				print ("of these differences, their causes remain highly controversial both within academia and in the public sphere.[137]")
				print ("\n\n\n\n\n\n\n")
				more1 = input("Sex")
				print ("Main article: Sex differences in intelligence")
				print (" ")
				print ("Most IQ tests are constructed so that there are no overall score differences between females and males.[9][138] Popular IQ ")
				print ("batteries such as the WAIS and the WISC-R are also constructed in order to eliminate sex differences.[139] In a paper")
				print ("presented at the International Society for Intelligence Research in 2002, it was pointed out that because test constructors")
				print ("and the United States' Educational Testing Service (which developed the US SAT test) often eliminate items showing marked ")
				print ("sex differences in order to reduce the perception of bias, the ''true sex'' difference is masked. Items like the Mental ")
				print ("Rotations Test and reaction time tests, which show a male advantage in IQ, are often removed.[140] Meta-analysis focusing on") 
				print ("gender differences in math performance found nearly identical performance for boys and girls,[141] and the subject of ")
				print ("mathematical intelligence and gender has been controversial.[142]")
				print ("\n\n\n\n\n\n\n")
				more1 = input("IQ by country")
				more1 = input("Race and intelligence")
				print ("Main articles: Race and intelligence and Nations and intelligence")
				print ("Race and intelligence in United States of America")
				print (" ")
				print ("The 1996 Task Force investigation on Intelligence sponsored by the American Psychological Association concluded that there")
				print ("are significant variations in IQ across races.[9] The problem of determining the causes underlying this variation relates ")
				print ("to the question of the contributions of ''nature and nurture'' to IQ. Psychologists such as Alan S. Kaufman[143] and Nathan")
				print ("Brody[144] and statisticians such as Bernie Devlin[145] argue that there are insufficient data to conclude that this is ")
				print ("because of genetic influences. A review article published in 2012 by leading scholars on human intelligence concluded, ")
				print ("after reviewing the prior research literature, that group differences in IQ are best understood as environmental in origin.")
				print ("[146]")
				print (" ")
				print ("In considering disparities between test results of different ethnic groups, one might investigate the effects of stereotype ")
				print ("threat (a situational predicament in which a person feels at risk of confirming negative stereotypes about the group(s) he ")
				print ("identifies with),[147] as well as culture and acculturation.[148] This phenomenon has been criticized as a fiction of ")
				print ("publication bias.[149]")
				print ("\n\n\n\n\n\n\n")
				more1 = input("Public policy")
				print ("Main article: Intelligence and public policy")
				print (" ")
				print ("In the United States, certain public policies and laws regarding military service,[150][151] education, public benefits,")
				print ("[152] capital punishment,[153] and employment incorporate an individual's IQ into their decisions. However, in the case of") 
				print ("Griggs v. Duke Power Co. in 1971, for the purpose of minimizing employment practices that disparately impacted racial")
				print ("minorities, the U.S. Supreme Court banned the use of IQ tests in employment, except when linked to job performance via a job") 
				print ("analysis. Internationally, certain public policies, such as improving nutrition and prohibiting neurotoxins, have as one of ")
				print ("their goals raising, or preventing a decline in, intelligence.")
				print (" ")
				print ("A diagnosis of intellectual disability is in part based on the results of IQ testing. Borderline intellectual functioning is a") 
				print ("categorization where a person has below average cognitive ability (an IQ of 71–85), but the deficit is not as severe as ")
				print ("intellectual disability (70 or below).")
				print (" ")
				print ("In the United Kingdom, the eleven plus exam which incorporated an intelligence test has been used from 1945 to decide, at")
				print ("eleven years of age, which type of school a child should go to. They have been much less used since the widespread ")
				print ("introduction of comprehensive schools.")
				print ("\n\n\n\n\n\n\n")
				more1 = input("Criticism and views")
				more1 = input("Relationship to intelligence")
				print ("See also: Intelligence")
				print (" ")
				print ("IQ is the most thoroughly researched means of measuring intelligence, and by far the most widely used in practical settings. ")
				print ("However, while IQ strives to measure some concepts of intelligence, it may fail to serve as an accurate measure of broader ")
				print ("definitions of intelligence. IQ tests examine some areas of intelligence, while neglecting to account for other areas, such as")
				print ("creativity and social intelligence.")
				print (" ")
				print ("Critics such as Keith Stanovich do not dispute the reliability of IQ test scores or their capacity to predict some kinds of")
				print ("achievement, but argue that basing a concept of intelligence on IQ test scores alone neglects other important aspects of") 
				print ("mental ability.[9][154]")
				print ("\n\n\n\n\n\n\n")
				more1 = input("Criticism of IQ")
				print (" ")
				print ("Some scientists dispute the worthiness of IQ entirely. In The Mismeasure of Man (1996), paleontologist Stephen Jay Gould")
				print ("criticized IQ tests and argued that they were used for scientific racism. He argued that g was a mathematical artifact and") 
				print ("criticized:")
				print (" ")
				print ("	...the abstraction of intelligence as a single entity, its location within the brain, its quantification as one number ")
				print ("for each individual, and the use of these numbers to rank people in a single series of worthiness, invariably to find that ")
				print ("oppressed and disadvantaged groups—races, classes, or sexes—are innately inferior and deserve their status.[155] ")
				print (" ")
				print ("Arthur Jensen responded:")
				print (" ")
				print ("    ...what Gould has mistaken for ''reification'' is neither more nor less than the common practice in every science of") 
				print ("hypothesizing explanatory models to account for the observed relationships within a given domain. Well known examples ")
				print ("include the heliocentric theory of planetary motion, the Bohr atom, the electromagnetic field, the kinetic theory of gases,") 
				print ("gravitation, quarks, Mendelian genes, mass, velocity, etc. None of these constructs exists as a palpable entity occupying")
				print ("physical space.[156] ")
				print (" ")
				print ("Jensen also argued that even if g were replaced by a model with several intelligences this would change the situation less ")
				print ("than expected. He argues that all tests of cognitive ability would continue to be highly correlated with one another and there")
				print ("would still be a black-white gap on cognitive tests.[157] Hans Eysenck responded to Gould by stating that no psychologist had")
				print ("said that intelligence was an area located in the brain.[158] Eysenck also argued IQ tests were not racist, pointing out that")
				print ("Northeast Asians and Jews both scored higher than non-Jewish Europeans on IQ tests, and this would not please European racists.")
				print ("[159]")
				print (" ")
				print ("Psychologist Peter Schönemann persistently criticized IQ, calling it ''the IQ myth''. He argued that g is a flawed theory")
				print ("and that the high heritability estimates of IQ are based on false assumptions.[160][161] Robert Sternberg, another significant")
				print ("critic of g as the main measure of human cognitive abilities, argued that reducing the concept of intelligence to the")
				print ("measure of g does not fully account for the different skills and knowledge types that produce success in human society.[162]")
				more1 = input("Systematic exclusion of threshold effects")
				print ("\n\n\n\n\n\n\n")
				print (" ")
				print ("Cecil Reynolds and Paul Kline argue that the construction of IQ tests around the rule that they should show a bell curve")
				print ("distribution in the population leads to systematic exclusion of cognitive tests that display threshold effects and are not")
				print ("gradually variable, as well as biasing IQ tests towards questions that can be made to fit a bell curve model and against")
				print ("questions that show any non-bell distributions. They argue that just as swarms change their collective behavior at certain")
				print ("thresholds of animals in the swarm, it is possible that brains change their abilities at thresholds of number of connected ")
				print ("neurons and/or level of connectivity. Cecil Reynolds and Paul Kline argue that such a bias may be the reason why IQ tests")
				print ("yield paradoxes such as the heredity paradox between high heredity showed by twin studies and the high environmental")
				print ("effect shown by the Flynn effect and suggest that other cognitive tests that do not conform to bell curve distributions")
				print ("should be tried with the possibility that some of them may produce falsifiable predictions of key abilities requiring a ")
				print ("critical level of underlying quantitative brain access and simpler proxies of such in every case, unlike IQ tests which")
				print ("are argued to fail the falsifiability criterion by defining away problems by systematically demanding bell curves and ")
				print ("failing to make any absolute system requirement predictions of what brain capacity is required to make a certain ")
				print ("performance. It is argued that probabilistic predictions with loopholes for ''exceptions'' are not scientifically ")
				print ("appliceable to capacity theories, as capacities follow minimum system requirements for performing tasks.[163][164]")
				print ("\n\n\n\n\n\n\n")
				more1 = input("Test bias")
				print ("See also: Stereotype threat")
				print (" ")
				print ("The American Psychological Association's report Intelligence: Knowns and Unknowns stated that in the United States IQ tests") 
				print ("as predictors of social achievement are not biased against African Americans since they predict future performance, ")
				print ("such as school achievement, similarly to the way they predict future performance for Caucasians.[9] While agreeing that ")
				print ("IQ tests predict performance equally well for all racial groups, Nicholas Mackintosh also points out that there may still") 
				print ("be a bias inherent in IQ testing if the education system is also systematically biased against African Americans, in")
				print ("which case educational performance may in fact also be an underestimation of African American children's cognitive")
				print ("abilities.[165] Earl Hunt points out that while this may be the case that would not be a bias of the test, but of society.[166]")
				print (" ")
				print ("However, IQ tests may well be biased when used in other situations. A 2005 study stated that ''differential validity in ")
				print ("prediction suggests that the WAIS-R test may contain cultural influences that reduce the validity of the WAIS-R as a measure") 
				print ("of cognitive ability for Mexican American students,''[167] indicating a weaker positive correlation relative to sampled ")
				print ("white students. Other recent studies have questioned the culture-fairness of IQ tests when used in South Africa.[168][169]") 
				print ("Standard intelligence tests, such as the Stanford-Binet, are often inappropriate for autistic children; the alternative of ")
				print ("using developmental or adaptive skills measures are relatively poor measures of intelligence in autistic children, and may ")
				print ("have resulted in incorrect claims that a majority of autistic children are mentally retarded.[170]")
				print ("\n\n\n\n\n\n\n")
				more1 = input("Intermingling cultures and IQ classification fairness")
				print (" ")
				print ("Barbara P. Uzzell and Harvey N. Switzky argue that defining IQ from an average at a period of time and putting different")
				print ("thresholds of what is considered retarded based on average IQ test performance in a culture faces issues of defining who ")
				print ("belongs to what culture. They argue that since people are not actually in boxes of isolated cultures, essentialistic ")
				print ("classification of culture that is said to make IQ tests ''culturally fair'' will show false ''evidence'' of underlying ")
				print ("cognitive differences between individuals who are formally classified in the same culture but have faced different cultural") 
				print ("non-shared environments due to the fluid intermingling of cultures in real life, making IQ tests a false measure of mental ")
				print ("retardation. It is argued by Barbara P. Uzzell and Harvey N. Switzky that different social treatment depending on hereditary ")
				print ("factors in appearance that may not necessarily be classified as ''racial'' but can often be considered individual leads to an")
				print ("appearance of genes for such appearances being linked to learned behaviors and false evidence of the genes affecting the ")
				print ("brain's response to the environment, and that environmental differences in whether other people with whom a person speaks are") 
				print ("willing to counter misunderstandings with factual arguments or dismisses the person as ''incapable of reasoning if he or she ")
				print ("does not already know it'' creates differences in the opportunities to learn rules that can be used for solving problems in ")
				print ("IQ tests and that widespread persistence of such cultural treatment gives a false appearance of IQ tests being reliable ")
				print ("and valid measures of underlying cognitive abilities. It is argued that such effects of different opportunities to ")
				print ("sharpen arguments through debate in all walks of life, including prejudice towards choice of words shaped by earlier ")
				print ("differences in debate opportunities, make different predictions than lab setting only stereotype threat theory and ")
				print ("must therefore be tested by different evidence than that theory, and that discrimination in society based on choice of") 
				print ("words is a possible explanation of apparent links between IQ test performance and success in society.[171][172]")
				print ("\n\n\n\n\n\n\n")
				more1 = input("Outdated methodology")
				print ("See also: Psychometrics")
				print (" ")
				print ("According to a 2006 article, contemporary psychological research often did not reflect substantial recent developments in ")
				print ("psychometrics and ''bears an uncanny resemblance to the psychometric state of the art as it existed in the 1950s.''[173]")
				print ("\n\n\n\n\n\n\n")
				more1 = input("Intelligence: Knowns and Unknowns")
				print (" ")
				print ("In response to the controversy surrounding The Bell Curve, the American Psychological Association's Board of Scientific ")
				print ("Affairs established a task force in 1995 to write a report on the state of intelligence research which could be used by all") 
				print ("sides as a basis for discussion, Intelligence: Knowns and Unknowns. The full text of the report is available through several ")
				print ("websites.[9]")
				print (" ")
				print ("In this paper, the representatives of the association regret that IQ-related works are frequently written with a view to ")
				print ("their political consequences: ''research findings were often assessed not so much on their merits or their scientific ")
				print ("standing as on their supposed political implications''.")
				print (" ")
				print ("The task force concluded that IQ scores do have high predictive validity for individual differences in school ")
				print ("achievement. They confirm the predictive validity of IQ for adult occupational status, even when variables such as ")
				print ("education and family background have been statistically controlled. They stated that individual differences in ")
				print ("intelligence are substantially influenced by both genetics and environment.")
				print (" ")
				print ("The report stated that a number of biological factors, including malnutrition, exposure to toxic substances, and various ")
				print ("prenatal and perinatal stressors, result in lowered psychometric intelligence under at least some conditions. The task ")
				print ("force agrees that large differences do exist between the average IQ scores of blacks and whites, saying")
				print (" ")
				print ("	The cause of that differential is not known; it is apparently not due to any simple form of bias in the content or ")
				print ("	administration of the tests themselves. The Flynn effect shows that environmental factors can produce differences of at") 
				print ("	least this magnitude, but that effect is mysterious in its own right. Several culturally based explanations of the ")
				print ("	Black/ White IQ differential have been proposed; some are plausible, but so far none has been conclusively supported.") 
				print ("	There is even less empirical support for a genetic interpretation. In short, no adequate explanation of the ")
				print ("	differential between the IQ means of Blacks and Whites is presently available. ")
				print (" ")
				print ("The APA journal that published the statement, American Psychologist, subsequently published eleven critical responses in ")
				print ("January 1997, several of them arguing that the report failed to examine adequately the evidence for partly genetic ")
				print ("explanations.")
				print ("\n\n\n\n\n\n\n")
				more1 = input("Dynamic assessment")
				print (" ")
				print ("An alternative to standard IQ tests originated in the writings of psychologist Lev Vygotsky (1896–1934) from his ")
				print ("last two years of work.[174][175] The notion of the zone of proximal development that he introduced in 1933, ")
				print ("roughly a year before his death, served as the banner for his proposal to diagnose development as the level of actual") 
				print ("development that can be measured by the child's independent problem solving and, at the same time, the level of proximal,") 
				print ("or potential development that is measured in the situation of moderately assisted problem solving by the child.[176] The ")
				print ("maximum level of complexity and difficulty of the problem that the child is capable to solve under some guidance indicates ")
				print ("the level of potential development. Then, the difference between the higher level of potential and the lower level of ")
				print ("actual development indicates the zone of proximal development. Combination of the two indexes—the level of actual and the") 
				print ("zone of the proximal development—according to Vygotsky, provides a significantly more informative indicator of psychological") 
				print ("development than the assessment of the level of actual development alone.[177][178]")
				print (" ")
				print ("The ideas on the zone of development were later developed in a number of psychological and educational theories and ")
				print ("practices. Most notably, they were developed under the banner of dynamic assessment that focuses on the testing of ")
				print ("learning and developmental potential[179][180][181] (for instance, in the work of Reuven Feuerstein and his associates,[182]") 
				print ("who has criticized standard IQ testing for its putative assumption or acceptance of ''fixed and immutable'' characteristics ")
				print ("of intelligence or cognitive functioning). Grounded in developmental theories of Vygotsky and Feuerstein, who maintained ")
				print ("that human beings are not static entities but are always in states of transition and transactional relationships with the ")
				print ("world, dynamic assessment received also considerable support in the recent revisions of cognitive developmental theory by ")
				print ("Joseph Campione, Ann Brown, and John D. Bransford and in theories of multiple intelligences by Howard Gardner and Robert ")
				print ("Sternberg.[183] Still, dynamic assessment has not been implemented in education on a large scale as is up to now, by ")
				print ("admission of one of its notable proponents, ''in search of its identity''.[184]")
				print ("\n\n\n\n\n\n\n")
				more1 = input("Classification")
				print ("Main article: IQ classification")
				print (" ")
				print ("IQ classification is the practice used by IQ test publishers for designating IQ score ranges into various categories with ")
				print ("labels such as ''superior'' or ''average.''[185] IQ classification was preceded historically by attempts to classify human ")
				print ("beings by general ability based on other forms of behavioral observation. Those other forms of behavioral observation are ")
				print ("still important for validating classifications based on IQ tests.")
				print ("\n\n\n\n\n\n\n")
				more1 = input("High IQ societies")
				print ("Main article: High IQ society")
				print (" ")
				print ("There are social organizations, some international, which limit membership to people who have scores as high as or ")
				print ("higher than the 98th percentile (2 standard deviations above the mean) on some IQ test or equivalent. Mensa International") 
				print ("is perhaps the best known of these. The largest 99.9th percentile (3 standard deviations above the mean) society is the")
				print ("Triple Nine Society. ")
				print ("\n\n\n\n\n\n\n")
				noMore = input("Press [ENTER] key to quit")
			if WikIDSelect == 30008:
				print ("Bit slicing is a technique for constructing a processor from modules of processors of smaller bit width, for the purpose of ")
				print ("increasing the word length; in theory to make an arbitrary n-bit CPU. Each of these component modules processes one bit ")
				print ("field or 'slice' of an operand. The grouped processing components would then have the capability to process the chosen full ")
				print ("word-length of a particular software design.")
				print (" ")
				print ("Bit slicing more or less died out due to the advent of the microprocessor. Recently it's been used in ALUs for quantum ")
				print ("computers, and has been used as a software technique (e.g. in x86 CPUs, for cryptography.[1])")
				more1 = input("Contents")
				print (" ")
				print ("1 Operational details")
				print ("2 Historical necessity")
				print ("3 Modern use")
				print ("3.1 Software use on non-bit-slice hardware")
				print ("3.2 Bit-sliced quantum computers")
				print ("4 See also")
				print ("5 References")
				print ("6 External links")
				print (" ")
				more1 = input("Operational details")
				print (" ")
				print ("Bit slice processors usually include an arithmetic logic unit (ALU) of 1, 2, 4, 8 or 16 bits and control lines ")
				print ("(including carry or overflow signals that are internal to the processor in non-bitsliced CPU designs).")
				print (" ")
				print ("For example, two 4-bit ALU chips could be arranged side by side, with control lines between them, to form an 8-bit ALU")
				print ("(result need not be power of two, e.g. three 1-bit can make a 3-bit ALU,[2] thus 3-bit (or n-bit) CPU, while 3-bit, or any") 
				print ("CPU with higher odd-number of bits, hasn't been manufactured and sold in volume). Four 4-bit ALU chips could be used to") 
				print ("build a 16-bit ALU. It would take eight chips to build a 32-bit word ALU. The designer could add as many slices as ")
				print ("required to manipulate increasingly longer word lengths.")
				print (" ")
				print ("A microsequencer or control ROM would be used to execute logic to provide data and control signals to regulate function of ")
				print ("the component ALUs.")
				print (" ")
				print ("Known bit-slice microprocessor modules:")
				print (" ")
				print ("1-bit slice:")
				print ("...")
				print (" ")
				print ("2-bit slice:")
				print ("Intel 3000 family (1974), e.g. Intel 3002 with Intel 3001, second-sourced by Signetics and Intersil[3]")
				print ("Signetics 8X02 family (1977)[4]")
				print (" ")
				print ("4-bit slice:")
				print ("National GPC/P / IMP-4 (1973),[5] second-sourced by Rockwell")
				print ("National IMP-16 family (1973), e.g. IMP-00A/520D (RALU) with IMP16A/521D and IMP16A/522D, cascadable up to 16 bit")
				print ("AMD Am2900 family (1975), e.g. AM2901, AM2903")
				print ("Monolithic Memories 5700/6700 family (1974)[6][7][8][9] e.g. MMI 5701 / MMI 6701, second-sourced by ITT Semiconductors")
				print ("Texas Instruments SBP0400 (1975), cascadable up to 16 bit")
				print ("Texas Instruments SN74181 (1970)")
				print ("Texas Instruments SN74S281 with SN74S282")
				print ("Texas Instruments SN74S481 with SN74S482 (1976)[10]")
				print ("Fairchild 9400 (MACROLOGIC), 4700")
				print ("Motorola M10800 family (1979),[11] e.g. MC10800")
				print (" ")
				print ("8-bit slice:")
				print ("National IMP-8 family (1974), cascadable up to 32-bit")
				print ("Texas Instruments SN54AS888 / SN74AS888")
				print ("Fairchild 100K")
				print ("ZMD U830C [de] (1978/1981), cascadable up to 32 bit")
				print ("16-bit slice:")
				print ("AMD Am29100 family")
				print ("Synopsys 49C402")
				print (" ")
				more1 = input("Historical necessity")
				print (" ")
				print ("Bit slicing, although not called that at the time, was also used in computers before large scale integrated circuits ")
				print ("(LSI, the predecessor to today's VLSI, or very-large-scale integration circuits). The first bit-sliced machine was ")
				print ("EDSAC 2, built at the University of Cambridge Mathematical Laboratory in 1956–1958.[citation needed]")
				print (" ")
				print ("Prior to the mid-1970s and late 1980s there was some debate over how much bus width was necessary in a given computer system ")
				print ("to make it function. Silicon chip technology and parts were much more expensive than today. Using multiple, simpler, and ")
				print ("thus less expensive ALUs was seen[by whom?] as a way to increase computing power in a cost effective manner. ")
				print ("While 32-bit architecture microprocessors were being discussed at the time,[by whom?] few were in production.[citation needed]")
				print (" ")
				print ("The UNIVAC 1100 series mainframes (one of the oldest series, originating in the 1950s) has a 36-bit architecture and the ")
				print ("1100/60 introduced in 1979 used nine Motorola MC10800 4-bit ALU[11] chips to implement the needed word width while using ")
				print ("modern integrated circuits.[12]")
				print (" ")
				print ("At the time 16-bit processors were common but expensive, and 8-bit processors, such as the Z80, were widely used in the ")
				print ("nascent home computer market.")
				print (" ")
				print ("Combining components to produce bit slice products allowed engineers and students to create more powerful and complex ")
				print ("computers at a more reasonable cost, using off-the-shelf components that could be custom-configured. The complexities ")
				print ("of creating a new computer architecture were greatly reduced when the details of the ALU were already specified (and debugged).")
				print (" ")
				print ("The main advantage was that bit slicing made it economically possible in smaller processors to use bipolar transistors,")
				print ("[citation needed] which switch much faster than NMOS or CMOS transistors.[citation needed] This allowed for much higher ")
				print ("clock rates, where speed was needed; for example DSP functions or matrix transformation, or as in the Xerox Alto, the ")
				print ("combination of flexibility and speed, before discrete CPUs were able to deliver that.")
				more1 = input("Modern use")
				print ("Software use on non-bit-slice hardware")
				print ("")
				print ("In more recent times, the term bit-slicing was re-coined by Matthew Kwan[13] to refer to the technique of using a") 
				print ("general purpose CPU to implement multiple parallel simple virtual machines using general logic instructions to ")
				print ("perform Single Instruction Multiple Data (SIMD) operations. This technique is also known as SIMD Within A Register (SWAR).")
				print (" ")
				print ("This was initially in reference to Eli Biham's 1997 paper A Fast New DES Implementation in Software,[14] which achieved ")
				print ("significant gains in performance of DES by using this method.")
				more1 = input("Bit-sliced quantum computers")
				print (" ")
				print ("To simplify the circuit structure and reduces the hardware cost of quantum computers (proposed to run the MIPS32 ")
				print ("instruction set) a 50 GHz superconducting ''4-bit bit-slice arithmetic logic unit (ALU) for 32-bit rapid single-flux-quantum") 
				print ("microprocessors was demonstrated.''[15] ")
				noMore = input("Press [ENTER] to quit")